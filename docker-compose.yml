version: '3.5'

services:
  api:
    container_name: 'stellariscloud-api'
    build:
      context: .
      dockerfile: docker/api.Dockerfile
      target: local
    volumes:
      - ./:/usr/src/app:cached
    env_file: packages/api/env/env.${CMD_ENV:-dev}
    environment:
      WAIT_HOSTS: db:${DB_PORT:-0}, redis:${REDIS_PORT:-0}
    deploy:
      replicas: 1
    command: ['yarn', 'workspace', '@stellariscloud/api', 'dev']
    ports:
      - 3001:3001
      - 3002:3002
  nestjsapi:
    container_name: 'stellariscloud-nestjsapi'
    build:
      context: .
      dockerfile: docker/nestjsapi.Dockerfile
      target: local
    volumes:
      - ./:/usr/src/app:cached
    env_file: packages/nestjsapi/env/env.${CMD_ENV:-dev}
    environment:
      WAIT_HOSTS: db:${DB_PORT:-0}, redis:${REDIS_PORT:-0}
    deploy:
      replicas: 1
    command: ['yarn', 'workspace', '@stellariscloud/nestjsapi', 'dev']
    ports:
      - 3001:3001
      - 3002:3002
  redis:
    image: redis:alpine
    command: redis-server
    ports:
      - 6379:${REDIS_PORT:-0}
    volumes:
      - ./.docker/redis/:/data
  # minio:
  #   image: minio/minio
  #   command: server /data --address "minio:9000" --console-address ":9001"
  #   volumes:
  #     - ./.docker/minio/:/data
  #   ports:
  #     - 9001:${MINIO_CONSOLE_PORT:-0}
  #     - 9000:9000
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://minio:9000/minio/health/live"]
  #     interval: 3s
  #     timeout: 2s
  #     retries: 10
  #   environment:
  #     - MINIO_DOMAIN=minio:9000
  # minioclient:
  #   image: minio/mc
  #   depends_on:
  #     minio:
  #       condition: service_healthy
  #   restart: on-failure
  #   entrypoint: >
  #     /bin/sh -c "
  #     /usr/bin/mc config host add myminio http://minio:9000 minioadmin minioadmin;

  #     /usr/bin/mc rm -r --force myminio/uploads;
  #     /usr/bin/mc rm -r --force myminio/blockchain-cache;
  #     /usr/bin/mc rm -r --force myminio/snapshot-payloads;
  #     /usr/bin/mc mb myminio/uploads;
  #     /usr/bin/mc mb myminio/blockchain-cache;
  #     /usr/bin/mc mb myminio/snapshot-payloads;

  #     /usr/bin/mc admin user add myminio ${S3_ACCESS_KEY_ID} ${S3_SECRET_ACCESS_KEY};
  #     /usr/bin/mc admin policy set myminio readwrite user=${S3_ACCESS_KEY_ID};

  #     # /usr/bin/mc admin trace -v -a myminio

  #     exit 0;
  #     "
  db:
    image: postgres:13.2-alpine
    ports:
      - 5432:${DB_PORT:-0}
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - ./.docker/postgres/:/var/lib/postgresql/data
  arena:
    image: mixmaxhq/arena
    ports:
      - 4567:${ARENA_PORT:-0}
    volumes:
      - ./arena-queues.json:/opt/arena/index.json
  swagger:
    image: swaggerapi/swagger-ui
    ports:
      - 8080:8080
    volumes:
      - ./packages/api/src/generated/openapi.json:/app/swagger.json
