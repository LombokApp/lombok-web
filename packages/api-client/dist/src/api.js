/* tslint:disable */
/* eslint-disable */
/**
 * @stellariscloud/api
 * The Stellaris Cloud core API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from './base';
export const FolderCreateSignedUrlInputDTOInnerMethodEnum = {
    Delete: 'DELETE',
    Put: 'PUT',
    Get: 'GET'
};
export const FolderDTOMetadataLocationProviderTypeEnum = {
    Server: 'SERVER',
    User: 'USER'
};
export const FolderGetResponsePermissionsEnum = {
    FolderRescan: 'FOLDER_RESCAN',
    FolderForget: 'FOLDER_FORGET',
    ObjectEdit: 'OBJECT_EDIT',
    ObjectManage: 'OBJECT_MANAGE'
};
export const FolderListResponseResultInnerPermissionsEnum = {
    FolderRescan: 'FOLDER_RESCAN',
    FolderForget: 'FOLDER_FORGET',
    ObjectEdit: 'OBJECT_EDIT',
    ObjectManage: 'OBJECT_MANAGE'
};
export const FolderObjectContentAttributesDTOMediaTypeEnum = {
    Image: 'IMAGE',
    Video: 'VIDEO',
    Audio: 'AUDIO',
    Document: 'DOCUMENT',
    Unknown: 'UNKNOWN'
};
export const FolderObjectDTOMediaTypeEnum = {
    Image: 'IMAGE',
    Video: 'VIDEO',
    Audio: 'AUDIO',
    Document: 'DOCUMENT',
    Unknown: 'UNKNOWN'
};
export const FolderObjectDTOContentAttributesValueMediaTypeEnum = {
    Image: 'IMAGE',
    Video: 'VIDEO',
    Audio: 'AUDIO',
    Document: 'DOCUMENT',
    Unknown: 'UNKNOWN'
};
export const FolderObjectListResponseResultInnerMediaTypeEnum = {
    Image: 'IMAGE',
    Video: 'VIDEO',
    Audio: 'AUDIO',
    Document: 'DOCUMENT',
    Unknown: 'UNKNOWN'
};
export const StorageProvisionDTOProvisionTypesEnum = {
    Content: 'CONTENT',
    Metadata: 'METADATA',
    Backup: 'BACKUP'
};
export const StorageProvisionGetResponseStorageProvisionProvisionTypesEnum = {
    Content: 'CONTENT',
    Metadata: 'METADATA',
    Backup: 'BACKUP'
};
export const StorageProvisionInputDTOProvisionTypesEnum = {
    Content: 'CONTENT',
    Metadata: 'METADATA',
    Backup: 'BACKUP'
};
export const StorageProvisionListResponseResultInnerProvisionTypesEnum = {
    Content: 'CONTENT',
    Metadata: 'METADATA',
    Backup: 'BACKUP'
};
/**
 * AccessKeysApi - axios parameter creator
 * @export
 */
export const AccessKeysApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} endpointDomain
         * @param {string} accessKeyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccessKey: async (endpointDomain, accessKeyId, options = {}) => {
            // verify required parameter 'endpointDomain' is not null or undefined
            assertParamExists('getAccessKey', 'endpointDomain', endpointDomain);
            // verify required parameter 'accessKeyId' is not null or undefined
            assertParamExists('getAccessKey', 'accessKeyId', accessKeyId);
            const localVarPath = `/api/v1/access-keys/{endpointDomain}/{accessKeyId}`
                .replace(`{${"endpointDomain"}}`, encodeURIComponent(String(endpointDomain)))
                .replace(`{${"accessKeyId"}}`, encodeURIComponent(String(accessKeyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} endpointDomain
         * @param {string} accessKeyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccessKeyBuckets: async (endpointDomain, accessKeyId, options = {}) => {
            // verify required parameter 'endpointDomain' is not null or undefined
            assertParamExists('listAccessKeyBuckets', 'endpointDomain', endpointDomain);
            // verify required parameter 'accessKeyId' is not null or undefined
            assertParamExists('listAccessKeyBuckets', 'accessKeyId', accessKeyId);
            const localVarPath = `/api/v1/access-keys/{endpointDomain}/{accessKeyId}/buckets`
                .replace(`{${"endpointDomain"}}`, encodeURIComponent(String(endpointDomain)))
                .replace(`{${"accessKeyId"}}`, encodeURIComponent(String(accessKeyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} [offset]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccessKeys: async (offset, limit, options = {}) => {
            const localVarPath = `/api/v1/access-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} endpointDomain
         * @param {string} accessKeyId
         * @param {RotateAccessKeyInputDTO} rotateAccessKeyInputDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rotateAccessKey: async (endpointDomain, accessKeyId, rotateAccessKeyInputDTO, options = {}) => {
            // verify required parameter 'endpointDomain' is not null or undefined
            assertParamExists('rotateAccessKey', 'endpointDomain', endpointDomain);
            // verify required parameter 'accessKeyId' is not null or undefined
            assertParamExists('rotateAccessKey', 'accessKeyId', accessKeyId);
            // verify required parameter 'rotateAccessKeyInputDTO' is not null or undefined
            assertParamExists('rotateAccessKey', 'rotateAccessKeyInputDTO', rotateAccessKeyInputDTO);
            const localVarPath = `/api/v1/access-keys/{endpointDomain}/{accessKeyId}`
                .replace(`{${"endpointDomain"}}`, encodeURIComponent(String(endpointDomain)))
                .replace(`{${"accessKeyId"}}`, encodeURIComponent(String(accessKeyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(rotateAccessKeyInputDTO, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AccessKeysApi - functional programming interface
 * @export
 */
export const AccessKeysApiFp = function (configuration) {
    const localVarAxiosParamCreator = AccessKeysApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {string} endpointDomain
         * @param {string} accessKeyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccessKey(endpointDomain, accessKeyId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccessKey(endpointDomain, accessKeyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} endpointDomain
         * @param {string} accessKeyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccessKeyBuckets(endpointDomain, accessKeyId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAccessKeyBuckets(endpointDomain, accessKeyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {number} [offset]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccessKeys(offset, limit, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAccessKeys(offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} endpointDomain
         * @param {string} accessKeyId
         * @param {RotateAccessKeyInputDTO} rotateAccessKeyInputDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rotateAccessKey(endpointDomain, accessKeyId, rotateAccessKeyInputDTO, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rotateAccessKey(endpointDomain, accessKeyId, rotateAccessKeyInputDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * AccessKeysApi - factory interface
 * @export
 */
export const AccessKeysApiFactory = function (configuration, basePath, axios) {
    const localVarFp = AccessKeysApiFp(configuration);
    return {
        /**
         *
         * @param {AccessKeysApiGetAccessKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccessKey(requestParameters, options) {
            return localVarFp.getAccessKey(requestParameters.endpointDomain, requestParameters.accessKeyId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {AccessKeysApiListAccessKeyBucketsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccessKeyBuckets(requestParameters, options) {
            return localVarFp.listAccessKeyBuckets(requestParameters.endpointDomain, requestParameters.accessKeyId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {AccessKeysApiListAccessKeysRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccessKeys(requestParameters = {}, options) {
            return localVarFp.listAccessKeys(requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {AccessKeysApiRotateAccessKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rotateAccessKey(requestParameters, options) {
            return localVarFp.rotateAccessKey(requestParameters.endpointDomain, requestParameters.accessKeyId, requestParameters.rotateAccessKeyInputDTO, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * AccessKeysApi - object-oriented interface
 * @export
 * @class AccessKeysApi
 * @extends {BaseAPI}
 */
export class AccessKeysApi extends BaseAPI {
    /**
     *
     * @param {AccessKeysApiGetAccessKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessKeysApi
     */
    getAccessKey(requestParameters, options) {
        return AccessKeysApiFp(this.configuration).getAccessKey(requestParameters.endpointDomain, requestParameters.accessKeyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {AccessKeysApiListAccessKeyBucketsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessKeysApi
     */
    listAccessKeyBuckets(requestParameters, options) {
        return AccessKeysApiFp(this.configuration).listAccessKeyBuckets(requestParameters.endpointDomain, requestParameters.accessKeyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {AccessKeysApiListAccessKeysRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessKeysApi
     */
    listAccessKeys(requestParameters = {}, options) {
        return AccessKeysApiFp(this.configuration).listAccessKeys(requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {AccessKeysApiRotateAccessKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessKeysApi
     */
    rotateAccessKey(requestParameters, options) {
        return AccessKeysApiFp(this.configuration).rotateAccessKey(requestParameters.endpointDomain, requestParameters.accessKeyId, requestParameters.rotateAccessKeyInputDTO, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * AppsApi - axios parameter creator
 * @export
 */
export const AppsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} appIdentifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApp: async (appIdentifier, options = {}) => {
            // verify required parameter 'appIdentifier' is not null or undefined
            assertParamExists('getApp', 'appIdentifier', appIdentifier);
            const localVarPath = `/api/v1/server/apps/{appIdentifier}`
                .replace(`{${"appIdentifier"}}`, encodeURIComponent(String(appIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApps: async (options = {}) => {
            const localVarPath = `/api/v1/server/apps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AppsApi - functional programming interface
 * @export
 */
export const AppsApiFp = function (configuration) {
    const localVarAxiosParamCreator = AppsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {string} appIdentifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApp(appIdentifier, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApp(appIdentifier, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApps(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listApps(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * AppsApi - factory interface
 * @export
 */
export const AppsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = AppsApiFp(configuration);
    return {
        /**
         *
         * @param {AppsApiGetAppRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApp(requestParameters, options) {
            return localVarFp.getApp(requestParameters.appIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApps(options) {
            return localVarFp.listApps(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * AppsApi - object-oriented interface
 * @export
 * @class AppsApi
 * @extends {BaseAPI}
 */
export class AppsApi extends BaseAPI {
    /**
     *
     * @param {AppsApiGetAppRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApi
     */
    getApp(requestParameters, options) {
        return AppsApiFp(this.configuration).getApp(requestParameters.appIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApi
     */
    listApps(options) {
        return AppsApiFp(this.configuration).listApps(options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {LoginCredentialsDTO} loginCredentialsDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginCredentialsDTO, options = {}) => {
            // verify required parameter 'loginCredentialsDTO' is not null or undefined
            assertParamExists('login', 'loginCredentialsDTO', loginCredentialsDTO);
            const localVarPath = `/api/v1/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(loginCredentialsDTO, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options = {}) => {
            const localVarPath = `/api/v1/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} refreshToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken: async (refreshToken, options = {}) => {
            // verify required parameter 'refreshToken' is not null or undefined
            assertParamExists('refreshToken', 'refreshToken', refreshToken);
            const localVarPath = `/api/v1/auth/{refreshToken}`
                .replace(`{${"refreshToken"}}`, encodeURIComponent(String(refreshToken)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {SignupCredentialsDTO} signupCredentialsDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup: async (signupCredentialsDTO, options = {}) => {
            // verify required parameter 'signupCredentialsDTO' is not null or undefined
            assertParamExists('signup', 'signupCredentialsDTO', signupCredentialsDTO);
            const localVarPath = `/api/v1/auth/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(signupCredentialsDTO, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {LoginCredentialsDTO} loginCredentialsDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginCredentialsDTO, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginCredentialsDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} refreshToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshToken(refreshToken, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(refreshToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {SignupCredentialsDTO} signupCredentialsDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signup(signupCredentialsDTO, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signup(signupCredentialsDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration, basePath, axios) {
    const localVarFp = AuthApiFp(configuration);
    return {
        /**
         *
         * @param {AuthApiLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(requestParameters, options) {
            return localVarFp.login(requestParameters.loginCredentialsDTO, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options) {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {AuthApiRefreshTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(requestParameters, options) {
            return localVarFp.refreshToken(requestParameters.refreshToken, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {AuthApiSignupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup(requestParameters, options) {
            return localVarFp.signup(requestParameters.signupCredentialsDTO, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     *
     * @param {AuthApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    login(requestParameters, options) {
        return AuthApiFp(this.configuration).login(requestParameters.loginCredentialsDTO, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    logout(options) {
        return AuthApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {AuthApiRefreshTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    refreshToken(requestParameters, options) {
        return AuthApiFp(this.configuration).refreshToken(requestParameters.refreshToken, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {AuthApiSignupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    signup(requestParameters, options) {
        return AuthApiFp(this.configuration).signup(requestParameters.signupCredentialsDTO, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * FoldersApi - axios parameter creator
 * @export
 */
export const FoldersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {FolderCreateInputDTO} folderCreateInputDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFolder: async (folderCreateInputDTO, options = {}) => {
            // verify required parameter 'folderCreateInputDTO' is not null or undefined
            assertParamExists('createFolder', 'folderCreateInputDTO', folderCreateInputDTO);
            const localVarPath = `/api/v1/folders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(folderCreateInputDTO, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} folderId
         * @param {Array<FolderCreateSignedUrlInputDTOInner>} folderCreateSignedUrlInputDTOInner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPresignedUrls: async (folderId, folderCreateSignedUrlInputDTOInner, options = {}) => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('createPresignedUrls', 'folderId', folderId);
            // verify required parameter 'folderCreateSignedUrlInputDTOInner' is not null or undefined
            assertParamExists('createPresignedUrls', 'folderCreateSignedUrlInputDTOInner', folderCreateSignedUrlInputDTOInner);
            const localVarPath = `/api/v1/folders/{folderId}/presigned-urls`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(folderCreateSignedUrlInputDTOInner, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} folderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFolder: async (folderId, options = {}) => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('deleteFolder', 'folderId', folderId);
            const localVarPath = `/api/v1/folders/{folderId}`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} folderId
         * @param {string} objectKey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFolderObject: async (folderId, objectKey, options = {}) => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('deleteFolderObject', 'folderId', folderId);
            // verify required parameter 'objectKey' is not null or undefined
            assertParamExists('deleteFolderObject', 'objectKey', objectKey);
            const localVarPath = `/api/v1/folders/{folderId}/objects/{objectKey}`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)))
                .replace(`{${"objectKey"}}`, encodeURIComponent(String(objectKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} folderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolder: async (folderId, options = {}) => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('getFolder', 'folderId', folderId);
            const localVarPath = `/api/v1/folders/{folderId}`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} folderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderMetadata: async (folderId, options = {}) => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('getFolderMetadata', 'folderId', folderId);
            const localVarPath = `/api/v1/folders/{folderId}/metadata`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} folderId
         * @param {string} objectKey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderObject: async (folderId, objectKey, options = {}) => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('getFolderObject', 'folderId', folderId);
            // verify required parameter 'objectKey' is not null or undefined
            assertParamExists('getFolderObject', 'objectKey', objectKey);
            const localVarPath = `/api/v1/folders/{folderId}/objects/{objectKey}`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)))
                .replace(`{${"objectKey"}}`, encodeURIComponent(String(objectKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} folderId
         * @param {string} appIdentifier
         * @param {string} actionKey
         * @param {FolderHandleActionInputDTO} folderHandleActionInputDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleFolderAction: async (folderId, appIdentifier, actionKey, folderHandleActionInputDTO, options = {}) => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('handleFolderAction', 'folderId', folderId);
            // verify required parameter 'appIdentifier' is not null or undefined
            assertParamExists('handleFolderAction', 'appIdentifier', appIdentifier);
            // verify required parameter 'actionKey' is not null or undefined
            assertParamExists('handleFolderAction', 'actionKey', actionKey);
            // verify required parameter 'folderHandleActionInputDTO' is not null or undefined
            assertParamExists('handleFolderAction', 'folderHandleActionInputDTO', folderHandleActionInputDTO);
            const localVarPath = `/api/v1/folders/{folderId}/apps/{appIdentifier}/actions/{actionKey}`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)))
                .replace(`{${"appIdentifier"}}`, encodeURIComponent(String(appIdentifier)))
                .replace(`{${"actionKey"}}`, encodeURIComponent(String(actionKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(folderHandleActionInputDTO, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} folderId
         * @param {number} [offset]
         * @param {number} [limit]
         * @param {string} [search]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFolderObjects: async (folderId, offset, limit, search, options = {}) => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('listFolderObjects', 'folderId', folderId);
            const localVarPath = `/api/v1/folders/{folderId}/objects`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} [offset]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFolders: async (offset, limit, options = {}) => {
            const localVarPath = `/api/v1/folders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} folderId
         * @param {string} objectKey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshFolderObjectS3Metadata: async (folderId, objectKey, options = {}) => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('refreshFolderObjectS3Metadata', 'folderId', folderId);
            // verify required parameter 'objectKey' is not null or undefined
            assertParamExists('refreshFolderObjectS3Metadata', 'objectKey', objectKey);
            const localVarPath = `/api/v1/folders/{folderId}/objects/{objectKey}`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)))
                .replace(`{${"objectKey"}}`, encodeURIComponent(String(objectKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} folderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rescanFolder: async (folderId, options = {}) => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('rescanFolder', 'folderId', folderId);
            const localVarPath = `/api/v1/folders/{folderId}/rescan`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * FoldersApi - functional programming interface
 * @export
 */
export const FoldersApiFp = function (configuration) {
    const localVarAxiosParamCreator = FoldersApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {FolderCreateInputDTO} folderCreateInputDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFolder(folderCreateInputDTO, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFolder(folderCreateInputDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} folderId
         * @param {Array<FolderCreateSignedUrlInputDTOInner>} folderCreateSignedUrlInputDTOInner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPresignedUrls(folderId, folderCreateSignedUrlInputDTOInner, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPresignedUrls(folderId, folderCreateSignedUrlInputDTOInner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} folderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFolder(folderId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFolder(folderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} folderId
         * @param {string} objectKey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFolderObject(folderId, objectKey, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFolderObject(folderId, objectKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} folderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFolder(folderId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFolder(folderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} folderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFolderMetadata(folderId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFolderMetadata(folderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} folderId
         * @param {string} objectKey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFolderObject(folderId, objectKey, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFolderObject(folderId, objectKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} folderId
         * @param {string} appIdentifier
         * @param {string} actionKey
         * @param {FolderHandleActionInputDTO} folderHandleActionInputDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleFolderAction(folderId, appIdentifier, actionKey, folderHandleActionInputDTO, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.handleFolderAction(folderId, appIdentifier, actionKey, folderHandleActionInputDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} folderId
         * @param {number} [offset]
         * @param {number} [limit]
         * @param {string} [search]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFolderObjects(folderId, offset, limit, search, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFolderObjects(folderId, offset, limit, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {number} [offset]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFolders(offset, limit, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFolders(offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} folderId
         * @param {string} objectKey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshFolderObjectS3Metadata(folderId, objectKey, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshFolderObjectS3Metadata(folderId, objectKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} folderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rescanFolder(folderId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rescanFolder(folderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * FoldersApi - factory interface
 * @export
 */
export const FoldersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = FoldersApiFp(configuration);
    return {
        /**
         *
         * @param {FoldersApiCreateFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFolder(requestParameters, options) {
            return localVarFp.createFolder(requestParameters.folderCreateInputDTO, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {FoldersApiCreatePresignedUrlsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPresignedUrls(requestParameters, options) {
            return localVarFp.createPresignedUrls(requestParameters.folderId, requestParameters.folderCreateSignedUrlInputDTOInner, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {FoldersApiDeleteFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFolder(requestParameters, options) {
            return localVarFp.deleteFolder(requestParameters.folderId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {FoldersApiDeleteFolderObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFolderObject(requestParameters, options) {
            return localVarFp.deleteFolderObject(requestParameters.folderId, requestParameters.objectKey, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {FoldersApiGetFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolder(requestParameters, options) {
            return localVarFp.getFolder(requestParameters.folderId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {FoldersApiGetFolderMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderMetadata(requestParameters, options) {
            return localVarFp.getFolderMetadata(requestParameters.folderId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {FoldersApiGetFolderObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderObject(requestParameters, options) {
            return localVarFp.getFolderObject(requestParameters.folderId, requestParameters.objectKey, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {FoldersApiHandleFolderActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleFolderAction(requestParameters, options) {
            return localVarFp.handleFolderAction(requestParameters.folderId, requestParameters.appIdentifier, requestParameters.actionKey, requestParameters.folderHandleActionInputDTO, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {FoldersApiListFolderObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFolderObjects(requestParameters, options) {
            return localVarFp.listFolderObjects(requestParameters.folderId, requestParameters.offset, requestParameters.limit, requestParameters.search, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {FoldersApiListFoldersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFolders(requestParameters = {}, options) {
            return localVarFp.listFolders(requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {FoldersApiRefreshFolderObjectS3MetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshFolderObjectS3Metadata(requestParameters, options) {
            return localVarFp.refreshFolderObjectS3Metadata(requestParameters.folderId, requestParameters.objectKey, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {FoldersApiRescanFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rescanFolder(requestParameters, options) {
            return localVarFp.rescanFolder(requestParameters.folderId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * FoldersApi - object-oriented interface
 * @export
 * @class FoldersApi
 * @extends {BaseAPI}
 */
export class FoldersApi extends BaseAPI {
    /**
     *
     * @param {FoldersApiCreateFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    createFolder(requestParameters, options) {
        return FoldersApiFp(this.configuration).createFolder(requestParameters.folderCreateInputDTO, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {FoldersApiCreatePresignedUrlsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    createPresignedUrls(requestParameters, options) {
        return FoldersApiFp(this.configuration).createPresignedUrls(requestParameters.folderId, requestParameters.folderCreateSignedUrlInputDTOInner, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {FoldersApiDeleteFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    deleteFolder(requestParameters, options) {
        return FoldersApiFp(this.configuration).deleteFolder(requestParameters.folderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {FoldersApiDeleteFolderObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    deleteFolderObject(requestParameters, options) {
        return FoldersApiFp(this.configuration).deleteFolderObject(requestParameters.folderId, requestParameters.objectKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {FoldersApiGetFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    getFolder(requestParameters, options) {
        return FoldersApiFp(this.configuration).getFolder(requestParameters.folderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {FoldersApiGetFolderMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    getFolderMetadata(requestParameters, options) {
        return FoldersApiFp(this.configuration).getFolderMetadata(requestParameters.folderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {FoldersApiGetFolderObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    getFolderObject(requestParameters, options) {
        return FoldersApiFp(this.configuration).getFolderObject(requestParameters.folderId, requestParameters.objectKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {FoldersApiHandleFolderActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    handleFolderAction(requestParameters, options) {
        return FoldersApiFp(this.configuration).handleFolderAction(requestParameters.folderId, requestParameters.appIdentifier, requestParameters.actionKey, requestParameters.folderHandleActionInputDTO, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {FoldersApiListFolderObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    listFolderObjects(requestParameters, options) {
        return FoldersApiFp(this.configuration).listFolderObjects(requestParameters.folderId, requestParameters.offset, requestParameters.limit, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {FoldersApiListFoldersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    listFolders(requestParameters = {}, options) {
        return FoldersApiFp(this.configuration).listFolders(requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {FoldersApiRefreshFolderObjectS3MetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    refreshFolderObjectS3Metadata(requestParameters, options) {
        return FoldersApiFp(this.configuration).refreshFolderObjectS3Metadata(requestParameters.folderId, requestParameters.objectKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {FoldersApiRescanFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    rescanFolder(requestParameters, options) {
        return FoldersApiFp(this.configuration).rescanFolder(requestParameters.folderId, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * ServerApi - axios parameter creator
 * @export
 */
export const ServerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServerSettings: async (options = {}) => {
            const localVarPath = `/api/v1/server/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} settingKey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetServerSetting: async (settingKey, options = {}) => {
            // verify required parameter 'settingKey' is not null or undefined
            assertParamExists('resetServerSetting', 'settingKey', settingKey);
            const localVarPath = `/api/v1/server/settings/{settingKey}`
                .replace(`{${"settingKey"}}`, encodeURIComponent(String(settingKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} settingKey
         * @param {SetSettingInputDTO} setSettingInputDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setServerSetting: async (settingKey, setSettingInputDTO, options = {}) => {
            // verify required parameter 'settingKey' is not null or undefined
            assertParamExists('setServerSetting', 'settingKey', settingKey);
            // verify required parameter 'setSettingInputDTO' is not null or undefined
            assertParamExists('setServerSetting', 'setSettingInputDTO', setSettingInputDTO);
            const localVarPath = `/api/v1/server/settings/{settingKey}`
                .replace(`{${"settingKey"}}`, encodeURIComponent(String(settingKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(setSettingInputDTO, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ServerApi - functional programming interface
 * @export
 */
export const ServerApiFp = function (configuration) {
    const localVarAxiosParamCreator = ServerApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServerSettings(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServerSettings(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} settingKey
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetServerSetting(settingKey, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetServerSetting(settingKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} settingKey
         * @param {SetSettingInputDTO} setSettingInputDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setServerSetting(settingKey, setSettingInputDTO, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setServerSetting(settingKey, setSettingInputDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * ServerApi - factory interface
 * @export
 */
export const ServerApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ServerApiFp(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServerSettings(options) {
            return localVarFp.getServerSettings(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ServerApiResetServerSettingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetServerSetting(requestParameters, options) {
            return localVarFp.resetServerSetting(requestParameters.settingKey, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ServerApiSetServerSettingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setServerSetting(requestParameters, options) {
            return localVarFp.setServerSetting(requestParameters.settingKey, requestParameters.setSettingInputDTO, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ServerApi - object-oriented interface
 * @export
 * @class ServerApi
 * @extends {BaseAPI}
 */
export class ServerApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    getServerSettings(options) {
        return ServerApiFp(this.configuration).getServerSettings(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {ServerApiResetServerSettingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    resetServerSetting(requestParameters, options) {
        return ServerApiFp(this.configuration).resetServerSetting(requestParameters.settingKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {ServerApiSetServerSettingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    setServerSetting(requestParameters, options) {
        return ServerApiFp(this.configuration).setServerSetting(requestParameters.settingKey, requestParameters.setSettingInputDTO, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * ServerAccessKeysApi - axios parameter creator
 * @export
 */
export const ServerAccessKeysApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} endpointDomain
         * @param {string} accessKeyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServerAccessKey: async (endpointDomain, accessKeyId, options = {}) => {
            // verify required parameter 'endpointDomain' is not null or undefined
            assertParamExists('getServerAccessKey', 'endpointDomain', endpointDomain);
            // verify required parameter 'accessKeyId' is not null or undefined
            assertParamExists('getServerAccessKey', 'accessKeyId', accessKeyId);
            const localVarPath = `/api/v1/server/access-keys/{endpointDomain}/{accessKeyId}`
                .replace(`{${"endpointDomain"}}`, encodeURIComponent(String(endpointDomain)))
                .replace(`{${"accessKeyId"}}`, encodeURIComponent(String(accessKeyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} [offset]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServerAccessKeys: async (offset, limit, options = {}) => {
            const localVarPath = `/api/v1/server/access-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} endpointDomain
         * @param {string} accessKeyId
         * @param {RotateAccessKeyInputDTO} rotateAccessKeyInputDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rotateAccessKey: async (endpointDomain, accessKeyId, rotateAccessKeyInputDTO, options = {}) => {
            // verify required parameter 'endpointDomain' is not null or undefined
            assertParamExists('rotateAccessKey', 'endpointDomain', endpointDomain);
            // verify required parameter 'accessKeyId' is not null or undefined
            assertParamExists('rotateAccessKey', 'accessKeyId', accessKeyId);
            // verify required parameter 'rotateAccessKeyInputDTO' is not null or undefined
            assertParamExists('rotateAccessKey', 'rotateAccessKeyInputDTO', rotateAccessKeyInputDTO);
            const localVarPath = `/api/v1/server/access-keys/{endpointDomain}/{accessKeyId}`
                .replace(`{${"endpointDomain"}}`, encodeURIComponent(String(endpointDomain)))
                .replace(`{${"accessKeyId"}}`, encodeURIComponent(String(accessKeyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(rotateAccessKeyInputDTO, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ServerAccessKeysApi - functional programming interface
 * @export
 */
export const ServerAccessKeysApiFp = function (configuration) {
    const localVarAxiosParamCreator = ServerAccessKeysApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {string} endpointDomain
         * @param {string} accessKeyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServerAccessKey(endpointDomain, accessKeyId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServerAccessKey(endpointDomain, accessKeyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {number} [offset]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listServerAccessKeys(offset, limit, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listServerAccessKeys(offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} endpointDomain
         * @param {string} accessKeyId
         * @param {RotateAccessKeyInputDTO} rotateAccessKeyInputDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rotateAccessKey(endpointDomain, accessKeyId, rotateAccessKeyInputDTO, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rotateAccessKey(endpointDomain, accessKeyId, rotateAccessKeyInputDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * ServerAccessKeysApi - factory interface
 * @export
 */
export const ServerAccessKeysApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ServerAccessKeysApiFp(configuration);
    return {
        /**
         *
         * @param {ServerAccessKeysApiGetServerAccessKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServerAccessKey(requestParameters, options) {
            return localVarFp.getServerAccessKey(requestParameters.endpointDomain, requestParameters.accessKeyId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ServerAccessKeysApiListServerAccessKeysRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServerAccessKeys(requestParameters = {}, options) {
            return localVarFp.listServerAccessKeys(requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ServerAccessKeysApiRotateAccessKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rotateAccessKey(requestParameters, options) {
            return localVarFp.rotateAccessKey(requestParameters.endpointDomain, requestParameters.accessKeyId, requestParameters.rotateAccessKeyInputDTO, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ServerAccessKeysApi - object-oriented interface
 * @export
 * @class ServerAccessKeysApi
 * @extends {BaseAPI}
 */
export class ServerAccessKeysApi extends BaseAPI {
    /**
     *
     * @param {ServerAccessKeysApiGetServerAccessKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerAccessKeysApi
     */
    getServerAccessKey(requestParameters, options) {
        return ServerAccessKeysApiFp(this.configuration).getServerAccessKey(requestParameters.endpointDomain, requestParameters.accessKeyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {ServerAccessKeysApiListServerAccessKeysRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerAccessKeysApi
     */
    listServerAccessKeys(requestParameters = {}, options) {
        return ServerAccessKeysApiFp(this.configuration).listServerAccessKeys(requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {ServerAccessKeysApiRotateAccessKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerAccessKeysApi
     */
    rotateAccessKey(requestParameters, options) {
        return ServerAccessKeysApiFp(this.configuration).rotateAccessKey(requestParameters.endpointDomain, requestParameters.accessKeyId, requestParameters.rotateAccessKeyInputDTO, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * ServerEventsApi - axios parameter creator
 * @export
 */
export const ServerEventsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} eventId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvent: async (eventId, options = {}) => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('getEvent', 'eventId', eventId);
            const localVarPath = `/api/v1/server/events/{eventId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} [offset]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvents: async (offset, limit, options = {}) => {
            const localVarPath = `/api/v1/server/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ServerEventsApi - functional programming interface
 * @export
 */
export const ServerEventsApiFp = function (configuration) {
    const localVarAxiosParamCreator = ServerEventsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {string} eventId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEvent(eventId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEvent(eventId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {number} [offset]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEvents(offset, limit, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEvents(offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * ServerEventsApi - factory interface
 * @export
 */
export const ServerEventsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ServerEventsApiFp(configuration);
    return {
        /**
         *
         * @param {ServerEventsApiGetEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvent(requestParameters, options) {
            return localVarFp.getEvent(requestParameters.eventId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ServerEventsApiListEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvents(requestParameters = {}, options) {
            return localVarFp.listEvents(requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ServerEventsApi - object-oriented interface
 * @export
 * @class ServerEventsApi
 * @extends {BaseAPI}
 */
export class ServerEventsApi extends BaseAPI {
    /**
     *
     * @param {ServerEventsApiGetEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerEventsApi
     */
    getEvent(requestParameters, options) {
        return ServerEventsApiFp(this.configuration).getEvent(requestParameters.eventId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {ServerEventsApiListEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerEventsApi
     */
    listEvents(requestParameters = {}, options) {
        return ServerEventsApiFp(this.configuration).listEvents(requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * StorageProvisionsApi - axios parameter creator
 * @export
 */
export const StorageProvisionsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {StorageProvisionInputDTO} storageProvisionInputDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServerProvision: async (storageProvisionInputDTO, options = {}) => {
            // verify required parameter 'storageProvisionInputDTO' is not null or undefined
            assertParamExists('createServerProvision', 'storageProvisionInputDTO', storageProvisionInputDTO);
            const localVarPath = `/api/v1/server/storage-provisions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(storageProvisionInputDTO, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} storageProvisionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStorageProvision: async (storageProvisionId, options = {}) => {
            // verify required parameter 'storageProvisionId' is not null or undefined
            assertParamExists('deleteStorageProvision', 'storageProvisionId', storageProvisionId);
            const localVarPath = `/api/v1/server/storage-provisions/{storageProvisionId}`
                .replace(`{${"storageProvisionId"}}`, encodeURIComponent(String(storageProvisionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} storageProvisionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStorageProvision: async (storageProvisionId, options = {}) => {
            // verify required parameter 'storageProvisionId' is not null or undefined
            assertParamExists('getStorageProvision', 'storageProvisionId', storageProvisionId);
            const localVarPath = `/api/v1/server/storage-provisions/{storageProvisionId}`
                .replace(`{${"storageProvisionId"}}`, encodeURIComponent(String(storageProvisionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ListStorageProvisionsProvisionTypeEnum} [provisionType]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStorageProvisions: async (provisionType, options = {}) => {
            const localVarPath = `/api/v1/server/storage-provisions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (provisionType !== undefined) {
                localVarQueryParameter['provisionType'] = provisionType;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} storageProvisionId
         * @param {StorageProvisionInputDTO} storageProvisionInputDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStorageProvision: async (storageProvisionId, storageProvisionInputDTO, options = {}) => {
            // verify required parameter 'storageProvisionId' is not null or undefined
            assertParamExists('updateStorageProvision', 'storageProvisionId', storageProvisionId);
            // verify required parameter 'storageProvisionInputDTO' is not null or undefined
            assertParamExists('updateStorageProvision', 'storageProvisionInputDTO', storageProvisionInputDTO);
            const localVarPath = `/api/v1/server/storage-provisions/{storageProvisionId}`
                .replace(`{${"storageProvisionId"}}`, encodeURIComponent(String(storageProvisionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(storageProvisionInputDTO, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * StorageProvisionsApi - functional programming interface
 * @export
 */
export const StorageProvisionsApiFp = function (configuration) {
    const localVarAxiosParamCreator = StorageProvisionsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {StorageProvisionInputDTO} storageProvisionInputDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createServerProvision(storageProvisionInputDTO, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createServerProvision(storageProvisionInputDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} storageProvisionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStorageProvision(storageProvisionId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStorageProvision(storageProvisionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} storageProvisionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStorageProvision(storageProvisionId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStorageProvision(storageProvisionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {ListStorageProvisionsProvisionTypeEnum} [provisionType]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listStorageProvisions(provisionType, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listStorageProvisions(provisionType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} storageProvisionId
         * @param {StorageProvisionInputDTO} storageProvisionInputDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStorageProvision(storageProvisionId, storageProvisionInputDTO, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStorageProvision(storageProvisionId, storageProvisionInputDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * StorageProvisionsApi - factory interface
 * @export
 */
export const StorageProvisionsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = StorageProvisionsApiFp(configuration);
    return {
        /**
         *
         * @param {StorageProvisionsApiCreateServerProvisionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServerProvision(requestParameters, options) {
            return localVarFp.createServerProvision(requestParameters.storageProvisionInputDTO, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {StorageProvisionsApiDeleteStorageProvisionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStorageProvision(requestParameters, options) {
            return localVarFp.deleteStorageProvision(requestParameters.storageProvisionId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {StorageProvisionsApiGetStorageProvisionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStorageProvision(requestParameters, options) {
            return localVarFp.getStorageProvision(requestParameters.storageProvisionId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {StorageProvisionsApiListStorageProvisionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStorageProvisions(requestParameters = {}, options) {
            return localVarFp.listStorageProvisions(requestParameters.provisionType, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {StorageProvisionsApiUpdateStorageProvisionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStorageProvision(requestParameters, options) {
            return localVarFp.updateStorageProvision(requestParameters.storageProvisionId, requestParameters.storageProvisionInputDTO, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * StorageProvisionsApi - object-oriented interface
 * @export
 * @class StorageProvisionsApi
 * @extends {BaseAPI}
 */
export class StorageProvisionsApi extends BaseAPI {
    /**
     *
     * @param {StorageProvisionsApiCreateServerProvisionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageProvisionsApi
     */
    createServerProvision(requestParameters, options) {
        return StorageProvisionsApiFp(this.configuration).createServerProvision(requestParameters.storageProvisionInputDTO, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {StorageProvisionsApiDeleteStorageProvisionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageProvisionsApi
     */
    deleteStorageProvision(requestParameters, options) {
        return StorageProvisionsApiFp(this.configuration).deleteStorageProvision(requestParameters.storageProvisionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {StorageProvisionsApiGetStorageProvisionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageProvisionsApi
     */
    getStorageProvision(requestParameters, options) {
        return StorageProvisionsApiFp(this.configuration).getStorageProvision(requestParameters.storageProvisionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {StorageProvisionsApiListStorageProvisionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageProvisionsApi
     */
    listStorageProvisions(requestParameters = {}, options) {
        return StorageProvisionsApiFp(this.configuration).listStorageProvisions(requestParameters.provisionType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {StorageProvisionsApiUpdateStorageProvisionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageProvisionsApi
     */
    updateStorageProvision(requestParameters, options) {
        return StorageProvisionsApiFp(this.configuration).updateStorageProvision(requestParameters.storageProvisionId, requestParameters.storageProvisionInputDTO, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * @export
 */
export const ListStorageProvisionsProvisionTypeEnum = {
    Content: 'CONTENT',
    Metadata: 'METADATA',
    Backup: 'BACKUP'
};
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {UserCreateInputDTO} userCreateInputDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (userCreateInputDTO, options = {}) => {
            // verify required parameter 'userCreateInputDTO' is not null or undefined
            assertParamExists('createUser', 'userCreateInputDTO', userCreateInputDTO);
            const localVarPath = `/api/v1/server/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(userCreateInputDTO, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (userId, options = {}) => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUser', 'userId', userId);
            const localVarPath = `/api/v1/server/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (userId, options = {}) => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUser', 'userId', userId);
            const localVarPath = `/api/v1/server/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} [offset]
         * @param {number} [limit]
         * @param {boolean} [isAdmin]
         * @param {ListUsersSortEnum} [sort]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: async (offset, limit, isAdmin, sort, options = {}) => {
            const localVarPath = `/api/v1/server/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (isAdmin !== undefined) {
                localVarQueryParameter['isAdmin'] = isAdmin;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} userId
         * @param {UserUpdateInputDTO} userUpdateInputDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (userId, userUpdateInputDTO, options = {}) => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUser', 'userId', userId);
            // verify required parameter 'userUpdateInputDTO' is not null or undefined
            assertParamExists('updateUser', 'userUpdateInputDTO', userUpdateInputDTO);
            const localVarPath = `/api/v1/server/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdateInputDTO, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {UserCreateInputDTO} userCreateInputDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(userCreateInputDTO, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(userCreateInputDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(userId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(userId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {number} [offset]
         * @param {number} [limit]
         * @param {boolean} [isAdmin]
         * @param {ListUsersSortEnum} [sort]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsers(offset, limit, isAdmin, sort, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(offset, limit, isAdmin, sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} userId
         * @param {UserUpdateInputDTO} userUpdateInputDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(userId, userUpdateInputDTO, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(userId, userUpdateInputDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = UsersApiFp(configuration);
    return {
        /**
         *
         * @param {UsersApiCreateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(requestParameters, options) {
            return localVarFp.createUser(requestParameters.userCreateInputDTO, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {UsersApiDeleteUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(requestParameters, options) {
            return localVarFp.deleteUser(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {UsersApiGetUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(requestParameters, options) {
            return localVarFp.getUser(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {UsersApiListUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(requestParameters = {}, options) {
            return localVarFp.listUsers(requestParameters.offset, requestParameters.limit, requestParameters.isAdmin, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {UsersApiUpdateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(requestParameters, options) {
            return localVarFp.updateUser(requestParameters.userId, requestParameters.userUpdateInputDTO, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     *
     * @param {UsersApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createUser(requestParameters, options) {
        return UsersApiFp(this.configuration).createUser(requestParameters.userCreateInputDTO, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {UsersApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    deleteUser(requestParameters, options) {
        return UsersApiFp(this.configuration).deleteUser(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {UsersApiGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUser(requestParameters, options) {
        return UsersApiFp(this.configuration).getUser(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {UsersApiListUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUsers(requestParameters = {}, options) {
        return UsersApiFp(this.configuration).listUsers(requestParameters.offset, requestParameters.limit, requestParameters.isAdmin, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {UsersApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUser(requestParameters, options) {
        return UsersApiFp(this.configuration).updateUser(requestParameters.userId, requestParameters.userUpdateInputDTO, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * @export
 */
export const ListUsersSortEnum = {
    CreatedAtAsc: 'createdAt-asc',
    CreatedAtDesc: 'createdAt-desc',
    EmailAsc: 'email-asc',
    EmailDesc: 'email-desc',
    NameAsc: 'name-asc',
    NameDesc: 'name-desc',
    RoleAsc: 'role-asc',
    RoleDesc: 'role-desc',
    StatusAsc: 'status-asc',
    StatusDesc: 'status-desc',
    UpdatedAtAsc: 'updatedAt-asc',
    UpdatedAtDesc: 'updatedAt-desc'
};
/**
 * ViewerApi - axios parameter creator
 * @export
 */
export const ViewerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getViewer: async (options = {}) => {
            const localVarPath = `/api/v1/viewer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {UpdateViewerInputDTO} updateViewerInputDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateViewer: async (updateViewerInputDTO, options = {}) => {
            // verify required parameter 'updateViewerInputDTO' is not null or undefined
            assertParamExists('updateViewer', 'updateViewerInputDTO', updateViewerInputDTO);
            const localVarPath = `/api/v1/viewer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(updateViewerInputDTO, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ViewerApi - functional programming interface
 * @export
 */
export const ViewerApiFp = function (configuration) {
    const localVarAxiosParamCreator = ViewerApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getViewer(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getViewer(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {UpdateViewerInputDTO} updateViewerInputDTO
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateViewer(updateViewerInputDTO, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateViewer(updateViewerInputDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * ViewerApi - factory interface
 * @export
 */
export const ViewerApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ViewerApiFp(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getViewer(options) {
            return localVarFp.getViewer(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ViewerApiUpdateViewerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateViewer(requestParameters, options) {
            return localVarFp.updateViewer(requestParameters.updateViewerInputDTO, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ViewerApi - object-oriented interface
 * @export
 * @class ViewerApi
 * @extends {BaseAPI}
 */
export class ViewerApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewerApi
     */
    getViewer(options) {
        return ViewerApiFp(this.configuration).getViewer(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {ViewerApiUpdateViewerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewerApi
     */
    updateViewer(requestParameters, options) {
        return ViewerApiFp(this.configuration).updateViewer(requestParameters.updateViewerInputDTO, options).then((request) => request(this.axios, this.basePath));
    }
}
