/**
 * @stellariscloud/api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface ContentAttributesType
 */
export interface ContentAttributesType {
    /**
     *
     * @type {MediaType}
     * @memberof ContentAttributesType
     */
    'mediaType': MediaType;
    /**
     *
     * @type {string}
     * @memberof ContentAttributesType
     */
    'mimeType': string;
    /**
     *
     * @type {number}
     * @memberof ContentAttributesType
     */
    'height': number;
    /**
     *
     * @type {number}
     * @memberof ContentAttributesType
     */
    'width': number;
    /**
     *
     * @type {number}
     * @memberof ContentAttributesType
     */
    'orientation': number;
    /**
     *
     * @type {number}
     * @memberof ContentAttributesType
     */
    'lengthMs': number;
    /**
     *
     * @type {number}
     * @memberof ContentAttributesType
     */
    'bitrate': number;
}
/**
 *
 * @export
 * @interface CreateFolder200Response
 */
export interface CreateFolder200Response {
    /**
     *
     * @type {FolderData}
     * @memberof CreateFolder200Response
     */
    'folder': FolderData;
}
/**
 *
 * @export
 * @interface CreateFolderRequest
 */
export interface CreateFolderRequest {
    /**
     *
     * @type {UserLocationInputData}
     * @memberof CreateFolderRequest
     */
    'metadataLocation'?: UserLocationInputData;
    /**
     *
     * @type {UserLocationInputData}
     * @memberof CreateFolderRequest
     */
    'contentLocation': UserLocationInputData;
    /**
     *
     * @type {string}
     * @memberof CreateFolderRequest
     */
    'name': string;
}
/**
 *
 * @export
 * @interface CreateUserData
 */
export interface CreateUserData {
    /**
     *
     * @type {boolean}
     * @memberof CreateUserData
     */
    'isAdmin'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof CreateUserData
     */
    'emailVerified'?: boolean;
    /**
     *
     * @type {string}
     * @memberof CreateUserData
     */
    'password': string;
    /**
     *
     * @type {string}
     * @memberof CreateUserData
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateUserData
     */
    'email'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof CreateUserData
     */
    'permissions'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof CreateUserData
     */
    'username': string;
}
/**
 *
 * @export
 * @interface DeleteFolder200Response
 */
export interface DeleteFolder200Response {
    /**
     *
     * @type {boolean}
     * @memberof DeleteFolder200Response
     */
    'success': boolean;
}
/**
 *
 * @export
 * @interface ErrorData
 */
export interface ErrorData {
    /**
     *
     * @type {string}
     * @memberof ErrorData
     */
    'code': string;
    /**
     *
     * @type {string}
     * @memberof ErrorData
     */
    'title'?: string;
    /**
     *
     * @type {string}
     * @memberof ErrorData
     */
    'detail'?: string;
    /**
     *
     * @type {{ [key: string]: any | undefined; }}
     * @memberof ErrorData
     */
    'meta'?: {
        [key: string]: any | undefined;
    };
    /**
     *
     * @type {string}
     * @memberof ErrorData
     */
    'pointer'?: string;
}
/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     *
     * @type {Array<ErrorData>}
     * @memberof ErrorResponse
     */
    'errors': Array<ErrorData>;
}
/**
 *
 * @export
 * @interface FolderAndPermission
 */
export interface FolderAndPermission {
    /**
     *
     * @type {FolderData}
     * @memberof FolderAndPermission
     */
    'folder': FolderData;
    /**
     *
     * @type {Array<string>}
     * @memberof FolderAndPermission
     */
    'permissions': Array<string>;
}
/**
 *
 * @export
 * @interface FolderData
 */
export interface FolderData {
    /**
     *
     * @type {string}
     * @memberof FolderData
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof FolderData
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof FolderData
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof FolderData
     */
    'ownerId'?: string;
    /**
     *
     * @type {string}
     * @memberof FolderData
     */
    'name': string;
    /**
     *
     * @type {StorageLocationData}
     * @memberof FolderData
     */
    'metadataLocation': StorageLocationData;
    /**
     *
     * @type {StorageLocationData}
     * @memberof FolderData
     */
    'contentLocation': StorageLocationData;
}
/**
 *
 * @export
 * @interface FolderObjectData
 */
export interface FolderObjectData {
    /**
     *
     * @type {string}
     * @memberof FolderObjectData
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof FolderObjectData
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof FolderObjectData
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof FolderObjectData
     */
    'objectKey': string;
    /**
     *
     * @type {string}
     * @memberof FolderObjectData
     */
    'folderId': string;
    /**
     *
     * @type {{ [key: string]: ContentAttributesType | undefined; }}
     * @memberof FolderObjectData
     */
    'contentAttributes': {
        [key: string]: ContentAttributesType | undefined;
    };
    /**
     *
     * @type {{ [key: string]: { [key: string]: MetadataEntry | undefined; } | undefined; }}
     * @memberof FolderObjectData
     */
    'contentMetadata': {
        [key: string]: {
            [key: string]: MetadataEntry | undefined;
        } | undefined;
    };
    /**
     *
     * @type {string}
     * @memberof FolderObjectData
     */
    'hash': string | null;
    /**
     *
     * @type {number}
     * @memberof FolderObjectData
     */
    'lastModified': number;
    /**
     *
     * @type {string}
     * @memberof FolderObjectData
     */
    'eTag': string;
    /**
     *
     * @type {number}
     * @memberof FolderObjectData
     */
    'sizeBytes': number;
    /**
     *
     * @type {MediaType}
     * @memberof FolderObjectData
     */
    'mediaType': MediaType;
    /**
     *
     * @type {string}
     * @memberof FolderObjectData
     */
    'mimeType': string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const FolderPermissionName: {
    readonly FolderRefresh: "folder_refresh";
    readonly FolderManageShares: "folder_manage_shares";
    readonly FolderForget: "folder_forget";
    readonly ObjectEdit: "object_edit";
    readonly ObjectManage: "object_manage";
    readonly TagCreate: "tag_create";
    readonly TagAssociate: "tag_associate";
};
export type FolderPermissionName = typeof FolderPermissionName[keyof typeof FolderPermissionName];
/**
 *
 * @export
 * @interface GetFolder200Response
 */
export interface GetFolder200Response {
    /**
     *
     * @type {Array<FolderPermissionName>}
     * @memberof GetFolder200Response
     */
    'permissions': Array<FolderPermissionName>;
    /**
     *
     * @type {FolderData}
     * @memberof GetFolder200Response
     */
    'folder': FolderData;
}
/**
 *
 * @export
 * @interface GetFolderMetadata200Response
 */
export interface GetFolderMetadata200Response {
    /**
     *
     * @type {number}
     * @memberof GetFolderMetadata200Response
     */
    'totalSizeBytes': number;
    /**
     *
     * @type {number}
     * @memberof GetFolderMetadata200Response
     */
    'totalCount': number;
}
/**
 *
 * @export
 * @interface GetSettings200Response
 */
export interface GetSettings200Response {
    /**
     *
     * @type {ServerSettings}
     * @memberof GetSettings200Response
     */
    'settings': ServerSettings;
}
/**
 *
 * @export
 * @interface GetUser200Response
 */
export interface GetUser200Response {
    /**
     *
     * @type {UserData}
     * @memberof GetUser200Response
     */
    'result': UserData;
}
/**
 *
 * @export
 * @interface ListFolderObjects200Response
 */
export interface ListFolderObjects200Response {
    /**
     *
     * @type {ListResponseMeta}
     * @memberof ListFolderObjects200Response
     */
    'meta': ListResponseMeta;
    /**
     *
     * @type {Array<FolderObjectData>}
     * @memberof ListFolderObjects200Response
     */
    'result': Array<FolderObjectData>;
}
/**
 *
 * @export
 * @interface ListFoldersResponse
 */
export interface ListFoldersResponse {
    /**
     *
     * @type {ListFoldersResponseMeta}
     * @memberof ListFoldersResponse
     */
    'meta': ListFoldersResponseMeta;
    /**
     *
     * @type {Array<FolderAndPermission>}
     * @memberof ListFoldersResponse
     */
    'result': Array<FolderAndPermission>;
}
/**
 *
 * @export
 * @interface ListFoldersResponseMeta
 */
export interface ListFoldersResponseMeta {
    /**
     *
     * @type {number}
     * @memberof ListFoldersResponseMeta
     */
    'totalCount': number;
}
/**
 *
 * @export
 * @interface ListModules200Response
 */
export interface ListModules200Response {
    /**
     *
     * @type {{ [key: string]: { [key: string]: ModuleConnectionsMapValueValue | undefined; } | undefined; }}
     * @memberof ListModules200Response
     */
    'connected': {
        [key: string]: {
            [key: string]: ModuleConnectionsMapValueValue | undefined;
        } | undefined;
    };
    /**
     *
     * @type {Array<ModuleData>}
     * @memberof ListModules200Response
     */
    'installed': Array<ModuleData>;
}
/**
 *
 * @export
 * @interface ListResponseMeta
 */
export interface ListResponseMeta {
    /**
     *
     * @type {number}
     * @memberof ListResponseMeta
     */
    'totalCount': number;
}
/**
 *
 * @export
 * @interface ListUsersResponse
 */
export interface ListUsersResponse {
    /**
     *
     * @type {ListFoldersResponseMeta}
     * @memberof ListUsersResponse
     */
    'meta': ListFoldersResponseMeta;
    /**
     *
     * @type {Array<UserData>}
     * @memberof ListUsersResponse
     */
    'result': Array<UserData>;
}
/**
 *
 * @export
 * @interface LoginParams
 */
export interface LoginParams {
    /**
     *
     * @type {string}
     * @memberof LoginParams
     */
    'login': string;
    /**
     *
     * @type {string}
     * @memberof LoginParams
     */
    'password': string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const MediaType: {
    readonly Image: "IMAGE";
    readonly Video: "VIDEO";
    readonly Audio: "AUDIO";
    readonly Document: "DOCUMENT";
    readonly Unknown: "UNKNOWN";
};
export type MediaType = typeof MediaType[keyof typeof MediaType];
/**
 *
 * @export
 * @interface MetadataEntry
 */
export interface MetadataEntry {
    /**
     *
     * @type {string}
     * @memberof MetadataEntry
     */
    'mimeType': string;
    /**
     *
     * @type {number}
     * @memberof MetadataEntry
     */
    'size': number;
    /**
     *
     * @type {string}
     * @memberof MetadataEntry
     */
    'hash': string;
}
/**
 *
 * @export
 * @interface ModuleAction
 */
export interface ModuleAction {
    /**
     *
     * @type {string}
     * @memberof ModuleAction
     */
    'key': string;
    /**
     *
     * @type {string}
     * @memberof ModuleAction
     */
    'description': string;
}
/**
 *
 * @export
 * @interface ModuleConfig
 */
export interface ModuleConfig {
    /**
     *
     * @type {string}
     * @memberof ModuleConfig
     */
    'publicKey': string;
    /**
     *
     * @type {Array<string>}
     * @memberof ModuleConfig
     */
    'subscribedEvents': Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ModuleConfig
     */
    'emitEvents': Array<string>;
    /**
     *
     * @type {ModuleConfigActions}
     * @memberof ModuleConfig
     */
    'actions': ModuleConfigActions;
}
/**
 *
 * @export
 * @interface ModuleConfigActions
 */
export interface ModuleConfigActions {
    /**
     *
     * @type {Array<ModuleAction>}
     * @memberof ModuleConfigActions
     */
    'object': Array<ModuleAction>;
    /**
     *
     * @type {Array<ModuleAction>}
     * @memberof ModuleConfigActions
     */
    'folder': Array<ModuleAction>;
}
/**
 *
 * @export
 * @interface ModuleConnectionsMapValueValue
 */
export interface ModuleConnectionsMapValueValue {
    /**
     *
     * @type {string}
     * @memberof ModuleConnectionsMapValueValue
     */
    'ip': string;
    /**
     *
     * @type {string}
     * @memberof ModuleConnectionsMapValueValue
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof ModuleConnectionsMapValueValue
     */
    'id': string;
}
/**
 *
 * @export
 * @interface ModuleData
 */
export interface ModuleData {
    /**
     *
     * @type {string}
     * @memberof ModuleData
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ModuleData
     */
    'name': string;
    /**
     *
     * @type {ModuleConfig}
     * @memberof ModuleData
     */
    'config': ModuleConfig;
}
/**
 *
 * @export
 * @interface RefreshFolderObjectS3MetadataRequest
 */
export interface RefreshFolderObjectS3MetadataRequest {
    /**
     *
     * @type {string}
     * @memberof RefreshFolderObjectS3MetadataRequest
     */
    'eTag'?: string;
}
/**
 *
 * @export
 * @interface ServerLocationData
 */
export interface ServerLocationData {
    /**
     *
     * @type {string}
     * @memberof ServerLocationData
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ServerLocationData
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof ServerLocationData
     */
    'endpoint': string;
    /**
     *
     * @type {string}
     * @memberof ServerLocationData
     */
    'accessKeyId': string;
    /**
     *
     * @type {string}
     * @memberof ServerLocationData
     */
    'region': string;
    /**
     *
     * @type {string}
     * @memberof ServerLocationData
     */
    'bucket': string;
    /**
     *
     * @type {string}
     * @memberof ServerLocationData
     */
    'prefix'?: string;
}
/**
 *
 * @export
 * @interface ServerLocationInputData
 */
export interface ServerLocationInputData {
    /**
     *
     * @type {string}
     * @memberof ServerLocationInputData
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof ServerLocationInputData
     */
    'endpoint': string;
    /**
     *
     * @type {string}
     * @memberof ServerLocationInputData
     */
    'accessKeyId': string;
    /**
     *
     * @type {string}
     * @memberof ServerLocationInputData
     */
    'secretAccessKey': string;
    /**
     *
     * @type {string}
     * @memberof ServerLocationInputData
     */
    'region': string;
    /**
     *
     * @type {string}
     * @memberof ServerLocationInputData
     */
    'bucket': string;
    /**
     *
     * @type {string}
     * @memberof ServerLocationInputData
     */
    'prefix'?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const ServerLocationType: {
    readonly Metadata: "USER_METADATA";
    readonly Content: "USER_CONTENT";
    readonly Backup: "USER_BACKUP";
};
export type ServerLocationType = typeof ServerLocationType[keyof typeof ServerLocationType];
/**
 *
 * @export
 * @interface ServerSettings
 */
export interface ServerSettings {
    /**
     *
     * @type {boolean}
     * @memberof ServerSettings
     */
    'SIGNUP_ENABLED': boolean;
}
/**
 *
 * @export
 * @interface SessionResponse
 */
export interface SessionResponse {
    /**
     *
     * @type {string}
     * @memberof SessionResponse
     */
    'accessToken': string;
    /**
     *
     * @type {string}
     * @memberof SessionResponse
     */
    'refreshToken': string;
    /**
     *
     * @type {string}
     * @memberof SessionResponse
     */
    'expiresAt': string;
}
/**
 *
 * @export
 * @interface SignedURLsRequest
 */
export interface SignedURLsRequest {
    /**
     *
     * @type {string}
     * @memberof SignedURLsRequest
     */
    'objectIdentifier': string;
    /**
     *
     * @type {SignedURLsRequestMethod}
     * @memberof SignedURLsRequest
     */
    'method': SignedURLsRequestMethod;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const SignedURLsRequestMethod: {
    readonly Put: "PUT";
    readonly Delete: "DELETE";
    readonly Get: "GET";
};
export type SignedURLsRequestMethod = typeof SignedURLsRequestMethod[keyof typeof SignedURLsRequestMethod];
/**
 *
 * @export
 * @interface Signup201Response
 */
export interface Signup201Response {
    /**
     *
     * @type {UserData}
     * @memberof Signup201Response
     */
    'user': UserData;
}
/**
 *
 * @export
 * @interface SignupParams
 */
export interface SignupParams {
    /**
     *
     * @type {string}
     * @memberof SignupParams
     */
    'username': string;
    /**
     *
     * @type {string}
     * @memberof SignupParams
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof SignupParams
     */
    'password': string;
}
/**
 *
 * @export
 * @interface StorageLocationData
 */
export interface StorageLocationData {
    /**
     *
     * @type {string}
     * @memberof StorageLocationData
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof StorageLocationData
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof StorageLocationData
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof StorageLocationData
     */
    'userId'?: string;
    /**
     *
     * @type {string}
     * @memberof StorageLocationData
     */
    'providerType': StorageLocationDataProviderTypeEnum;
    /**
     *
     * @type {string}
     * @memberof StorageLocationData
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof StorageLocationData
     */
    'endpoint': string;
    /**
     *
     * @type {string}
     * @memberof StorageLocationData
     */
    'region'?: string;
    /**
     *
     * @type {string}
     * @memberof StorageLocationData
     */
    'bucket': string;
    /**
     *
     * @type {string}
     * @memberof StorageLocationData
     */
    'prefix'?: string;
    /**
     *
     * @type {string}
     * @memberof StorageLocationData
     */
    'accessKeyId': string;
}
export declare const StorageLocationDataProviderTypeEnum: {
    readonly Server: "SERVER";
    readonly User: "USER";
};
export type StorageLocationDataProviderTypeEnum = typeof StorageLocationDataProviderTypeEnum[keyof typeof StorageLocationDataProviderTypeEnum];
/**
 *
 * @export
 * @interface UpdateSettingRequest
 */
export interface UpdateSettingRequest {
    /**
     *
     * @type {any}
     * @memberof UpdateSettingRequest
     */
    'value': any;
}
/**
 *
 * @export
 * @interface UpdateUserData
 */
export interface UpdateUserData {
    /**
     *
     * @type {boolean}
     * @memberof UpdateUserData
     */
    'isAdmin'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UpdateUserData
     */
    'emailVerified'?: boolean;
    /**
     *
     * @type {string}
     * @memberof UpdateUserData
     */
    'password'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateUserData
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateUserData
     */
    'email'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof UpdateUserData
     */
    'permissions'?: Array<string>;
}
/**
 *
 * @export
 * @interface UserData
 */
export interface UserData {
    /**
     *
     * @type {string}
     * @memberof UserData
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof UserData
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof UserData
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof UserData
     */
    'name': string | null;
    /**
     *
     * @type {string}
     * @memberof UserData
     */
    'email': string | null;
    /**
     *
     * @type {boolean}
     * @memberof UserData
     */
    'emailVerified': boolean;
    /**
     *
     * @type {boolean}
     * @memberof UserData
     */
    'isAdmin': boolean;
    /**
     *
     * @type {string}
     * @memberof UserData
     */
    'username'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof UserData
     */
    'permissions': Array<string>;
}
/**
 *
 * @export
 * @interface UserLocationInputData
 */
export interface UserLocationInputData {
    /**
     *
     * @type {string}
     * @memberof UserLocationInputData
     */
    'serverLocationId'?: string;
    /**
     *
     * @type {string}
     * @memberof UserLocationInputData
     */
    'userLocationId'?: string;
    /**
     *
     * @type {string}
     * @memberof UserLocationInputData
     */
    'userLocationBucketOverride'?: string;
    /**
     *
     * @type {string}
     * @memberof UserLocationInputData
     */
    'userLocationPrefixOverride'?: string;
    /**
     *
     * @type {string}
     * @memberof UserLocationInputData
     */
    'accessKeyId'?: string;
    /**
     *
     * @type {string}
     * @memberof UserLocationInputData
     */
    'secretAccessKey'?: string;
    /**
     *
     * @type {string}
     * @memberof UserLocationInputData
     */
    'endpoint'?: string;
    /**
     *
     * @type {string}
     * @memberof UserLocationInputData
     */
    'bucket'?: string;
    /**
     *
     * @type {string}
     * @memberof UserLocationInputData
     */
    'region'?: string;
    /**
     *
     * @type {string}
     * @memberof UserLocationInputData
     */
    'prefix'?: string;
}
/**
 *
 * @export
 * @interface ViewerUpdatePayload
 */
export interface ViewerUpdatePayload {
    /**
     *
     * @type {string}
     * @memberof ViewerUpdatePayload
     */
    'name': string;
}
/**
 * AuthApi - axios parameter creator
 * @export
 */
export declare const AuthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {LoginParams} loginParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login: (loginParams: LoginParams, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Given a user\'s credentials, this endpoint will create a new user.
     * @param {SignupParams} signupParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signup: (signupParams: SignupParams, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export declare const AuthApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {LoginParams} loginParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(loginParams: LoginParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionResponse>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionResponse>>;
    /**
     * Given a user\'s credentials, this endpoint will create a new user.
     * @param {SignupParams} signupParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signup(signupParams: SignupParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signup201Response>>;
};
/**
 * AuthApi - factory interface
 * @export
 */
export declare const AuthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {AuthApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(requestParameters: AuthApiLoginRequest, options?: AxiosRequestConfig): AxiosPromise<SessionResponse>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout(options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken(options?: AxiosRequestConfig): AxiosPromise<SessionResponse>;
    /**
     * Given a user\'s credentials, this endpoint will create a new user.
     * @param {AuthApiSignupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signup(requestParameters: AuthApiSignupRequest, options?: AxiosRequestConfig): AxiosPromise<Signup201Response>;
};
/**
 * Request parameters for login operation in AuthApi.
 * @export
 * @interface AuthApiLoginRequest
 */
export interface AuthApiLoginRequest {
    /**
     *
     * @type {LoginParams}
     * @memberof AuthApiLogin
     */
    readonly loginParams: LoginParams;
}
/**
 * Request parameters for signup operation in AuthApi.
 * @export
 * @interface AuthApiSignupRequest
 */
export interface AuthApiSignupRequest {
    /**
     *
     * @type {SignupParams}
     * @memberof AuthApiSignup
     */
    readonly signupParams: SignupParams;
}
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export declare class AuthApi extends BaseAPI {
    /**
     *
     * @param {AuthApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    login(requestParameters: AuthApiLoginRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SessionResponse, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    logout(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    refreshToken(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SessionResponse, any>>;
    /**
     * Given a user\'s credentials, this endpoint will create a new user.
     * @param {AuthApiSignupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    signup(requestParameters: AuthApiSignupRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Signup201Response, any>>;
}
/**
 * FoldersApi - axios parameter creator
 * @export
 */
export declare const FoldersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateFolderRequest} createFolderRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolder: (createFolderRequest: CreateFolderRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {Array<SignedURLsRequest>} signedURLsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPresignedUrls: (folderId: string, signedURLsRequest: Array<SignedURLsRequest>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolder: (folderId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolderObject: (folderId: string, objectKey: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolder: (folderId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderMetadata: (folderId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderObject: (folderId: string, objectKey: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {string} [search]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolderObjects: (folderId: string, search?: string, offset?: number, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolders: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshFolder: (folderId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {RefreshFolderObjectS3MetadataRequest} refreshFolderObjectS3MetadataRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshFolderObjectS3Metadata: (folderId: string, objectKey: string, refreshFolderObjectS3MetadataRequest: RefreshFolderObjectS3MetadataRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FoldersApi - functional programming interface
 * @export
 */
export declare const FoldersApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateFolderRequest} createFolderRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolder(createFolderRequest: CreateFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateFolder200Response>>;
    /**
     *
     * @param {string} folderId
     * @param {Array<SignedURLsRequest>} signedURLsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPresignedUrls(folderId: string, signedURLsRequest: Array<SignedURLsRequest>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolder(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteFolder200Response>>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolderObject(folderId: string, objectKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteFolder200Response>>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolder(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFolder200Response>>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderMetadata(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFolderMetadata200Response>>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderObject(folderId: string, objectKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderObjectData>>;
    /**
     *
     * @param {string} folderId
     * @param {string} [search]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolderObjects(folderId: string, search?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListFolderObjects200Response>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolders(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListFoldersResponse>>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshFolder(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {RefreshFolderObjectS3MetadataRequest} refreshFolderObjectS3MetadataRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshFolderObjectS3Metadata(folderId: string, objectKey: string, refreshFolderObjectS3MetadataRequest: RefreshFolderObjectS3MetadataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderObjectData>>;
};
/**
 * FoldersApi - factory interface
 * @export
 */
export declare const FoldersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {FoldersApiCreateFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolder(requestParameters: FoldersApiCreateFolderRequest, options?: AxiosRequestConfig): AxiosPromise<CreateFolder200Response>;
    /**
     *
     * @param {FoldersApiCreatePresignedUrlsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPresignedUrls(requestParameters: FoldersApiCreatePresignedUrlsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<string>>;
    /**
     *
     * @param {FoldersApiDeleteFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolder(requestParameters: FoldersApiDeleteFolderRequest, options?: AxiosRequestConfig): AxiosPromise<DeleteFolder200Response>;
    /**
     *
     * @param {FoldersApiDeleteFolderObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolderObject(requestParameters: FoldersApiDeleteFolderObjectRequest, options?: AxiosRequestConfig): AxiosPromise<DeleteFolder200Response>;
    /**
     *
     * @param {FoldersApiGetFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolder(requestParameters: FoldersApiGetFolderRequest, options?: AxiosRequestConfig): AxiosPromise<GetFolder200Response>;
    /**
     *
     * @param {FoldersApiGetFolderMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderMetadata(requestParameters: FoldersApiGetFolderMetadataRequest, options?: AxiosRequestConfig): AxiosPromise<GetFolderMetadata200Response>;
    /**
     *
     * @param {FoldersApiGetFolderObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderObject(requestParameters: FoldersApiGetFolderObjectRequest, options?: AxiosRequestConfig): AxiosPromise<FolderObjectData>;
    /**
     *
     * @param {FoldersApiListFolderObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolderObjects(requestParameters: FoldersApiListFolderObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<ListFolderObjects200Response>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolders(options?: AxiosRequestConfig): AxiosPromise<ListFoldersResponse>;
    /**
     *
     * @param {FoldersApiRefreshFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshFolder(requestParameters: FoldersApiRefreshFolderRequest, options?: AxiosRequestConfig): AxiosPromise<boolean>;
    /**
     *
     * @param {FoldersApiRefreshFolderObjectS3MetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshFolderObjectS3Metadata(requestParameters: FoldersApiRefreshFolderObjectS3MetadataRequest, options?: AxiosRequestConfig): AxiosPromise<FolderObjectData>;
};
/**
 * Request parameters for createFolder operation in FoldersApi.
 * @export
 * @interface FoldersApiCreateFolderRequest
 */
export interface FoldersApiCreateFolderRequest {
    /**
     *
     * @type {CreateFolderRequest}
     * @memberof FoldersApiCreateFolder
     */
    readonly createFolderRequest: CreateFolderRequest;
}
/**
 * Request parameters for createPresignedUrls operation in FoldersApi.
 * @export
 * @interface FoldersApiCreatePresignedUrlsRequest
 */
export interface FoldersApiCreatePresignedUrlsRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiCreatePresignedUrls
     */
    readonly folderId: string;
    /**
     *
     * @type {Array<SignedURLsRequest>}
     * @memberof FoldersApiCreatePresignedUrls
     */
    readonly signedURLsRequest: Array<SignedURLsRequest>;
}
/**
 * Request parameters for deleteFolder operation in FoldersApi.
 * @export
 * @interface FoldersApiDeleteFolderRequest
 */
export interface FoldersApiDeleteFolderRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiDeleteFolder
     */
    readonly folderId: string;
}
/**
 * Request parameters for deleteFolderObject operation in FoldersApi.
 * @export
 * @interface FoldersApiDeleteFolderObjectRequest
 */
export interface FoldersApiDeleteFolderObjectRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiDeleteFolderObject
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiDeleteFolderObject
     */
    readonly objectKey: string;
}
/**
 * Request parameters for getFolder operation in FoldersApi.
 * @export
 * @interface FoldersApiGetFolderRequest
 */
export interface FoldersApiGetFolderRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiGetFolder
     */
    readonly folderId: string;
}
/**
 * Request parameters for getFolderMetadata operation in FoldersApi.
 * @export
 * @interface FoldersApiGetFolderMetadataRequest
 */
export interface FoldersApiGetFolderMetadataRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiGetFolderMetadata
     */
    readonly folderId: string;
}
/**
 * Request parameters for getFolderObject operation in FoldersApi.
 * @export
 * @interface FoldersApiGetFolderObjectRequest
 */
export interface FoldersApiGetFolderObjectRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiGetFolderObject
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiGetFolderObject
     */
    readonly objectKey: string;
}
/**
 * Request parameters for listFolderObjects operation in FoldersApi.
 * @export
 * @interface FoldersApiListFolderObjectsRequest
 */
export interface FoldersApiListFolderObjectsRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiListFolderObjects
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiListFolderObjects
     */
    readonly search?: string;
    /**
     *
     * @type {number}
     * @memberof FoldersApiListFolderObjects
     */
    readonly offset?: number;
    /**
     *
     * @type {number}
     * @memberof FoldersApiListFolderObjects
     */
    readonly limit?: number;
}
/**
 * Request parameters for refreshFolder operation in FoldersApi.
 * @export
 * @interface FoldersApiRefreshFolderRequest
 */
export interface FoldersApiRefreshFolderRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiRefreshFolder
     */
    readonly folderId: string;
}
/**
 * Request parameters for refreshFolderObjectS3Metadata operation in FoldersApi.
 * @export
 * @interface FoldersApiRefreshFolderObjectS3MetadataRequest
 */
export interface FoldersApiRefreshFolderObjectS3MetadataRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiRefreshFolderObjectS3Metadata
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiRefreshFolderObjectS3Metadata
     */
    readonly objectKey: string;
    /**
     *
     * @type {RefreshFolderObjectS3MetadataRequest}
     * @memberof FoldersApiRefreshFolderObjectS3Metadata
     */
    readonly refreshFolderObjectS3MetadataRequest: RefreshFolderObjectS3MetadataRequest;
}
/**
 * FoldersApi - object-oriented interface
 * @export
 * @class FoldersApi
 * @extends {BaseAPI}
 */
export declare class FoldersApi extends BaseAPI {
    /**
     *
     * @param {FoldersApiCreateFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    createFolder(requestParameters: FoldersApiCreateFolderRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateFolder200Response, any>>;
    /**
     *
     * @param {FoldersApiCreatePresignedUrlsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    createPresignedUrls(requestParameters: FoldersApiCreatePresignedUrlsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string[], any>>;
    /**
     *
     * @param {FoldersApiDeleteFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    deleteFolder(requestParameters: FoldersApiDeleteFolderRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteFolder200Response, any>>;
    /**
     *
     * @param {FoldersApiDeleteFolderObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    deleteFolderObject(requestParameters: FoldersApiDeleteFolderObjectRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteFolder200Response, any>>;
    /**
     *
     * @param {FoldersApiGetFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    getFolder(requestParameters: FoldersApiGetFolderRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetFolder200Response, any>>;
    /**
     *
     * @param {FoldersApiGetFolderMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    getFolderMetadata(requestParameters: FoldersApiGetFolderMetadataRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetFolderMetadata200Response, any>>;
    /**
     *
     * @param {FoldersApiGetFolderObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    getFolderObject(requestParameters: FoldersApiGetFolderObjectRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FolderObjectData, any>>;
    /**
     *
     * @param {FoldersApiListFolderObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    listFolderObjects(requestParameters: FoldersApiListFolderObjectsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListFolderObjects200Response, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    listFolders(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListFoldersResponse, any>>;
    /**
     *
     * @param {FoldersApiRefreshFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    refreshFolder(requestParameters: FoldersApiRefreshFolderRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<boolean, any>>;
    /**
     *
     * @param {FoldersApiRefreshFolderObjectS3MetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    refreshFolderObjectS3Metadata(requestParameters: FoldersApiRefreshFolderObjectS3MetadataRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FolderObjectData, any>>;
}
/**
 * ServerApi - axios parameter creator
 * @export
 */
export declare const ServerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {ServerLocationType} locationType
     * @param {ServerLocationInputData} serverLocationInputData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addServerLocation: (locationType: ServerLocationType, serverLocationInputData: ServerLocationInputData, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {CreateUserData} createUserData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser: (createUserData: CreateUserData, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {ServerLocationType} locationType
     * @param {string} locationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteServerLocation: (locationType: ServerLocationType, locationId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser: (userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSettings: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: (userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listModules: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {ServerLocationType} locationType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listServerLocations: (locationType: ServerLocationType, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} settingsKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetSetting: (settingsKey: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} settingsKey
     * @param {UpdateSettingRequest} updateSettingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSetting: (settingsKey: string, updateSettingRequest: UpdateSettingRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} userId
     * @param {UpdateUserData} updateUserData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser: (userId: string, updateUserData: UpdateUserData, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ServerApi - functional programming interface
 * @export
 */
export declare const ServerApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {ServerLocationType} locationType
     * @param {ServerLocationInputData} serverLocationInputData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addServerLocation(locationType: ServerLocationType, serverLocationInputData: ServerLocationInputData, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServerLocationData>>;
    /**
     *
     * @param {CreateUserData} createUserData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(createUserData: CreateUserData, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signup201Response>>;
    /**
     *
     * @param {ServerLocationType} locationType
     * @param {string} locationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteServerLocation(locationType: ServerLocationType, locationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSettings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSettings200Response>>;
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUser200Response>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listModules(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListModules200Response>>;
    /**
     *
     * @param {ServerLocationType} locationType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listServerLocations(locationType: ServerLocationType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ServerLocationData>>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUsersResponse>>;
    /**
     *
     * @param {string} settingsKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetSetting(settingsKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSettings200Response>>;
    /**
     *
     * @param {string} settingsKey
     * @param {UpdateSettingRequest} updateSettingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSetting(settingsKey: string, updateSettingRequest: UpdateSettingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSettings200Response>>;
    /**
     *
     * @param {string} userId
     * @param {UpdateUserData} updateUserData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(userId: string, updateUserData: UpdateUserData, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signup201Response>>;
};
/**
 * ServerApi - factory interface
 * @export
 */
export declare const ServerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {ServerApiAddServerLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addServerLocation(requestParameters: ServerApiAddServerLocationRequest, options?: AxiosRequestConfig): AxiosPromise<ServerLocationData>;
    /**
     *
     * @param {ServerApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(requestParameters: ServerApiCreateUserRequest, options?: AxiosRequestConfig): AxiosPromise<Signup201Response>;
    /**
     *
     * @param {ServerApiDeleteServerLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteServerLocation(requestParameters: ServerApiDeleteServerLocationRequest, options?: AxiosRequestConfig): AxiosPromise<boolean>;
    /**
     *
     * @param {ServerApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(requestParameters: ServerApiDeleteUserRequest, options?: AxiosRequestConfig): AxiosPromise<boolean>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSettings(options?: AxiosRequestConfig): AxiosPromise<GetSettings200Response>;
    /**
     *
     * @param {ServerApiGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(requestParameters: ServerApiGetUserRequest, options?: AxiosRequestConfig): AxiosPromise<GetUser200Response>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listModules(options?: AxiosRequestConfig): AxiosPromise<ListModules200Response>;
    /**
     *
     * @param {ServerApiListServerLocationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listServerLocations(requestParameters: ServerApiListServerLocationsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ServerLocationData>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(options?: AxiosRequestConfig): AxiosPromise<ListUsersResponse>;
    /**
     *
     * @param {ServerApiResetSettingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetSetting(requestParameters: ServerApiResetSettingRequest, options?: AxiosRequestConfig): AxiosPromise<GetSettings200Response>;
    /**
     *
     * @param {ServerApiUpdateSettingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSetting(requestParameters: ServerApiUpdateSettingRequest, options?: AxiosRequestConfig): AxiosPromise<GetSettings200Response>;
    /**
     *
     * @param {ServerApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(requestParameters: ServerApiUpdateUserRequest, options?: AxiosRequestConfig): AxiosPromise<Signup201Response>;
};
/**
 * Request parameters for addServerLocation operation in ServerApi.
 * @export
 * @interface ServerApiAddServerLocationRequest
 */
export interface ServerApiAddServerLocationRequest {
    /**
     *
     * @type {ServerLocationType}
     * @memberof ServerApiAddServerLocation
     */
    readonly locationType: ServerLocationType;
    /**
     *
     * @type {ServerLocationInputData}
     * @memberof ServerApiAddServerLocation
     */
    readonly serverLocationInputData: ServerLocationInputData;
}
/**
 * Request parameters for createUser operation in ServerApi.
 * @export
 * @interface ServerApiCreateUserRequest
 */
export interface ServerApiCreateUserRequest {
    /**
     *
     * @type {CreateUserData}
     * @memberof ServerApiCreateUser
     */
    readonly createUserData: CreateUserData;
}
/**
 * Request parameters for deleteServerLocation operation in ServerApi.
 * @export
 * @interface ServerApiDeleteServerLocationRequest
 */
export interface ServerApiDeleteServerLocationRequest {
    /**
     *
     * @type {ServerLocationType}
     * @memberof ServerApiDeleteServerLocation
     */
    readonly locationType: ServerLocationType;
    /**
     *
     * @type {string}
     * @memberof ServerApiDeleteServerLocation
     */
    readonly locationId: string;
}
/**
 * Request parameters for deleteUser operation in ServerApi.
 * @export
 * @interface ServerApiDeleteUserRequest
 */
export interface ServerApiDeleteUserRequest {
    /**
     *
     * @type {string}
     * @memberof ServerApiDeleteUser
     */
    readonly userId: string;
}
/**
 * Request parameters for getUser operation in ServerApi.
 * @export
 * @interface ServerApiGetUserRequest
 */
export interface ServerApiGetUserRequest {
    /**
     *
     * @type {string}
     * @memberof ServerApiGetUser
     */
    readonly userId: string;
}
/**
 * Request parameters for listServerLocations operation in ServerApi.
 * @export
 * @interface ServerApiListServerLocationsRequest
 */
export interface ServerApiListServerLocationsRequest {
    /**
     *
     * @type {ServerLocationType}
     * @memberof ServerApiListServerLocations
     */
    readonly locationType: ServerLocationType;
}
/**
 * Request parameters for resetSetting operation in ServerApi.
 * @export
 * @interface ServerApiResetSettingRequest
 */
export interface ServerApiResetSettingRequest {
    /**
     *
     * @type {string}
     * @memberof ServerApiResetSetting
     */
    readonly settingsKey: string;
}
/**
 * Request parameters for updateSetting operation in ServerApi.
 * @export
 * @interface ServerApiUpdateSettingRequest
 */
export interface ServerApiUpdateSettingRequest {
    /**
     *
     * @type {string}
     * @memberof ServerApiUpdateSetting
     */
    readonly settingsKey: string;
    /**
     *
     * @type {UpdateSettingRequest}
     * @memberof ServerApiUpdateSetting
     */
    readonly updateSettingRequest: UpdateSettingRequest;
}
/**
 * Request parameters for updateUser operation in ServerApi.
 * @export
 * @interface ServerApiUpdateUserRequest
 */
export interface ServerApiUpdateUserRequest {
    /**
     *
     * @type {string}
     * @memberof ServerApiUpdateUser
     */
    readonly userId: string;
    /**
     *
     * @type {UpdateUserData}
     * @memberof ServerApiUpdateUser
     */
    readonly updateUserData: UpdateUserData;
}
/**
 * ServerApi - object-oriented interface
 * @export
 * @class ServerApi
 * @extends {BaseAPI}
 */
export declare class ServerApi extends BaseAPI {
    /**
     *
     * @param {ServerApiAddServerLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    addServerLocation(requestParameters: ServerApiAddServerLocationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServerLocationData, any>>;
    /**
     *
     * @param {ServerApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    createUser(requestParameters: ServerApiCreateUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Signup201Response, any>>;
    /**
     *
     * @param {ServerApiDeleteServerLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    deleteServerLocation(requestParameters: ServerApiDeleteServerLocationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<boolean, any>>;
    /**
     *
     * @param {ServerApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    deleteUser(requestParameters: ServerApiDeleteUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<boolean, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    getSettings(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetSettings200Response, any>>;
    /**
     *
     * @param {ServerApiGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    getUser(requestParameters: ServerApiGetUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetUser200Response, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    listModules(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListModules200Response, any>>;
    /**
     *
     * @param {ServerApiListServerLocationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    listServerLocations(requestParameters: ServerApiListServerLocationsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServerLocationData[], any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    listUsers(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListUsersResponse, any>>;
    /**
     *
     * @param {ServerApiResetSettingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    resetSetting(requestParameters: ServerApiResetSettingRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetSettings200Response, any>>;
    /**
     *
     * @param {ServerApiUpdateSettingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    updateSetting(requestParameters: ServerApiUpdateSettingRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetSettings200Response, any>>;
    /**
     *
     * @param {ServerApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    updateUser(requestParameters: ServerApiUpdateUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Signup201Response, any>>;
}
/**
 * ViewerApi - axios parameter creator
 * @export
 */
export declare const ViewerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getViewer: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {ViewerUpdatePayload} viewerUpdatePayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateViewer: (viewerUpdatePayload: ViewerUpdatePayload, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ViewerApi - functional programming interface
 * @export
 */
export declare const ViewerApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getViewer(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signup201Response>>;
    /**
     *
     * @param {ViewerUpdatePayload} viewerUpdatePayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateViewer(viewerUpdatePayload: ViewerUpdatePayload, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signup201Response>>;
};
/**
 * ViewerApi - factory interface
 * @export
 */
export declare const ViewerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getViewer(options?: AxiosRequestConfig): AxiosPromise<Signup201Response>;
    /**
     *
     * @param {ViewerApiUpdateViewerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateViewer(requestParameters: ViewerApiUpdateViewerRequest, options?: AxiosRequestConfig): AxiosPromise<Signup201Response>;
};
/**
 * Request parameters for updateViewer operation in ViewerApi.
 * @export
 * @interface ViewerApiUpdateViewerRequest
 */
export interface ViewerApiUpdateViewerRequest {
    /**
     *
     * @type {ViewerUpdatePayload}
     * @memberof ViewerApiUpdateViewer
     */
    readonly viewerUpdatePayload: ViewerUpdatePayload;
}
/**
 * ViewerApi - object-oriented interface
 * @export
 * @class ViewerApi
 * @extends {BaseAPI}
 */
export declare class ViewerApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewerApi
     */
    getViewer(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Signup201Response, any>>;
    /**
     *
     * @param {ViewerApiUpdateViewerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewerApi
     */
    updateViewer(requestParameters: ViewerApiUpdateViewerRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Signup201Response, any>>;
}
