/**
 * @stellariscloud/api
 * The Stellaris Cloud core API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface AccessKeyBucketsListResponse
 */
export interface AccessKeyBucketsListResponse {
    /**
     *
     * @type {Array<AccessKeyBucketsListResponseResultInner>}
     * @memberof AccessKeyBucketsListResponse
     */
    'result': Array<AccessKeyBucketsListResponseResultInner>;
}
/**
 *
 * @export
 * @interface AccessKeyBucketsListResponseResultInner
 */
export interface AccessKeyBucketsListResponseResultInner {
    /**
     *
     * @type {string}
     * @memberof AccessKeyBucketsListResponseResultInner
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof AccessKeyBucketsListResponseResultInner
     */
    'createdDate'?: string;
}
/**
 *
 * @export
 * @interface AccessKeyDTO
 */
export interface AccessKeyDTO {
    /**
     *
     * @type {string}
     * @memberof AccessKeyDTO
     */
    'accessKeyId': string;
    /**
     *
     * @type {string}
     * @memberof AccessKeyDTO
     */
    'accessKeyHashId': string;
    /**
     *
     * @type {string}
     * @memberof AccessKeyDTO
     */
    'endpoint': string;
    /**
     *
     * @type {string}
     * @memberof AccessKeyDTO
     */
    'endpointDomain': string;
    /**
     *
     * @type {string}
     * @memberof AccessKeyDTO
     */
    'region': string;
    /**
     *
     * @type {number}
     * @memberof AccessKeyDTO
     */
    'folderCount': number;
}
/**
 *
 * @export
 * @interface AccessKeyGetResponse
 */
export interface AccessKeyGetResponse {
    /**
     *
     * @type {AccessKeyListResponseResultInner}
     * @memberof AccessKeyGetResponse
     */
    'accessKey': AccessKeyListResponseResultInner;
}
/**
 *
 * @export
 * @interface AccessKeyListResponse
 */
export interface AccessKeyListResponse {
    /**
     *
     * @type {UserListResponseMeta}
     * @memberof AccessKeyListResponse
     */
    'meta': UserListResponseMeta;
    /**
     *
     * @type {Array<AccessKeyListResponseResultInner>}
     * @memberof AccessKeyListResponse
     */
    'result': Array<AccessKeyListResponseResultInner>;
}
/**
 *
 * @export
 * @interface AccessKeyListResponseResultInner
 */
export interface AccessKeyListResponseResultInner {
    /**
     *
     * @type {string}
     * @memberof AccessKeyListResponseResultInner
     */
    'accessKeyId': string;
    /**
     *
     * @type {string}
     * @memberof AccessKeyListResponseResultInner
     */
    'accessKeyHashId': string;
    /**
     *
     * @type {string}
     * @memberof AccessKeyListResponseResultInner
     */
    'endpoint': string;
    /**
     *
     * @type {string}
     * @memberof AccessKeyListResponseResultInner
     */
    'endpointDomain': string;
    /**
     *
     * @type {string}
     * @memberof AccessKeyListResponseResultInner
     */
    'region': string;
    /**
     *
     * @type {number}
     * @memberof AccessKeyListResponseResultInner
     */
    'folderCount': number;
}
/**
 *
 * @export
 * @interface AccessKeyRotateResponse
 */
export interface AccessKeyRotateResponse {
    /**
     *
     * @type {string}
     * @memberof AccessKeyRotateResponse
     */
    'accessKeyHashId': string;
}
/**
 *
 * @export
 * @interface AppDTO
 */
export interface AppDTO {
    /**
     *
     * @type {string}
     * @memberof AppDTO
     */
    'identifier': string;
    /**
     *
     * @type {string}
     * @memberof AppDTO
     */
    'publicKey': string;
    /**
     *
     * @type {AppDTOConfig}
     * @memberof AppDTO
     */
    'config': AppDTOConfig;
    /**
     *
     * @type {Array<AppDTOManifestInner>}
     * @memberof AppDTO
     */
    'manifest': Array<AppDTOManifestInner>;
    /**
     *
     * @type {Array<AppDTOConnectedWorkersInner>}
     * @memberof AppDTO
     */
    'connectedWorkers': Array<AppDTOConnectedWorkersInner>;
    /**
     *
     * @type {string}
     * @memberof AppDTO
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof AppDTO
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface AppDTOConfig
 */
export interface AppDTOConfig {
    /**
     *
     * @type {string}
     * @memberof AppDTOConfig
     */
    'description': string;
    /**
     *
     * @type {boolean}
     * @memberof AppDTOConfig
     */
    'requiresStorage': boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof AppDTOConfig
     */
    'emittableEvents': Array<string>;
    /**
     *
     * @type {Array<AppDTOConfigTasksInner>}
     * @memberof AppDTOConfig
     */
    'tasks': Array<AppDTOConfigTasksInner>;
    /**
     *
     * @type {Array<AppDTOConfigMenuItemsInner>}
     * @memberof AppDTOConfig
     */
    'menuItems': Array<AppDTOConfigMenuItemsInner>;
}
/**
 *
 * @export
 * @interface AppDTOConfigMenuItemsInner
 */
export interface AppDTOConfigMenuItemsInner {
    /**
     *
     * @type {string}
     * @memberof AppDTOConfigMenuItemsInner
     */
    'label': string;
    /**
     *
     * @type {string}
     * @memberof AppDTOConfigMenuItemsInner
     */
    'iconPath'?: string;
    /**
     *
     * @type {string}
     * @memberof AppDTOConfigMenuItemsInner
     */
    'uiName': string;
}
/**
 *
 * @export
 * @interface AppDTOConfigTasksInner
 */
export interface AppDTOConfigTasksInner {
    /**
     *
     * @type {string}
     * @memberof AppDTOConfigTasksInner
     */
    'key': string;
    /**
     *
     * @type {string}
     * @memberof AppDTOConfigTasksInner
     */
    'label': string;
    /**
     *
     * @type {Array<string>}
     * @memberof AppDTOConfigTasksInner
     */
    'eventTriggers': Array<string>;
    /**
     *
     * @type {AppDTOConfigTasksInnerFolderAction}
     * @memberof AppDTOConfigTasksInner
     */
    'folderAction'?: AppDTOConfigTasksInnerFolderAction;
    /**
     *
     * @type {AppDTOConfigTasksInnerFolderAction}
     * @memberof AppDTOConfigTasksInner
     */
    'objectAction'?: AppDTOConfigTasksInnerFolderAction;
    /**
     *
     * @type {string}
     * @memberof AppDTOConfigTasksInner
     */
    'description': string;
    /**
     *
     * @type {{ [key: string]: AppDTOConfigTasksInnerInputParamsValue; }}
     * @memberof AppDTOConfigTasksInner
     */
    'inputParams'?: {
        [key: string]: AppDTOConfigTasksInnerInputParamsValue;
    };
}
/**
 *
 * @export
 * @interface AppDTOConfigTasksInnerFolderAction
 */
export interface AppDTOConfigTasksInnerFolderAction {
    /**
     *
     * @type {string}
     * @memberof AppDTOConfigTasksInnerFolderAction
     */
    'description': string;
}
/**
 *
 * @export
 * @interface AppDTOConfigTasksInnerInputParamsValue
 */
export interface AppDTOConfigTasksInnerInputParamsValue {
    /**
     *
     * @type {string}
     * @memberof AppDTOConfigTasksInnerInputParamsValue
     */
    'type': AppDTOConfigTasksInnerInputParamsValueTypeEnum;
    /**
     *
     * @type {AppDTOConfigTasksInnerInputParamsValueDefault}
     * @memberof AppDTOConfigTasksInnerInputParamsValue
     */
    'default'?: AppDTOConfigTasksInnerInputParamsValueDefault;
}
export declare const AppDTOConfigTasksInnerInputParamsValueTypeEnum: {
    readonly Boolean: "boolean";
    readonly String: "string";
    readonly Number: "number";
};
export type AppDTOConfigTasksInnerInputParamsValueTypeEnum = typeof AppDTOConfigTasksInnerInputParamsValueTypeEnum[keyof typeof AppDTOConfigTasksInnerInputParamsValueTypeEnum];
/**
 * @type AppDTOConfigTasksInnerInputParamsValueDefault
 * @export
 */
export type AppDTOConfigTasksInnerInputParamsValueDefault = boolean | number | string;
/**
 *
 * @export
 * @interface AppDTOConnectedWorkersInner
 */
export interface AppDTOConnectedWorkersInner {
    /**
     *
     * @type {string}
     * @memberof AppDTOConnectedWorkersInner
     */
    'appIdentifier': string;
    /**
     *
     * @type {string}
     * @memberof AppDTOConnectedWorkersInner
     */
    'workerId': string;
    /**
     *
     * @type {Array<string>}
     * @memberof AppDTOConnectedWorkersInner
     */
    'handledTaskKeys': Array<string>;
    /**
     *
     * @type {string}
     * @memberof AppDTOConnectedWorkersInner
     */
    'socketClientId': string;
    /**
     *
     * @type {string}
     * @memberof AppDTOConnectedWorkersInner
     */
    'ip': string;
}
/**
 *
 * @export
 * @interface AppDTOManifestInner
 */
export interface AppDTOManifestInner {
    /**
     *
     * @type {string}
     * @memberof AppDTOManifestInner
     */
    'path': string;
    /**
     *
     * @type {string}
     * @memberof AppDTOManifestInner
     */
    'hash': string;
    /**
     *
     * @type {number}
     * @memberof AppDTOManifestInner
     */
    'size': number;
}
/**
 *
 * @export
 * @interface AppGetResponse
 */
export interface AppGetResponse {
    /**
     *
     * @type {AppListResponseResultInner}
     * @memberof AppGetResponse
     */
    'app': AppListResponseResultInner;
}
/**
 *
 * @export
 * @interface AppListResponse
 */
export interface AppListResponse {
    /**
     *
     * @type {UserListResponseMeta}
     * @memberof AppListResponse
     */
    'meta': UserListResponseMeta;
    /**
     *
     * @type {Array<AppListResponseResultInner>}
     * @memberof AppListResponse
     */
    'result': Array<AppListResponseResultInner>;
}
/**
 *
 * @export
 * @interface AppListResponseResultInner
 */
export interface AppListResponseResultInner {
    /**
     *
     * @type {string}
     * @memberof AppListResponseResultInner
     */
    'identifier': string;
    /**
     *
     * @type {string}
     * @memberof AppListResponseResultInner
     */
    'publicKey': string;
    /**
     *
     * @type {AppDTOConfig}
     * @memberof AppListResponseResultInner
     */
    'config': AppDTOConfig;
    /**
     *
     * @type {Array<AppDTOManifestInner>}
     * @memberof AppListResponseResultInner
     */
    'manifest': Array<AppDTOManifestInner>;
    /**
     *
     * @type {Array<AppDTOConnectedWorkersInner>}
     * @memberof AppListResponseResultInner
     */
    'connectedWorkers': Array<AppDTOConnectedWorkersInner>;
    /**
     *
     * @type {string}
     * @memberof AppListResponseResultInner
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof AppListResponseResultInner
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface EventDTO
 */
export interface EventDTO {
    /**
     *
     * @type {string}
     * @memberof EventDTO
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof EventDTO
     */
    'eventKey': string;
    /**
     *
     * @type {string}
     * @memberof EventDTO
     */
    'level': EventDTOLevelEnum;
    /**
     *
     * @type {string}
     * @memberof EventDTO
     */
    'emitterIdentifier': string;
    /**
     *
     * @type {EventDTOLocationContext}
     * @memberof EventDTO
     */
    'locationContext'?: EventDTOLocationContext;
    /**
     *
     * @type {any}
     * @memberof EventDTO
     */
    'data'?: any;
    /**
     *
     * @type {string}
     * @memberof EventDTO
     */
    'createdAt': string;
}
export declare const EventDTOLevelEnum: {
    readonly Trace: "TRACE";
    readonly Debug: "DEBUG";
    readonly Info: "INFO";
    readonly Warn: "WARN";
    readonly Error: "ERROR";
};
export type EventDTOLevelEnum = typeof EventDTOLevelEnum[keyof typeof EventDTOLevelEnum];
/**
 *
 * @export
 * @interface EventDTOLocationContext
 */
export interface EventDTOLocationContext {
    /**
     *
     * @type {string}
     * @memberof EventDTOLocationContext
     */
    'folderId': string;
    /**
     *
     * @type {string}
     * @memberof EventDTOLocationContext
     */
    'objectKey'?: string;
}
/**
 *
 * @export
 * @interface EventGetResponse
 */
export interface EventGetResponse {
    /**
     *
     * @type {EventGetResponseEvent}
     * @memberof EventGetResponse
     */
    'event': EventGetResponseEvent;
}
/**
 *
 * @export
 * @interface EventGetResponseEvent
 */
export interface EventGetResponseEvent {
    /**
     *
     * @type {string}
     * @memberof EventGetResponseEvent
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof EventGetResponseEvent
     */
    'eventKey': string;
    /**
     *
     * @type {string}
     * @memberof EventGetResponseEvent
     */
    'level': EventGetResponseEventLevelEnum;
    /**
     *
     * @type {string}
     * @memberof EventGetResponseEvent
     */
    'emitterIdentifier': string;
    /**
     *
     * @type {EventDTOLocationContext}
     * @memberof EventGetResponseEvent
     */
    'locationContext'?: EventDTOLocationContext;
    /**
     *
     * @type {any}
     * @memberof EventGetResponseEvent
     */
    'data'?: any;
    /**
     *
     * @type {string}
     * @memberof EventGetResponseEvent
     */
    'createdAt': string;
}
export declare const EventGetResponseEventLevelEnum: {
    readonly Trace: "TRACE";
    readonly Debug: "DEBUG";
    readonly Info: "INFO";
    readonly Warn: "WARN";
    readonly Error: "ERROR";
};
export type EventGetResponseEventLevelEnum = typeof EventGetResponseEventLevelEnum[keyof typeof EventGetResponseEventLevelEnum];
/**
 *
 * @export
 * @interface EventListResponse
 */
export interface EventListResponse {
    /**
     *
     * @type {UserListResponseMeta}
     * @memberof EventListResponse
     */
    'meta': UserListResponseMeta;
    /**
     *
     * @type {Array<EventGetResponseEvent>}
     * @memberof EventListResponse
     */
    'result': Array<EventGetResponseEvent>;
}
/**
 *
 * @export
 * @interface FolderCreateInputDTO
 */
export interface FolderCreateInputDTO {
    /**
     *
     * @type {string}
     * @memberof FolderCreateInputDTO
     */
    'name': string;
    /**
     *
     * @type {FolderCreateInputDTOMetadataLocation}
     * @memberof FolderCreateInputDTO
     */
    'metadataLocation': FolderCreateInputDTOMetadataLocation;
    /**
     *
     * @type {FolderCreateInputDTOMetadataLocation}
     * @memberof FolderCreateInputDTO
     */
    'contentLocation': FolderCreateInputDTOMetadataLocation;
}
/**
 *
 * @export
 * @interface FolderCreateInputDTOMetadataLocation
 */
export interface FolderCreateInputDTOMetadataLocation {
    /**
     *
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'storageProvisionId'?: string;
    /**
     *
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'userLocationId'?: string;
    /**
     *
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'userLocationBucketOverride'?: string;
    /**
     *
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'userLocationPrefixOverride'?: string;
    /**
     *
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'accessKeyId'?: string;
    /**
     *
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'secretAccessKey'?: string;
    /**
     *
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'endpoint'?: string;
    /**
     *
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'bucket'?: string;
    /**
     *
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'region'?: string;
    /**
     *
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'prefix'?: string;
}
/**
 *
 * @export
 * @interface FolderCreateResponse
 */
export interface FolderCreateResponse {
    /**
     *
     * @type {FolderGetResponseFolder}
     * @memberof FolderCreateResponse
     */
    'folder': FolderGetResponseFolder;
}
/**
 *
 * @export
 * @interface FolderCreateSignedUrlInputDTOInner
 */
export interface FolderCreateSignedUrlInputDTOInner {
    /**
     *
     * @type {string}
     * @memberof FolderCreateSignedUrlInputDTOInner
     */
    'objectIdentifier': string;
    /**
     *
     * @type {string}
     * @memberof FolderCreateSignedUrlInputDTOInner
     */
    'method': FolderCreateSignedUrlInputDTOInnerMethodEnum;
}
export declare const FolderCreateSignedUrlInputDTOInnerMethodEnum: {
    readonly Delete: "DELETE";
    readonly Put: "PUT";
    readonly Get: "GET";
};
export type FolderCreateSignedUrlInputDTOInnerMethodEnum = typeof FolderCreateSignedUrlInputDTOInnerMethodEnum[keyof typeof FolderCreateSignedUrlInputDTOInnerMethodEnum];
/**
 *
 * @export
 * @interface FolderCreateSignedUrlsResponse
 */
export interface FolderCreateSignedUrlsResponse {
    /**
     *
     * @type {Array<string>}
     * @memberof FolderCreateSignedUrlsResponse
     */
    'urls': Array<string>;
}
/**
 *
 * @export
 * @interface FolderDTO
 */
export interface FolderDTO {
    /**
     *
     * @type {string}
     * @memberof FolderDTO
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof FolderDTO
     */
    'ownerId': string;
    /**
     *
     * @type {string}
     * @memberof FolderDTO
     */
    'name': string;
    /**
     *
     * @type {FolderDTOMetadataLocation}
     * @memberof FolderDTO
     */
    'metadataLocation': FolderDTOMetadataLocation;
    /**
     *
     * @type {FolderDTOMetadataLocation}
     * @memberof FolderDTO
     */
    'contentLocation': FolderDTOMetadataLocation;
    /**
     *
     * @type {string}
     * @memberof FolderDTO
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof FolderDTO
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface FolderDTOMetadataLocation
 */
export interface FolderDTOMetadataLocation {
    /**
     *
     * @type {string}
     * @memberof FolderDTOMetadataLocation
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof FolderDTOMetadataLocation
     */
    'userId'?: string;
    /**
     *
     * @type {string}
     * @memberof FolderDTOMetadataLocation
     */
    'providerType': FolderDTOMetadataLocationProviderTypeEnum;
    /**
     *
     * @type {string}
     * @memberof FolderDTOMetadataLocation
     */
    'label': string;
    /**
     *
     * @type {string}
     * @memberof FolderDTOMetadataLocation
     */
    'endpoint': string;
    /**
     *
     * @type {string}
     * @memberof FolderDTOMetadataLocation
     */
    'region': string;
    /**
     *
     * @type {string}
     * @memberof FolderDTOMetadataLocation
     */
    'bucket': string;
    /**
     *
     * @type {string}
     * @memberof FolderDTOMetadataLocation
     */
    'prefix'?: string;
    /**
     *
     * @type {string}
     * @memberof FolderDTOMetadataLocation
     */
    'accessKeyId': string;
    /**
     *
     * @type {string}
     * @memberof FolderDTOMetadataLocation
     */
    'accessKeyHashId': string;
}
export declare const FolderDTOMetadataLocationProviderTypeEnum: {
    readonly Server: "SERVER";
    readonly User: "USER";
};
export type FolderDTOMetadataLocationProviderTypeEnum = typeof FolderDTOMetadataLocationProviderTypeEnum[keyof typeof FolderDTOMetadataLocationProviderTypeEnum];
/**
 *
 * @export
 * @interface FolderGetMetadataResponse
 */
export interface FolderGetMetadataResponse {
    /**
     *
     * @type {number}
     * @memberof FolderGetMetadataResponse
     */
    'totalCount': number;
    /**
     *
     * @type {number}
     * @memberof FolderGetMetadataResponse
     */
    'totalSizeBytes': number;
}
/**
 *
 * @export
 * @interface FolderGetResponse
 */
export interface FolderGetResponse {
    /**
     *
     * @type {FolderGetResponseFolder}
     * @memberof FolderGetResponse
     */
    'folder': FolderGetResponseFolder;
    /**
     *
     * @type {Array<string>}
     * @memberof FolderGetResponse
     */
    'permissions': Array<FolderGetResponsePermissionsEnum>;
}
export declare const FolderGetResponsePermissionsEnum: {
    readonly FolderRescan: "FOLDER_RESCAN";
    readonly FolderForget: "FOLDER_FORGET";
    readonly ObjectEdit: "OBJECT_EDIT";
    readonly ObjectManage: "OBJECT_MANAGE";
};
export type FolderGetResponsePermissionsEnum = typeof FolderGetResponsePermissionsEnum[keyof typeof FolderGetResponsePermissionsEnum];
/**
 *
 * @export
 * @interface FolderGetResponseFolder
 */
export interface FolderGetResponseFolder {
    /**
     *
     * @type {string}
     * @memberof FolderGetResponseFolder
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof FolderGetResponseFolder
     */
    'ownerId': string;
    /**
     *
     * @type {string}
     * @memberof FolderGetResponseFolder
     */
    'name': string;
    /**
     *
     * @type {FolderDTOMetadataLocation}
     * @memberof FolderGetResponseFolder
     */
    'metadataLocation': FolderDTOMetadataLocation;
    /**
     *
     * @type {FolderDTOMetadataLocation}
     * @memberof FolderGetResponseFolder
     */
    'contentLocation': FolderDTOMetadataLocation;
    /**
     *
     * @type {string}
     * @memberof FolderGetResponseFolder
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof FolderGetResponseFolder
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface FolderListResponse
 */
export interface FolderListResponse {
    /**
     *
     * @type {UserListResponseMeta}
     * @memberof FolderListResponse
     */
    'meta': UserListResponseMeta;
    /**
     *
     * @type {Array<FolderListResponseResultInner>}
     * @memberof FolderListResponse
     */
    'result': Array<FolderListResponseResultInner>;
}
/**
 *
 * @export
 * @interface FolderListResponseResultInner
 */
export interface FolderListResponseResultInner {
    /**
     *
     * @type {FolderGetResponseFolder}
     * @memberof FolderListResponseResultInner
     */
    'folder': FolderGetResponseFolder;
    /**
     *
     * @type {Array<string>}
     * @memberof FolderListResponseResultInner
     */
    'permissions': Array<FolderListResponseResultInnerPermissionsEnum>;
}
export declare const FolderListResponseResultInnerPermissionsEnum: {
    readonly FolderRescan: "FOLDER_RESCAN";
    readonly FolderForget: "FOLDER_FORGET";
    readonly ObjectEdit: "OBJECT_EDIT";
    readonly ObjectManage: "OBJECT_MANAGE";
};
export type FolderListResponseResultInnerPermissionsEnum = typeof FolderListResponseResultInnerPermissionsEnum[keyof typeof FolderListResponseResultInnerPermissionsEnum];
/**
 *
 * @export
 * @interface FolderObjectContentAttributesDTO
 */
export interface FolderObjectContentAttributesDTO {
    /**
     *
     * @type {string}
     * @memberof FolderObjectContentAttributesDTO
     */
    'mediaType': FolderObjectContentAttributesDTOMediaTypeEnum;
    /**
     *
     * @type {string}
     * @memberof FolderObjectContentAttributesDTO
     */
    'mimeType': string;
    /**
     *
     * @type {number}
     * @memberof FolderObjectContentAttributesDTO
     */
    'height': number;
    /**
     *
     * @type {number}
     * @memberof FolderObjectContentAttributesDTO
     */
    'width': number;
    /**
     *
     * @type {number}
     * @memberof FolderObjectContentAttributesDTO
     */
    'orientation': number;
    /**
     *
     * @type {number}
     * @memberof FolderObjectContentAttributesDTO
     */
    'lengthMs': number;
    /**
     *
     * @type {number}
     * @memberof FolderObjectContentAttributesDTO
     */
    'bitrate': number;
}
export declare const FolderObjectContentAttributesDTOMediaTypeEnum: {
    readonly Image: "IMAGE";
    readonly Video: "VIDEO";
    readonly Audio: "AUDIO";
    readonly Document: "DOCUMENT";
    readonly Unknown: "UNKNOWN";
};
export type FolderObjectContentAttributesDTOMediaTypeEnum = typeof FolderObjectContentAttributesDTOMediaTypeEnum[keyof typeof FolderObjectContentAttributesDTOMediaTypeEnum];
/**
 *
 * @export
 * @interface FolderObjectDTO
 */
export interface FolderObjectDTO {
    /**
     *
     * @type {string}
     * @memberof FolderObjectDTO
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof FolderObjectDTO
     */
    'objectKey': string;
    /**
     *
     * @type {string}
     * @memberof FolderObjectDTO
     */
    'folderId': string;
    /**
     *
     * @type {string}
     * @memberof FolderObjectDTO
     */
    'hash'?: string;
    /**
     *
     * @type {number}
     * @memberof FolderObjectDTO
     */
    'lastModified': number;
    /**
     *
     * @type {string}
     * @memberof FolderObjectDTO
     */
    'eTag': string;
    /**
     *
     * @type {number}
     * @memberof FolderObjectDTO
     */
    'sizeBytes': number;
    /**
     *
     * @type {string}
     * @memberof FolderObjectDTO
     */
    'mimeType': string;
    /**
     *
     * @type {string}
     * @memberof FolderObjectDTO
     */
    'mediaType': FolderObjectDTOMediaTypeEnum;
    /**
     *
     * @type {{ [key: string]: FolderObjectDTOContentAttributesValue; }}
     * @memberof FolderObjectDTO
     */
    'contentAttributes': {
        [key: string]: FolderObjectDTOContentAttributesValue;
    };
    /**
     *
     * @type {{ [key: string]: { [key: string]: FolderObjectDTOContentMetadataValueValue; }; }}
     * @memberof FolderObjectDTO
     */
    'contentMetadata': {
        [key: string]: {
            [key: string]: FolderObjectDTOContentMetadataValueValue;
        };
    };
}
export declare const FolderObjectDTOMediaTypeEnum: {
    readonly Image: "IMAGE";
    readonly Video: "VIDEO";
    readonly Audio: "AUDIO";
    readonly Document: "DOCUMENT";
    readonly Unknown: "UNKNOWN";
};
export type FolderObjectDTOMediaTypeEnum = typeof FolderObjectDTOMediaTypeEnum[keyof typeof FolderObjectDTOMediaTypeEnum];
/**
 *
 * @export
 * @interface FolderObjectDTOContentAttributesValue
 */
export interface FolderObjectDTOContentAttributesValue {
    /**
     *
     * @type {string}
     * @memberof FolderObjectDTOContentAttributesValue
     */
    'mediaType': FolderObjectDTOContentAttributesValueMediaTypeEnum;
    /**
     *
     * @type {string}
     * @memberof FolderObjectDTOContentAttributesValue
     */
    'mimeType': string;
    /**
     *
     * @type {number}
     * @memberof FolderObjectDTOContentAttributesValue
     */
    'height': number;
    /**
     *
     * @type {number}
     * @memberof FolderObjectDTOContentAttributesValue
     */
    'width': number;
    /**
     *
     * @type {number}
     * @memberof FolderObjectDTOContentAttributesValue
     */
    'orientation': number;
    /**
     *
     * @type {number}
     * @memberof FolderObjectDTOContentAttributesValue
     */
    'lengthMs': number;
    /**
     *
     * @type {number}
     * @memberof FolderObjectDTOContentAttributesValue
     */
    'bitrate': number;
}
export declare const FolderObjectDTOContentAttributesValueMediaTypeEnum: {
    readonly Image: "IMAGE";
    readonly Video: "VIDEO";
    readonly Audio: "AUDIO";
    readonly Document: "DOCUMENT";
    readonly Unknown: "UNKNOWN";
};
export type FolderObjectDTOContentAttributesValueMediaTypeEnum = typeof FolderObjectDTOContentAttributesValueMediaTypeEnum[keyof typeof FolderObjectDTOContentAttributesValueMediaTypeEnum];
/**
 *
 * @export
 * @interface FolderObjectDTOContentMetadataValueValue
 */
export interface FolderObjectDTOContentMetadataValueValue {
    /**
     *
     * @type {string}
     * @memberof FolderObjectDTOContentMetadataValueValue
     */
    'mimeType': string;
    /**
     *
     * @type {number}
     * @memberof FolderObjectDTOContentMetadataValueValue
     */
    'size': number;
    /**
     *
     * @type {string}
     * @memberof FolderObjectDTOContentMetadataValueValue
     */
    'hash': string;
}
/**
 *
 * @export
 * @interface FolderObjectGetResponse
 */
export interface FolderObjectGetResponse {
    /**
     *
     * @type {FolderObjectListResponseResultInner}
     * @memberof FolderObjectGetResponse
     */
    'folderObject': FolderObjectListResponseResultInner;
}
/**
 *
 * @export
 * @interface FolderObjectListResponse
 */
export interface FolderObjectListResponse {
    /**
     *
     * @type {UserListResponseMeta}
     * @memberof FolderObjectListResponse
     */
    'meta': UserListResponseMeta;
    /**
     *
     * @type {Array<FolderObjectListResponseResultInner>}
     * @memberof FolderObjectListResponse
     */
    'result': Array<FolderObjectListResponseResultInner>;
}
/**
 *
 * @export
 * @interface FolderObjectListResponseResultInner
 */
export interface FolderObjectListResponseResultInner {
    /**
     *
     * @type {string}
     * @memberof FolderObjectListResponseResultInner
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof FolderObjectListResponseResultInner
     */
    'objectKey': string;
    /**
     *
     * @type {string}
     * @memberof FolderObjectListResponseResultInner
     */
    'folderId': string;
    /**
     *
     * @type {string}
     * @memberof FolderObjectListResponseResultInner
     */
    'hash'?: string;
    /**
     *
     * @type {number}
     * @memberof FolderObjectListResponseResultInner
     */
    'lastModified': number;
    /**
     *
     * @type {string}
     * @memberof FolderObjectListResponseResultInner
     */
    'eTag': string;
    /**
     *
     * @type {number}
     * @memberof FolderObjectListResponseResultInner
     */
    'sizeBytes': number;
    /**
     *
     * @type {string}
     * @memberof FolderObjectListResponseResultInner
     */
    'mimeType': string;
    /**
     *
     * @type {string}
     * @memberof FolderObjectListResponseResultInner
     */
    'mediaType': FolderObjectListResponseResultInnerMediaTypeEnum;
    /**
     *
     * @type {{ [key: string]: FolderObjectDTOContentAttributesValue; }}
     * @memberof FolderObjectListResponseResultInner
     */
    'contentAttributes': {
        [key: string]: FolderObjectDTOContentAttributesValue;
    };
    /**
     *
     * @type {{ [key: string]: { [key: string]: FolderObjectDTOContentMetadataValueValue; }; }}
     * @memberof FolderObjectListResponseResultInner
     */
    'contentMetadata': {
        [key: string]: {
            [key: string]: FolderObjectDTOContentMetadataValueValue;
        };
    };
}
export declare const FolderObjectListResponseResultInnerMediaTypeEnum: {
    readonly Image: "IMAGE";
    readonly Video: "VIDEO";
    readonly Audio: "AUDIO";
    readonly Document: "DOCUMENT";
    readonly Unknown: "UNKNOWN";
};
export type FolderObjectListResponseResultInnerMediaTypeEnum = typeof FolderObjectListResponseResultInnerMediaTypeEnum[keyof typeof FolderObjectListResponseResultInnerMediaTypeEnum];
/**
 *
 * @export
 * @interface LoginCredentialsDTO
 */
export interface LoginCredentialsDTO {
    /**
     *
     * @type {string}
     * @memberof LoginCredentialsDTO
     */
    'login': string;
    /**
     *
     * @type {string}
     * @memberof LoginCredentialsDTO
     */
    'password': string;
}
/**
 *
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     *
     * @type {LoginResponseSession}
     * @memberof LoginResponse
     */
    'session': LoginResponseSession;
}
/**
 *
 * @export
 * @interface LoginResponseSession
 */
export interface LoginResponseSession {
    /**
     *
     * @type {string}
     * @memberof LoginResponseSession
     */
    'accessToken': string;
    /**
     *
     * @type {string}
     * @memberof LoginResponseSession
     */
    'refreshToken': string;
}
/**
 *
 * @export
 * @interface RotateAccessKeyInputDTO
 */
export interface RotateAccessKeyInputDTO {
    /**
     *
     * @type {string}
     * @memberof RotateAccessKeyInputDTO
     */
    'accessKeyId': string;
    /**
     *
     * @type {string}
     * @memberof RotateAccessKeyInputDTO
     */
    'secretAccessKey': string;
}
/**
 *
 * @export
 * @interface ServerStorageLocationDTO
 */
export interface ServerStorageLocationDTO {
    /**
     *
     * @type {string}
     * @memberof ServerStorageLocationDTO
     */
    'accessKeyHashId': string;
    /**
     *
     * @type {string}
     * @memberof ServerStorageLocationDTO
     */
    'accessKeyId': string;
    /**
     *
     * @type {string}
     * @memberof ServerStorageLocationDTO
     */
    'endpoint': string;
    /**
     *
     * @type {string}
     * @memberof ServerStorageLocationDTO
     */
    'bucket': string;
    /**
     *
     * @type {string}
     * @memberof ServerStorageLocationDTO
     */
    'region': string;
    /**
     *
     * @type {string}
     * @memberof ServerStorageLocationDTO
     */
    'prefix'?: string;
}
/**
 *
 * @export
 * @interface ServerStorageLocationGetResponse
 */
export interface ServerStorageLocationGetResponse {
    /**
     *
     * @type {ServerStorageLocationGetResponseServerStorageLocation}
     * @memberof ServerStorageLocationGetResponse
     */
    'serverStorageLocation'?: ServerStorageLocationGetResponseServerStorageLocation;
}
/**
 *
 * @export
 * @interface ServerStorageLocationGetResponseServerStorageLocation
 */
export interface ServerStorageLocationGetResponseServerStorageLocation {
    /**
     *
     * @type {string}
     * @memberof ServerStorageLocationGetResponseServerStorageLocation
     */
    'accessKeyHashId': string;
    /**
     *
     * @type {string}
     * @memberof ServerStorageLocationGetResponseServerStorageLocation
     */
    'accessKeyId': string;
    /**
     *
     * @type {string}
     * @memberof ServerStorageLocationGetResponseServerStorageLocation
     */
    'endpoint': string;
    /**
     *
     * @type {string}
     * @memberof ServerStorageLocationGetResponseServerStorageLocation
     */
    'bucket': string;
    /**
     *
     * @type {string}
     * @memberof ServerStorageLocationGetResponseServerStorageLocation
     */
    'region': string;
    /**
     *
     * @type {string}
     * @memberof ServerStorageLocationGetResponseServerStorageLocation
     */
    'prefix'?: string;
}
/**
 *
 * @export
 * @interface ServerStorageLocationInputDTO
 */
export interface ServerStorageLocationInputDTO {
    /**
     *
     * @type {string}
     * @memberof ServerStorageLocationInputDTO
     */
    'accessKeyId': string;
    /**
     *
     * @type {string}
     * @memberof ServerStorageLocationInputDTO
     */
    'secretAccessKey': string;
    /**
     *
     * @type {string}
     * @memberof ServerStorageLocationInputDTO
     */
    'endpoint': string;
    /**
     *
     * @type {string}
     * @memberof ServerStorageLocationInputDTO
     */
    'bucket': string;
    /**
     *
     * @type {string}
     * @memberof ServerStorageLocationInputDTO
     */
    'region': string;
    /**
     *
     * @type {string}
     * @memberof ServerStorageLocationInputDTO
     */
    'prefix': string | null;
}
/**
 *
 * @export
 * @interface SetSettingInputDTO
 */
export interface SetSettingInputDTO {
    /**
     *
     * @type {any}
     * @memberof SetSettingInputDTO
     */
    'value'?: any;
}
/**
 *
 * @export
 * @interface SettingSetResponse
 */
export interface SettingSetResponse {
    /**
     *
     * @type {string}
     * @memberof SettingSetResponse
     */
    'settingKey': string;
    /**
     *
     * @type {any}
     * @memberof SettingSetResponse
     */
    'settingValue'?: any;
}
/**
 *
 * @export
 * @interface SettingsGetResponse
 */
export interface SettingsGetResponse {
    /**
     *
     * @type {SettingsGetResponseSettings}
     * @memberof SettingsGetResponse
     */
    'settings': SettingsGetResponseSettings;
}
/**
 *
 * @export
 * @interface SettingsGetResponseSettings
 */
export interface SettingsGetResponseSettings {
    /**
     *
     * @type {boolean}
     * @memberof SettingsGetResponseSettings
     */
    'SIGNUP_ENABLED'?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof SettingsGetResponseSettings
     */
    'SIGNUP_PERMISSIONS'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof SettingsGetResponseSettings
     */
    'SERVER_HOSTNAME'?: string;
}
/**
 *
 * @export
 * @interface SignupCredentialsDTO
 */
export interface SignupCredentialsDTO {
    /**
     *
     * @type {string}
     * @memberof SignupCredentialsDTO
     */
    'username': string;
    /**
     *
     * @type {string}
     * @memberof SignupCredentialsDTO
     */
    'email'?: string;
    /**
     *
     * @type {string}
     * @memberof SignupCredentialsDTO
     */
    'password': string;
}
/**
 *
 * @export
 * @interface SignupResponse
 */
export interface SignupResponse {
    /**
     *
     * @type {SignupResponseUser}
     * @memberof SignupResponse
     */
    'user': SignupResponseUser;
}
/**
 *
 * @export
 * @interface SignupResponseUser
 */
export interface SignupResponseUser {
    /**
     *
     * @type {string}
     * @memberof SignupResponseUser
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof SignupResponseUser
     */
    'name': string | null;
    /**
     *
     * @type {string}
     * @memberof SignupResponseUser
     */
    'email': string | null;
    /**
     *
     * @type {boolean}
     * @memberof SignupResponseUser
     */
    'emailVerified': boolean;
    /**
     *
     * @type {boolean}
     * @memberof SignupResponseUser
     */
    'isAdmin': boolean;
    /**
     *
     * @type {string}
     * @memberof SignupResponseUser
     */
    'username': string;
    /**
     *
     * @type {Array<string>}
     * @memberof SignupResponseUser
     */
    'permissions': Array<string>;
    /**
     *
     * @type {string}
     * @memberof SignupResponseUser
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof SignupResponseUser
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface StorageLocationInputDTO
 */
export interface StorageLocationInputDTO {
    /**
     *
     * @type {string}
     * @memberof StorageLocationInputDTO
     */
    'storageProvisionId'?: string;
    /**
     *
     * @type {string}
     * @memberof StorageLocationInputDTO
     */
    'userLocationId'?: string;
    /**
     *
     * @type {string}
     * @memberof StorageLocationInputDTO
     */
    'userLocationBucketOverride'?: string;
    /**
     *
     * @type {string}
     * @memberof StorageLocationInputDTO
     */
    'userLocationPrefixOverride'?: string;
    /**
     *
     * @type {string}
     * @memberof StorageLocationInputDTO
     */
    'accessKeyId'?: string;
    /**
     *
     * @type {string}
     * @memberof StorageLocationInputDTO
     */
    'secretAccessKey'?: string;
    /**
     *
     * @type {string}
     * @memberof StorageLocationInputDTO
     */
    'endpoint'?: string;
    /**
     *
     * @type {string}
     * @memberof StorageLocationInputDTO
     */
    'bucket'?: string;
    /**
     *
     * @type {string}
     * @memberof StorageLocationInputDTO
     */
    'region'?: string;
    /**
     *
     * @type {string}
     * @memberof StorageLocationInputDTO
     */
    'prefix'?: string;
}
/**
 *
 * @export
 * @interface TaskDTO
 */
export interface TaskDTO {
    /**
     *
     * @type {string}
     * @memberof TaskDTO
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof TaskDTO
     */
    'taskKey': string;
    /**
     *
     * @type {string}
     * @memberof TaskDTO
     */
    'ownerIdentifier': string;
    /**
     *
     * @type {string}
     * @memberof TaskDTO
     */
    'triggeringEventId': string;
    /**
     *
     * @type {string}
     * @memberof TaskDTO
     */
    'subjectFolderId'?: string;
    /**
     *
     * @type {string}
     * @memberof TaskDTO
     */
    'subjectObjectKey'?: string;
    /**
     *
     * @type {string}
     * @memberof TaskDTO
     */
    'handlerId'?: string;
    /**
     *
     * @type {{ [key: string]: TaskGetResponseTaskInputDataValue; }}
     * @memberof TaskDTO
     */
    'inputData': {
        [key: string]: TaskGetResponseTaskInputDataValue;
    };
    /**
     *
     * @type {string}
     * @memberof TaskDTO
     */
    'errorAt'?: string;
    /**
     *
     * @type {string}
     * @memberof TaskDTO
     */
    'errorCode'?: string;
    /**
     *
     * @type {string}
     * @memberof TaskDTO
     */
    'errorMessage'?: string;
    /**
     *
     * @type {TaskGetResponseTaskTaskDescription}
     * @memberof TaskDTO
     */
    'taskDescription': TaskGetResponseTaskTaskDescription;
    /**
     *
     * @type {Array<any>}
     * @memberof TaskDTO
     */
    'updates': Array<any>;
    /**
     *
     * @type {string}
     * @memberof TaskDTO
     */
    'startedAt'?: string;
    /**
     *
     * @type {string}
     * @memberof TaskDTO
     */
    'completedAt'?: string;
    /**
     *
     * @type {string}
     * @memberof TaskDTO
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof TaskDTO
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface TaskGetResponse
 */
export interface TaskGetResponse {
    /**
     *
     * @type {TaskGetResponseTask}
     * @memberof TaskGetResponse
     */
    'task': TaskGetResponseTask;
}
/**
 *
 * @export
 * @interface TaskGetResponseTask
 */
export interface TaskGetResponseTask {
    /**
     *
     * @type {string}
     * @memberof TaskGetResponseTask
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof TaskGetResponseTask
     */
    'taskKey': string;
    /**
     *
     * @type {string}
     * @memberof TaskGetResponseTask
     */
    'ownerIdentifier': string;
    /**
     *
     * @type {string}
     * @memberof TaskGetResponseTask
     */
    'triggeringEventId': string;
    /**
     *
     * @type {string}
     * @memberof TaskGetResponseTask
     */
    'subjectFolderId'?: string;
    /**
     *
     * @type {string}
     * @memberof TaskGetResponseTask
     */
    'subjectObjectKey'?: string;
    /**
     *
     * @type {string}
     * @memberof TaskGetResponseTask
     */
    'handlerId'?: string;
    /**
     *
     * @type {{ [key: string]: TaskGetResponseTaskInputDataValue; }}
     * @memberof TaskGetResponseTask
     */
    'inputData': {
        [key: string]: TaskGetResponseTaskInputDataValue;
    };
    /**
     *
     * @type {string}
     * @memberof TaskGetResponseTask
     */
    'errorAt'?: string;
    /**
     *
     * @type {string}
     * @memberof TaskGetResponseTask
     */
    'errorCode'?: string;
    /**
     *
     * @type {string}
     * @memberof TaskGetResponseTask
     */
    'errorMessage'?: string;
    /**
     *
     * @type {TaskGetResponseTaskTaskDescription}
     * @memberof TaskGetResponseTask
     */
    'taskDescription': TaskGetResponseTaskTaskDescription;
    /**
     *
     * @type {Array<any>}
     * @memberof TaskGetResponseTask
     */
    'updates': Array<any>;
    /**
     *
     * @type {string}
     * @memberof TaskGetResponseTask
     */
    'startedAt'?: string;
    /**
     *
     * @type {string}
     * @memberof TaskGetResponseTask
     */
    'completedAt'?: string;
    /**
     *
     * @type {string}
     * @memberof TaskGetResponseTask
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof TaskGetResponseTask
     */
    'updatedAt': string;
}
/**
 * @type TaskGetResponseTaskInputDataValue
 * @export
 */
export type TaskGetResponseTaskInputDataValue = number | string;
/**
 *
 * @export
 * @interface TaskGetResponseTaskTaskDescription
 */
export interface TaskGetResponseTaskTaskDescription {
    /**
     *
     * @type {string}
     * @memberof TaskGetResponseTaskTaskDescription
     */
    'textKey': string;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof TaskGetResponseTaskTaskDescription
     */
    'variables': {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface TaskListResponse
 */
export interface TaskListResponse {
    /**
     *
     * @type {UserListResponseMeta}
     * @memberof TaskListResponse
     */
    'meta': UserListResponseMeta;
    /**
     *
     * @type {Array<TaskGetResponseTask>}
     * @memberof TaskListResponse
     */
    'result': Array<TaskGetResponseTask>;
}
/**
 *
 * @export
 * @interface TokenRefreshResponse
 */
export interface TokenRefreshResponse {
    /**
     *
     * @type {LoginResponseSession}
     * @memberof TokenRefreshResponse
     */
    'session': LoginResponseSession;
}
/**
 *
 * @export
 * @interface TriggerAppTaskInputDTO
 */
export interface TriggerAppTaskInputDTO {
    /**
     *
     * @type {string}
     * @memberof TriggerAppTaskInputDTO
     */
    'objectKey'?: string;
    /**
     *
     * @type {any}
     * @memberof TriggerAppTaskInputDTO
     */
    'inputParams'?: any;
}
/**
 *
 * @export
 * @interface UserCreateInputDTO
 */
export interface UserCreateInputDTO {
    /**
     *
     * @type {string}
     * @memberof UserCreateInputDTO
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof UserCreateInputDTO
     */
    'email'?: string;
    /**
     *
     * @type {boolean}
     * @memberof UserCreateInputDTO
     */
    'emailVerified'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UserCreateInputDTO
     */
    'isAdmin'?: boolean;
    /**
     *
     * @type {string}
     * @memberof UserCreateInputDTO
     */
    'username': string;
    /**
     *
     * @type {string}
     * @memberof UserCreateInputDTO
     */
    'password': string;
    /**
     *
     * @type {Array<string>}
     * @memberof UserCreateInputDTO
     */
    'permissions'?: Array<string>;
}
/**
 *
 * @export
 * @interface UserDTO
 */
export interface UserDTO {
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    'name': string | null;
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    'email': string | null;
    /**
     *
     * @type {boolean}
     * @memberof UserDTO
     */
    'emailVerified': boolean;
    /**
     *
     * @type {boolean}
     * @memberof UserDTO
     */
    'isAdmin': boolean;
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    'username': string;
    /**
     *
     * @type {Array<string>}
     * @memberof UserDTO
     */
    'permissions': Array<string>;
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface UserGetResponse
 */
export interface UserGetResponse {
    /**
     *
     * @type {SignupResponseUser}
     * @memberof UserGetResponse
     */
    'user': SignupResponseUser;
}
/**
 *
 * @export
 * @interface UserListResponse
 */
export interface UserListResponse {
    /**
     *
     * @type {UserListResponseMeta}
     * @memberof UserListResponse
     */
    'meta': UserListResponseMeta;
    /**
     *
     * @type {Array<SignupResponseUser>}
     * @memberof UserListResponse
     */
    'result': Array<SignupResponseUser>;
}
/**
 *
 * @export
 * @interface UserListResponseMeta
 */
export interface UserListResponseMeta {
    /**
     *
     * @type {number}
     * @memberof UserListResponseMeta
     */
    'totalCount': number;
}
/**
 *
 * @export
 * @interface UserStorageProvisionDTO
 */
export interface UserStorageProvisionDTO {
    /**
     *
     * @type {string}
     * @memberof UserStorageProvisionDTO
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof UserStorageProvisionDTO
     */
    'accessKeyHashId': string;
    /**
     *
     * @type {string}
     * @memberof UserStorageProvisionDTO
     */
    'endpoint': string;
    /**
     *
     * @type {string}
     * @memberof UserStorageProvisionDTO
     */
    'bucket': string;
    /**
     *
     * @type {string}
     * @memberof UserStorageProvisionDTO
     */
    'region': string;
    /**
     *
     * @type {string}
     * @memberof UserStorageProvisionDTO
     */
    'accessKeyId': string;
    /**
     *
     * @type {string}
     * @memberof UserStorageProvisionDTO
     */
    'prefix'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof UserStorageProvisionDTO
     */
    'provisionTypes': Array<UserStorageProvisionDTOProvisionTypesEnum>;
    /**
     *
     * @type {string}
     * @memberof UserStorageProvisionDTO
     */
    'label': string;
    /**
     *
     * @type {string}
     * @memberof UserStorageProvisionDTO
     */
    'description': string;
}
export declare const UserStorageProvisionDTOProvisionTypesEnum: {
    readonly Content: "CONTENT";
    readonly Metadata: "METADATA";
    readonly Redundancy: "REDUNDANCY";
};
export type UserStorageProvisionDTOProvisionTypesEnum = typeof UserStorageProvisionDTOProvisionTypesEnum[keyof typeof UserStorageProvisionDTOProvisionTypesEnum];
/**
 *
 * @export
 * @interface UserStorageProvisionGetResponse
 */
export interface UserStorageProvisionGetResponse {
    /**
     *
     * @type {UserStorageProvisionListResponseResultInner}
     * @memberof UserStorageProvisionGetResponse
     */
    'userStorageProvision': UserStorageProvisionListResponseResultInner;
}
/**
 *
 * @export
 * @interface UserStorageProvisionInputDTO
 */
export interface UserStorageProvisionInputDTO {
    /**
     *
     * @type {string}
     * @memberof UserStorageProvisionInputDTO
     */
    'label': string;
    /**
     *
     * @type {string}
     * @memberof UserStorageProvisionInputDTO
     */
    'description': string;
    /**
     *
     * @type {string}
     * @memberof UserStorageProvisionInputDTO
     */
    'endpoint': string;
    /**
     *
     * @type {string}
     * @memberof UserStorageProvisionInputDTO
     */
    'bucket': string;
    /**
     *
     * @type {string}
     * @memberof UserStorageProvisionInputDTO
     */
    'region': string;
    /**
     *
     * @type {string}
     * @memberof UserStorageProvisionInputDTO
     */
    'accessKeyId': string;
    /**
     *
     * @type {string}
     * @memberof UserStorageProvisionInputDTO
     */
    'secretAccessKey': string;
    /**
     *
     * @type {string}
     * @memberof UserStorageProvisionInputDTO
     */
    'prefix'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof UserStorageProvisionInputDTO
     */
    'provisionTypes': Array<UserStorageProvisionInputDTOProvisionTypesEnum>;
}
export declare const UserStorageProvisionInputDTOProvisionTypesEnum: {
    readonly Content: "CONTENT";
    readonly Metadata: "METADATA";
    readonly Redundancy: "REDUNDANCY";
};
export type UserStorageProvisionInputDTOProvisionTypesEnum = typeof UserStorageProvisionInputDTOProvisionTypesEnum[keyof typeof UserStorageProvisionInputDTOProvisionTypesEnum];
/**
 *
 * @export
 * @interface UserStorageProvisionListResponse
 */
export interface UserStorageProvisionListResponse {
    /**
     *
     * @type {Array<UserStorageProvisionListResponseResultInner>}
     * @memberof UserStorageProvisionListResponse
     */
    'result': Array<UserStorageProvisionListResponseResultInner>;
}
/**
 *
 * @export
 * @interface UserStorageProvisionListResponseResultInner
 */
export interface UserStorageProvisionListResponseResultInner {
    /**
     *
     * @type {string}
     * @memberof UserStorageProvisionListResponseResultInner
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof UserStorageProvisionListResponseResultInner
     */
    'accessKeyHashId': string;
    /**
     *
     * @type {string}
     * @memberof UserStorageProvisionListResponseResultInner
     */
    'endpoint': string;
    /**
     *
     * @type {string}
     * @memberof UserStorageProvisionListResponseResultInner
     */
    'bucket': string;
    /**
     *
     * @type {string}
     * @memberof UserStorageProvisionListResponseResultInner
     */
    'region': string;
    /**
     *
     * @type {string}
     * @memberof UserStorageProvisionListResponseResultInner
     */
    'accessKeyId': string;
    /**
     *
     * @type {string}
     * @memberof UserStorageProvisionListResponseResultInner
     */
    'prefix'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof UserStorageProvisionListResponseResultInner
     */
    'provisionTypes': Array<UserStorageProvisionListResponseResultInnerProvisionTypesEnum>;
    /**
     *
     * @type {string}
     * @memberof UserStorageProvisionListResponseResultInner
     */
    'label': string;
    /**
     *
     * @type {string}
     * @memberof UserStorageProvisionListResponseResultInner
     */
    'description': string;
}
export declare const UserStorageProvisionListResponseResultInnerProvisionTypesEnum: {
    readonly Content: "CONTENT";
    readonly Metadata: "METADATA";
    readonly Redundancy: "REDUNDANCY";
};
export type UserStorageProvisionListResponseResultInnerProvisionTypesEnum = typeof UserStorageProvisionListResponseResultInnerProvisionTypesEnum[keyof typeof UserStorageProvisionListResponseResultInnerProvisionTypesEnum];
/**
 *
 * @export
 * @interface UserUpdateInputDTO
 */
export interface UserUpdateInputDTO {
    /**
     *
     * @type {string}
     * @memberof UserUpdateInputDTO
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UserUpdateInputDTO
     */
    'email'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof UserUpdateInputDTO
     */
    'isAdmin'?: boolean;
    /**
     *
     * @type {string}
     * @memberof UserUpdateInputDTO
     */
    'username'?: string;
    /**
     *
     * @type {string}
     * @memberof UserUpdateInputDTO
     */
    'password'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof UserUpdateInputDTO
     */
    'permissions'?: Array<string>;
}
/**
 *
 * @export
 * @interface ViewerGetResponse
 */
export interface ViewerGetResponse {
    /**
     *
     * @type {SignupResponseUser}
     * @memberof ViewerGetResponse
     */
    'user': SignupResponseUser;
}
/**
 *
 * @export
 * @interface ViewerUpdateInputDTO
 */
export interface ViewerUpdateInputDTO {
    /**
     *
     * @type {string}
     * @memberof ViewerUpdateInputDTO
     */
    'name': string;
}
/**
 * AccessKeysApi - axios parameter creator
 * @export
 */
export declare const AccessKeysApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get an access key by id.
     * @param {string} accessKeyHashId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccessKey: (accessKeyHashId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List buckets for an access key.
     * @param {string} accessKeyHashId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAccessKeyBuckets: (accessKeyHashId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List access keys.
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {ListAccessKeysSortEnum} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAccessKeys: (offset?: number, limit?: number, sort?: ListAccessKeysSortEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Rotate an access key.
     * @param {string} accessKeyHashId
     * @param {RotateAccessKeyInputDTO} rotateAccessKeyInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rotateAccessKey: (accessKeyHashId: string, rotateAccessKeyInputDTO: RotateAccessKeyInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AccessKeysApi - functional programming interface
 * @export
 */
export declare const AccessKeysApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get an access key by id.
     * @param {string} accessKeyHashId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccessKey(accessKeyHashId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessKeyGetResponse>>;
    /**
     *
     * @summary List buckets for an access key.
     * @param {string} accessKeyHashId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAccessKeyBuckets(accessKeyHashId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessKeyBucketsListResponse>>;
    /**
     *
     * @summary List access keys.
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {ListAccessKeysSortEnum} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAccessKeys(offset?: number, limit?: number, sort?: ListAccessKeysSortEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessKeyListResponse>>;
    /**
     *
     * @summary Rotate an access key.
     * @param {string} accessKeyHashId
     * @param {RotateAccessKeyInputDTO} rotateAccessKeyInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rotateAccessKey(accessKeyHashId: string, rotateAccessKeyInputDTO: RotateAccessKeyInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessKeyRotateResponse>>;
};
/**
 * AccessKeysApi - factory interface
 * @export
 */
export declare const AccessKeysApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get an access key by id.
     * @param {AccessKeysApiGetAccessKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccessKey(requestParameters: AccessKeysApiGetAccessKeyRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccessKeyGetResponse>;
    /**
     *
     * @summary List buckets for an access key.
     * @param {AccessKeysApiListAccessKeyBucketsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAccessKeyBuckets(requestParameters: AccessKeysApiListAccessKeyBucketsRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccessKeyBucketsListResponse>;
    /**
     *
     * @summary List access keys.
     * @param {AccessKeysApiListAccessKeysRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAccessKeys(requestParameters?: AccessKeysApiListAccessKeysRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccessKeyListResponse>;
    /**
     *
     * @summary Rotate an access key.
     * @param {AccessKeysApiRotateAccessKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rotateAccessKey(requestParameters: AccessKeysApiRotateAccessKeyRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccessKeyRotateResponse>;
};
/**
 * Request parameters for getAccessKey operation in AccessKeysApi.
 * @export
 * @interface AccessKeysApiGetAccessKeyRequest
 */
export interface AccessKeysApiGetAccessKeyRequest {
    /**
     *
     * @type {string}
     * @memberof AccessKeysApiGetAccessKey
     */
    readonly accessKeyHashId: string;
}
/**
 * Request parameters for listAccessKeyBuckets operation in AccessKeysApi.
 * @export
 * @interface AccessKeysApiListAccessKeyBucketsRequest
 */
export interface AccessKeysApiListAccessKeyBucketsRequest {
    /**
     *
     * @type {string}
     * @memberof AccessKeysApiListAccessKeyBuckets
     */
    readonly accessKeyHashId: string;
}
/**
 * Request parameters for listAccessKeys operation in AccessKeysApi.
 * @export
 * @interface AccessKeysApiListAccessKeysRequest
 */
export interface AccessKeysApiListAccessKeysRequest {
    /**
     *
     * @type {number}
     * @memberof AccessKeysApiListAccessKeys
     */
    readonly offset?: number;
    /**
     *
     * @type {number}
     * @memberof AccessKeysApiListAccessKeys
     */
    readonly limit?: number;
    /**
     *
     * @type {'accessKeyId-asc' | 'accessKeyId-desc' | 'accessKeyHashId-asc' | 'accessKeyHashId-desc' | 'endpoint-asc' | 'endpoint-desc' | 'region-asc' | 'region-desc' | 'updatedAt-asc' | 'updatedAt-desc'}
     * @memberof AccessKeysApiListAccessKeys
     */
    readonly sort?: ListAccessKeysSortEnum;
}
/**
 * Request parameters for rotateAccessKey operation in AccessKeysApi.
 * @export
 * @interface AccessKeysApiRotateAccessKeyRequest
 */
export interface AccessKeysApiRotateAccessKeyRequest {
    /**
     *
     * @type {string}
     * @memberof AccessKeysApiRotateAccessKey
     */
    readonly accessKeyHashId: string;
    /**
     *
     * @type {RotateAccessKeyInputDTO}
     * @memberof AccessKeysApiRotateAccessKey
     */
    readonly rotateAccessKeyInputDTO: RotateAccessKeyInputDTO;
}
/**
 * AccessKeysApi - object-oriented interface
 * @export
 * @class AccessKeysApi
 * @extends {BaseAPI}
 */
export declare class AccessKeysApi extends BaseAPI {
    /**
     *
     * @summary Get an access key by id.
     * @param {AccessKeysApiGetAccessKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessKeysApi
     */
    getAccessKey(requestParameters: AccessKeysApiGetAccessKeyRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessKeyGetResponse, any>>;
    /**
     *
     * @summary List buckets for an access key.
     * @param {AccessKeysApiListAccessKeyBucketsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessKeysApi
     */
    listAccessKeyBuckets(requestParameters: AccessKeysApiListAccessKeyBucketsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessKeyBucketsListResponse, any>>;
    /**
     *
     * @summary List access keys.
     * @param {AccessKeysApiListAccessKeysRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessKeysApi
     */
    listAccessKeys(requestParameters?: AccessKeysApiListAccessKeysRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessKeyListResponse, any>>;
    /**
     *
     * @summary Rotate an access key.
     * @param {AccessKeysApiRotateAccessKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessKeysApi
     */
    rotateAccessKey(requestParameters: AccessKeysApiRotateAccessKeyRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessKeyRotateResponse, any>>;
}
/**
 * @export
 */
export declare const ListAccessKeysSortEnum: {
    readonly AccessKeyIdAsc: "accessKeyId-asc";
    readonly AccessKeyIdDesc: "accessKeyId-desc";
    readonly AccessKeyHashIdAsc: "accessKeyHashId-asc";
    readonly AccessKeyHashIdDesc: "accessKeyHashId-desc";
    readonly EndpointAsc: "endpoint-asc";
    readonly EndpointDesc: "endpoint-desc";
    readonly RegionAsc: "region-asc";
    readonly RegionDesc: "region-desc";
    readonly UpdatedAtAsc: "updatedAt-asc";
    readonly UpdatedAtDesc: "updatedAt-desc";
};
export type ListAccessKeysSortEnum = typeof ListAccessKeysSortEnum[keyof typeof ListAccessKeysSortEnum];
/**
 * AppsApi - axios parameter creator
 * @export
 */
export declare const AppsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} appIdentifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApp: (appIdentifier: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApps: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AppsApi - functional programming interface
 * @export
 */
export declare const AppsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} appIdentifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApp(appIdentifier: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppGetResponse>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApps(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppListResponse>>;
};
/**
 * AppsApi - factory interface
 * @export
 */
export declare const AppsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {AppsApiGetAppRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApp(requestParameters: AppsApiGetAppRequest, options?: RawAxiosRequestConfig): AxiosPromise<AppGetResponse>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApps(options?: RawAxiosRequestConfig): AxiosPromise<AppListResponse>;
};
/**
 * Request parameters for getApp operation in AppsApi.
 * @export
 * @interface AppsApiGetAppRequest
 */
export interface AppsApiGetAppRequest {
    /**
     *
     * @type {string}
     * @memberof AppsApiGetApp
     */
    readonly appIdentifier: string;
}
/**
 * AppsApi - object-oriented interface
 * @export
 * @class AppsApi
 * @extends {BaseAPI}
 */
export declare class AppsApi extends BaseAPI {
    /**
     *
     * @param {AppsApiGetAppRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApi
     */
    getApp(requestParameters: AppsApiGetAppRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AppGetResponse, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApi
     */
    listApps(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AppListResponse, any>>;
}
/**
 * AuthApi - axios parameter creator
 * @export
 */
export declare const AuthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Authenticate the user and return access and refresh tokens.
     * @param {LoginCredentialsDTO} loginCredentialsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login: (loginCredentialsDTO: LoginCredentialsDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Logout. Kill the current session.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Refresh a session with a refresh token.
     * @param {string} refreshToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken: (refreshToken: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Register a new user.
     * @param {SignupCredentialsDTO} signupCredentialsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signup: (signupCredentialsDTO: SignupCredentialsDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export declare const AuthApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Authenticate the user and return access and refresh tokens.
     * @param {LoginCredentialsDTO} loginCredentialsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(loginCredentialsDTO: LoginCredentialsDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>>;
    /**
     *
     * @summary Logout. Kill the current session.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
    /**
     *
     * @summary Refresh a session with a refresh token.
     * @param {string} refreshToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken(refreshToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenRefreshResponse>>;
    /**
     *
     * @summary Register a new user.
     * @param {SignupCredentialsDTO} signupCredentialsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signup(signupCredentialsDTO: SignupCredentialsDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignupResponse>>;
};
/**
 * AuthApi - factory interface
 * @export
 */
export declare const AuthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Authenticate the user and return access and refresh tokens.
     * @param {AuthApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(requestParameters: AuthApiLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<LoginResponse>;
    /**
     *
     * @summary Logout. Kill the current session.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout(options?: RawAxiosRequestConfig): AxiosPromise<boolean>;
    /**
     *
     * @summary Refresh a session with a refresh token.
     * @param {AuthApiRefreshTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken(requestParameters: AuthApiRefreshTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenRefreshResponse>;
    /**
     *
     * @summary Register a new user.
     * @param {AuthApiSignupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signup(requestParameters: AuthApiSignupRequest, options?: RawAxiosRequestConfig): AxiosPromise<SignupResponse>;
};
/**
 * Request parameters for login operation in AuthApi.
 * @export
 * @interface AuthApiLoginRequest
 */
export interface AuthApiLoginRequest {
    /**
     *
     * @type {LoginCredentialsDTO}
     * @memberof AuthApiLogin
     */
    readonly loginCredentialsDTO: LoginCredentialsDTO;
}
/**
 * Request parameters for refreshToken operation in AuthApi.
 * @export
 * @interface AuthApiRefreshTokenRequest
 */
export interface AuthApiRefreshTokenRequest {
    /**
     *
     * @type {string}
     * @memberof AuthApiRefreshToken
     */
    readonly refreshToken: string;
}
/**
 * Request parameters for signup operation in AuthApi.
 * @export
 * @interface AuthApiSignupRequest
 */
export interface AuthApiSignupRequest {
    /**
     *
     * @type {SignupCredentialsDTO}
     * @memberof AuthApiSignup
     */
    readonly signupCredentialsDTO: SignupCredentialsDTO;
}
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export declare class AuthApi extends BaseAPI {
    /**
     *
     * @summary Authenticate the user and return access and refresh tokens.
     * @param {AuthApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    login(requestParameters: AuthApiLoginRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<LoginResponse, any>>;
    /**
     *
     * @summary Logout. Kill the current session.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    logout(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<boolean, any>>;
    /**
     *
     * @summary Refresh a session with a refresh token.
     * @param {AuthApiRefreshTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    refreshToken(requestParameters: AuthApiRefreshTokenRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TokenRefreshResponse, any>>;
    /**
     *
     * @summary Register a new user.
     * @param {AuthApiSignupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    signup(requestParameters: AuthApiSignupRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SignupResponse, any>>;
}
/**
 * FoldersApi - axios parameter creator
 * @export
 */
export declare const FoldersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a folder.
     * @param {FolderCreateInputDTO} folderCreateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolder: (folderCreateInputDTO: FolderCreateInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create presigned urls for objects in a folder.
     * @param {string} folderId
     * @param {Array<FolderCreateSignedUrlInputDTOInner>} folderCreateSignedUrlInputDTOInner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPresignedUrls: (folderId: string, folderCreateSignedUrlInputDTOInner: Array<FolderCreateSignedUrlInputDTOInner>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a folder by id.
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolder: (folderId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a folder object by folderId and objectKey.
     * @param {string} folderId
     * @param {string} objectKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolderObject: (folderId: string, objectKey: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a folder by id.
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolder: (folderId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get the metadata for a folder by id.
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderMetadata: (folderId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a folder object by folderId and objectKey.
     * @param {string} folderId
     * @param {string} objectKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderObject: (folderId: string, objectKey: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Handle app task trigger
     * @param {string} folderId
     * @param {string} appIdentifier
     * @param {string} taskKey
     * @param {TriggerAppTaskInputDTO} triggerAppTaskInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handleAppTaskTrigger: (folderId: string, appIdentifier: string, taskKey: string, triggerAppTaskInputDTO: TriggerAppTaskInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List folder objects by folderId.
     * @param {string} folderId
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [search]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolderObjects: (folderId: string, offset?: number, limit?: number, search?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List folders.
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {ListFoldersSortEnum} [sort]
     * @param {string} [search]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolders: (offset?: number, limit?: number, sort?: ListFoldersSortEnum, search?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Scan the object again in the underlying storage, and update its state in our db.
     * @param {string} folderId
     * @param {string} objectKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshFolderObjectS3Metadata: (folderId: string, objectKey: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Scan the underlying S3 location and update our local representation of it.
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rescanFolder: (folderId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FoldersApi - functional programming interface
 * @export
 */
export declare const FoldersApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a folder.
     * @param {FolderCreateInputDTO} folderCreateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolder(folderCreateInputDTO: FolderCreateInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderCreateResponse>>;
    /**
     *
     * @summary Create presigned urls for objects in a folder.
     * @param {string} folderId
     * @param {Array<FolderCreateSignedUrlInputDTOInner>} folderCreateSignedUrlInputDTOInner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPresignedUrls(folderId: string, folderCreateSignedUrlInputDTOInner: Array<FolderCreateSignedUrlInputDTOInner>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderCreateSignedUrlsResponse>>;
    /**
     *
     * @summary Delete a folder by id.
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolder(folderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a folder object by folderId and objectKey.
     * @param {string} folderId
     * @param {string} objectKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolderObject(folderId: string, objectKey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get a folder by id.
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolder(folderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderGetResponse>>;
    /**
     *
     * @summary Get the metadata for a folder by id.
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderMetadata(folderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderGetMetadataResponse>>;
    /**
     *
     * @summary Get a folder object by folderId and objectKey.
     * @param {string} folderId
     * @param {string} objectKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderObject(folderId: string, objectKey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderObjectGetResponse>>;
    /**
     *
     * @summary Handle app task trigger
     * @param {string} folderId
     * @param {string} appIdentifier
     * @param {string} taskKey
     * @param {TriggerAppTaskInputDTO} triggerAppTaskInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handleAppTaskTrigger(folderId: string, appIdentifier: string, taskKey: string, triggerAppTaskInputDTO: TriggerAppTaskInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary List folder objects by folderId.
     * @param {string} folderId
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [search]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolderObjects(folderId: string, offset?: number, limit?: number, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderObjectListResponse>>;
    /**
     *
     * @summary List folders.
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {ListFoldersSortEnum} [sort]
     * @param {string} [search]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolders(offset?: number, limit?: number, sort?: ListFoldersSortEnum, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderListResponse>>;
    /**
     *
     * @summary Scan the object again in the underlying storage, and update its state in our db.
     * @param {string} folderId
     * @param {string} objectKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshFolderObjectS3Metadata(folderId: string, objectKey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderObjectGetResponse>>;
    /**
     *
     * @summary Scan the underlying S3 location and update our local representation of it.
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rescanFolder(folderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * FoldersApi - factory interface
 * @export
 */
export declare const FoldersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create a folder.
     * @param {FoldersApiCreateFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolder(requestParameters: FoldersApiCreateFolderRequest, options?: RawAxiosRequestConfig): AxiosPromise<FolderCreateResponse>;
    /**
     *
     * @summary Create presigned urls for objects in a folder.
     * @param {FoldersApiCreatePresignedUrlsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPresignedUrls(requestParameters: FoldersApiCreatePresignedUrlsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FolderCreateSignedUrlsResponse>;
    /**
     *
     * @summary Delete a folder by id.
     * @param {FoldersApiDeleteFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolder(requestParameters: FoldersApiDeleteFolderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a folder object by folderId and objectKey.
     * @param {FoldersApiDeleteFolderObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolderObject(requestParameters: FoldersApiDeleteFolderObjectRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get a folder by id.
     * @param {FoldersApiGetFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolder(requestParameters: FoldersApiGetFolderRequest, options?: RawAxiosRequestConfig): AxiosPromise<FolderGetResponse>;
    /**
     *
     * @summary Get the metadata for a folder by id.
     * @param {FoldersApiGetFolderMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderMetadata(requestParameters: FoldersApiGetFolderMetadataRequest, options?: RawAxiosRequestConfig): AxiosPromise<FolderGetMetadataResponse>;
    /**
     *
     * @summary Get a folder object by folderId and objectKey.
     * @param {FoldersApiGetFolderObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderObject(requestParameters: FoldersApiGetFolderObjectRequest, options?: RawAxiosRequestConfig): AxiosPromise<FolderObjectGetResponse>;
    /**
     *
     * @summary Handle app task trigger
     * @param {FoldersApiHandleAppTaskTriggerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handleAppTaskTrigger(requestParameters: FoldersApiHandleAppTaskTriggerRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary List folder objects by folderId.
     * @param {FoldersApiListFolderObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolderObjects(requestParameters: FoldersApiListFolderObjectsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FolderObjectListResponse>;
    /**
     *
     * @summary List folders.
     * @param {FoldersApiListFoldersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolders(requestParameters?: FoldersApiListFoldersRequest, options?: RawAxiosRequestConfig): AxiosPromise<FolderListResponse>;
    /**
     *
     * @summary Scan the object again in the underlying storage, and update its state in our db.
     * @param {FoldersApiRefreshFolderObjectS3MetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshFolderObjectS3Metadata(requestParameters: FoldersApiRefreshFolderObjectS3MetadataRequest, options?: RawAxiosRequestConfig): AxiosPromise<FolderObjectGetResponse>;
    /**
     *
     * @summary Scan the underlying S3 location and update our local representation of it.
     * @param {FoldersApiRescanFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rescanFolder(requestParameters: FoldersApiRescanFolderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * Request parameters for createFolder operation in FoldersApi.
 * @export
 * @interface FoldersApiCreateFolderRequest
 */
export interface FoldersApiCreateFolderRequest {
    /**
     *
     * @type {FolderCreateInputDTO}
     * @memberof FoldersApiCreateFolder
     */
    readonly folderCreateInputDTO: FolderCreateInputDTO;
}
/**
 * Request parameters for createPresignedUrls operation in FoldersApi.
 * @export
 * @interface FoldersApiCreatePresignedUrlsRequest
 */
export interface FoldersApiCreatePresignedUrlsRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiCreatePresignedUrls
     */
    readonly folderId: string;
    /**
     *
     * @type {Array<FolderCreateSignedUrlInputDTOInner>}
     * @memberof FoldersApiCreatePresignedUrls
     */
    readonly folderCreateSignedUrlInputDTOInner: Array<FolderCreateSignedUrlInputDTOInner>;
}
/**
 * Request parameters for deleteFolder operation in FoldersApi.
 * @export
 * @interface FoldersApiDeleteFolderRequest
 */
export interface FoldersApiDeleteFolderRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiDeleteFolder
     */
    readonly folderId: string;
}
/**
 * Request parameters for deleteFolderObject operation in FoldersApi.
 * @export
 * @interface FoldersApiDeleteFolderObjectRequest
 */
export interface FoldersApiDeleteFolderObjectRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiDeleteFolderObject
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiDeleteFolderObject
     */
    readonly objectKey: string;
}
/**
 * Request parameters for getFolder operation in FoldersApi.
 * @export
 * @interface FoldersApiGetFolderRequest
 */
export interface FoldersApiGetFolderRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiGetFolder
     */
    readonly folderId: string;
}
/**
 * Request parameters for getFolderMetadata operation in FoldersApi.
 * @export
 * @interface FoldersApiGetFolderMetadataRequest
 */
export interface FoldersApiGetFolderMetadataRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiGetFolderMetadata
     */
    readonly folderId: string;
}
/**
 * Request parameters for getFolderObject operation in FoldersApi.
 * @export
 * @interface FoldersApiGetFolderObjectRequest
 */
export interface FoldersApiGetFolderObjectRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiGetFolderObject
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiGetFolderObject
     */
    readonly objectKey: string;
}
/**
 * Request parameters for handleAppTaskTrigger operation in FoldersApi.
 * @export
 * @interface FoldersApiHandleAppTaskTriggerRequest
 */
export interface FoldersApiHandleAppTaskTriggerRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiHandleAppTaskTrigger
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiHandleAppTaskTrigger
     */
    readonly appIdentifier: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiHandleAppTaskTrigger
     */
    readonly taskKey: string;
    /**
     *
     * @type {TriggerAppTaskInputDTO}
     * @memberof FoldersApiHandleAppTaskTrigger
     */
    readonly triggerAppTaskInputDTO: TriggerAppTaskInputDTO;
}
/**
 * Request parameters for listFolderObjects operation in FoldersApi.
 * @export
 * @interface FoldersApiListFolderObjectsRequest
 */
export interface FoldersApiListFolderObjectsRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiListFolderObjects
     */
    readonly folderId: string;
    /**
     *
     * @type {number}
     * @memberof FoldersApiListFolderObjects
     */
    readonly offset?: number;
    /**
     *
     * @type {number}
     * @memberof FoldersApiListFolderObjects
     */
    readonly limit?: number;
    /**
     *
     * @type {string}
     * @memberof FoldersApiListFolderObjects
     */
    readonly search?: string;
}
/**
 * Request parameters for listFolders operation in FoldersApi.
 * @export
 * @interface FoldersApiListFoldersRequest
 */
export interface FoldersApiListFoldersRequest {
    /**
     *
     * @type {number}
     * @memberof FoldersApiListFolders
     */
    readonly offset?: number;
    /**
     *
     * @type {number}
     * @memberof FoldersApiListFolders
     */
    readonly limit?: number;
    /**
     *
     * @type {'name-asc' | 'name-desc' | 'createdAt-asc' | 'createdAt-desc' | 'updatedAt-asc' | 'updatedAt-desc'}
     * @memberof FoldersApiListFolders
     */
    readonly sort?: ListFoldersSortEnum;
    /**
     *
     * @type {string}
     * @memberof FoldersApiListFolders
     */
    readonly search?: string;
}
/**
 * Request parameters for refreshFolderObjectS3Metadata operation in FoldersApi.
 * @export
 * @interface FoldersApiRefreshFolderObjectS3MetadataRequest
 */
export interface FoldersApiRefreshFolderObjectS3MetadataRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiRefreshFolderObjectS3Metadata
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiRefreshFolderObjectS3Metadata
     */
    readonly objectKey: string;
}
/**
 * Request parameters for rescanFolder operation in FoldersApi.
 * @export
 * @interface FoldersApiRescanFolderRequest
 */
export interface FoldersApiRescanFolderRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiRescanFolder
     */
    readonly folderId: string;
}
/**
 * FoldersApi - object-oriented interface
 * @export
 * @class FoldersApi
 * @extends {BaseAPI}
 */
export declare class FoldersApi extends BaseAPI {
    /**
     *
     * @summary Create a folder.
     * @param {FoldersApiCreateFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    createFolder(requestParameters: FoldersApiCreateFolderRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FolderCreateResponse, any>>;
    /**
     *
     * @summary Create presigned urls for objects in a folder.
     * @param {FoldersApiCreatePresignedUrlsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    createPresignedUrls(requestParameters: FoldersApiCreatePresignedUrlsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FolderCreateSignedUrlsResponse, any>>;
    /**
     *
     * @summary Delete a folder by id.
     * @param {FoldersApiDeleteFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    deleteFolder(requestParameters: FoldersApiDeleteFolderRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a folder object by folderId and objectKey.
     * @param {FoldersApiDeleteFolderObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    deleteFolderObject(requestParameters: FoldersApiDeleteFolderObjectRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get a folder by id.
     * @param {FoldersApiGetFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    getFolder(requestParameters: FoldersApiGetFolderRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FolderGetResponse, any>>;
    /**
     *
     * @summary Get the metadata for a folder by id.
     * @param {FoldersApiGetFolderMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    getFolderMetadata(requestParameters: FoldersApiGetFolderMetadataRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FolderGetMetadataResponse, any>>;
    /**
     *
     * @summary Get a folder object by folderId and objectKey.
     * @param {FoldersApiGetFolderObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    getFolderObject(requestParameters: FoldersApiGetFolderObjectRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FolderObjectGetResponse, any>>;
    /**
     *
     * @summary Handle app task trigger
     * @param {FoldersApiHandleAppTaskTriggerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    handleAppTaskTrigger(requestParameters: FoldersApiHandleAppTaskTriggerRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary List folder objects by folderId.
     * @param {FoldersApiListFolderObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    listFolderObjects(requestParameters: FoldersApiListFolderObjectsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FolderObjectListResponse, any>>;
    /**
     *
     * @summary List folders.
     * @param {FoldersApiListFoldersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    listFolders(requestParameters?: FoldersApiListFoldersRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FolderListResponse, any>>;
    /**
     *
     * @summary Scan the object again in the underlying storage, and update its state in our db.
     * @param {FoldersApiRefreshFolderObjectS3MetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    refreshFolderObjectS3Metadata(requestParameters: FoldersApiRefreshFolderObjectS3MetadataRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FolderObjectGetResponse, any>>;
    /**
     *
     * @summary Scan the underlying S3 location and update our local representation of it.
     * @param {FoldersApiRescanFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    rescanFolder(requestParameters: FoldersApiRescanFolderRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * @export
 */
export declare const ListFoldersSortEnum: {
    readonly NameAsc: "name-asc";
    readonly NameDesc: "name-desc";
    readonly CreatedAtAsc: "createdAt-asc";
    readonly CreatedAtDesc: "createdAt-desc";
    readonly UpdatedAtAsc: "updatedAt-asc";
    readonly UpdatedAtDesc: "updatedAt-desc";
};
export type ListFoldersSortEnum = typeof ListFoldersSortEnum[keyof typeof ListFoldersSortEnum];
/**
 * ServerApi - axios parameter creator
 * @export
 */
export declare const ServerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get the server settings object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServerSettings: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Reset a setting in the server settings objects.
     * @param {string} settingKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetServerSetting: (settingKey: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Set a setting in the server settings objects.
     * @param {string} settingKey
     * @param {SetSettingInputDTO} setSettingInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setServerSetting: (settingKey: string, setSettingInputDTO: SetSettingInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ServerApi - functional programming interface
 * @export
 */
export declare const ServerApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get the server settings object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServerSettings(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsGetResponse>>;
    /**
     *
     * @summary Reset a setting in the server settings objects.
     * @param {string} settingKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetServerSetting(settingKey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingSetResponse>>;
    /**
     *
     * @summary Set a setting in the server settings objects.
     * @param {string} settingKey
     * @param {SetSettingInputDTO} setSettingInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setServerSetting(settingKey: string, setSettingInputDTO: SetSettingInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingSetResponse>>;
};
/**
 * ServerApi - factory interface
 * @export
 */
export declare const ServerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get the server settings object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServerSettings(options?: RawAxiosRequestConfig): AxiosPromise<SettingsGetResponse>;
    /**
     *
     * @summary Reset a setting in the server settings objects.
     * @param {ServerApiResetServerSettingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetServerSetting(requestParameters: ServerApiResetServerSettingRequest, options?: RawAxiosRequestConfig): AxiosPromise<SettingSetResponse>;
    /**
     *
     * @summary Set a setting in the server settings objects.
     * @param {ServerApiSetServerSettingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setServerSetting(requestParameters: ServerApiSetServerSettingRequest, options?: RawAxiosRequestConfig): AxiosPromise<SettingSetResponse>;
};
/**
 * Request parameters for resetServerSetting operation in ServerApi.
 * @export
 * @interface ServerApiResetServerSettingRequest
 */
export interface ServerApiResetServerSettingRequest {
    /**
     *
     * @type {string}
     * @memberof ServerApiResetServerSetting
     */
    readonly settingKey: string;
}
/**
 * Request parameters for setServerSetting operation in ServerApi.
 * @export
 * @interface ServerApiSetServerSettingRequest
 */
export interface ServerApiSetServerSettingRequest {
    /**
     *
     * @type {string}
     * @memberof ServerApiSetServerSetting
     */
    readonly settingKey: string;
    /**
     *
     * @type {SetSettingInputDTO}
     * @memberof ServerApiSetServerSetting
     */
    readonly setSettingInputDTO: SetSettingInputDTO;
}
/**
 * ServerApi - object-oriented interface
 * @export
 * @class ServerApi
 * @extends {BaseAPI}
 */
export declare class ServerApi extends BaseAPI {
    /**
     *
     * @summary Get the server settings object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    getServerSettings(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SettingsGetResponse, any>>;
    /**
     *
     * @summary Reset a setting in the server settings objects.
     * @param {ServerApiResetServerSettingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    resetServerSetting(requestParameters: ServerApiResetServerSettingRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SettingSetResponse, any>>;
    /**
     *
     * @summary Set a setting in the server settings objects.
     * @param {ServerApiSetServerSettingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    setServerSetting(requestParameters: ServerApiSetServerSettingRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SettingSetResponse, any>>;
}
/**
 * ServerAccessKeysApi - axios parameter creator
 * @export
 */
export declare const ServerAccessKeysApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get server access key by id.
     * @param {string} accessKeyHashId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServerAccessKey: (accessKeyHashId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List server access keys.
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {ListServerAccessKeysSortEnum} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listServerAccessKeys: (offset?: number, limit?: number, sort?: ListServerAccessKeysSortEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Rotate a server access key.
     * @param {string} accessKeyHashId
     * @param {RotateAccessKeyInputDTO} rotateAccessKeyInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rotateServerAccessKey: (accessKeyHashId: string, rotateAccessKeyInputDTO: RotateAccessKeyInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ServerAccessKeysApi - functional programming interface
 * @export
 */
export declare const ServerAccessKeysApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get server access key by id.
     * @param {string} accessKeyHashId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServerAccessKey(accessKeyHashId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessKeyGetResponse>>;
    /**
     *
     * @summary List server access keys.
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {ListServerAccessKeysSortEnum} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listServerAccessKeys(offset?: number, limit?: number, sort?: ListServerAccessKeysSortEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessKeyListResponse>>;
    /**
     *
     * @summary Rotate a server access key.
     * @param {string} accessKeyHashId
     * @param {RotateAccessKeyInputDTO} rotateAccessKeyInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rotateServerAccessKey(accessKeyHashId: string, rotateAccessKeyInputDTO: RotateAccessKeyInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessKeyRotateResponse>>;
};
/**
 * ServerAccessKeysApi - factory interface
 * @export
 */
export declare const ServerAccessKeysApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get server access key by id.
     * @param {ServerAccessKeysApiGetServerAccessKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServerAccessKey(requestParameters: ServerAccessKeysApiGetServerAccessKeyRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccessKeyGetResponse>;
    /**
     *
     * @summary List server access keys.
     * @param {ServerAccessKeysApiListServerAccessKeysRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listServerAccessKeys(requestParameters?: ServerAccessKeysApiListServerAccessKeysRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccessKeyListResponse>;
    /**
     *
     * @summary Rotate a server access key.
     * @param {ServerAccessKeysApiRotateServerAccessKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rotateServerAccessKey(requestParameters: ServerAccessKeysApiRotateServerAccessKeyRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccessKeyRotateResponse>;
};
/**
 * Request parameters for getServerAccessKey operation in ServerAccessKeysApi.
 * @export
 * @interface ServerAccessKeysApiGetServerAccessKeyRequest
 */
export interface ServerAccessKeysApiGetServerAccessKeyRequest {
    /**
     *
     * @type {string}
     * @memberof ServerAccessKeysApiGetServerAccessKey
     */
    readonly accessKeyHashId: string;
}
/**
 * Request parameters for listServerAccessKeys operation in ServerAccessKeysApi.
 * @export
 * @interface ServerAccessKeysApiListServerAccessKeysRequest
 */
export interface ServerAccessKeysApiListServerAccessKeysRequest {
    /**
     *
     * @type {number}
     * @memberof ServerAccessKeysApiListServerAccessKeys
     */
    readonly offset?: number;
    /**
     *
     * @type {number}
     * @memberof ServerAccessKeysApiListServerAccessKeys
     */
    readonly limit?: number;
    /**
     *
     * @type {'accessKeyId-asc' | 'accessKeyId-desc' | 'accessKeyHashId-asc' | 'accessKeyHashId-desc' | 'endpoint-asc' | 'endpoint-desc' | 'region-asc' | 'region-desc' | 'updatedAt-asc' | 'updatedAt-desc'}
     * @memberof ServerAccessKeysApiListServerAccessKeys
     */
    readonly sort?: ListServerAccessKeysSortEnum;
}
/**
 * Request parameters for rotateServerAccessKey operation in ServerAccessKeysApi.
 * @export
 * @interface ServerAccessKeysApiRotateServerAccessKeyRequest
 */
export interface ServerAccessKeysApiRotateServerAccessKeyRequest {
    /**
     *
     * @type {string}
     * @memberof ServerAccessKeysApiRotateServerAccessKey
     */
    readonly accessKeyHashId: string;
    /**
     *
     * @type {RotateAccessKeyInputDTO}
     * @memberof ServerAccessKeysApiRotateServerAccessKey
     */
    readonly rotateAccessKeyInputDTO: RotateAccessKeyInputDTO;
}
/**
 * ServerAccessKeysApi - object-oriented interface
 * @export
 * @class ServerAccessKeysApi
 * @extends {BaseAPI}
 */
export declare class ServerAccessKeysApi extends BaseAPI {
    /**
     *
     * @summary Get server access key by id.
     * @param {ServerAccessKeysApiGetServerAccessKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerAccessKeysApi
     */
    getServerAccessKey(requestParameters: ServerAccessKeysApiGetServerAccessKeyRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessKeyGetResponse, any>>;
    /**
     *
     * @summary List server access keys.
     * @param {ServerAccessKeysApiListServerAccessKeysRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerAccessKeysApi
     */
    listServerAccessKeys(requestParameters?: ServerAccessKeysApiListServerAccessKeysRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessKeyListResponse, any>>;
    /**
     *
     * @summary Rotate a server access key.
     * @param {ServerAccessKeysApiRotateServerAccessKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerAccessKeysApi
     */
    rotateServerAccessKey(requestParameters: ServerAccessKeysApiRotateServerAccessKeyRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessKeyRotateResponse, any>>;
}
/**
 * @export
 */
export declare const ListServerAccessKeysSortEnum: {
    readonly AccessKeyIdAsc: "accessKeyId-asc";
    readonly AccessKeyIdDesc: "accessKeyId-desc";
    readonly AccessKeyHashIdAsc: "accessKeyHashId-asc";
    readonly AccessKeyHashIdDesc: "accessKeyHashId-desc";
    readonly EndpointAsc: "endpoint-asc";
    readonly EndpointDesc: "endpoint-desc";
    readonly RegionAsc: "region-asc";
    readonly RegionDesc: "region-desc";
    readonly UpdatedAtAsc: "updatedAt-asc";
    readonly UpdatedAtDesc: "updatedAt-desc";
};
export type ListServerAccessKeysSortEnum = typeof ListServerAccessKeysSortEnum[keyof typeof ListServerAccessKeysSortEnum];
/**
 * ServerEventsApi - axios parameter creator
 * @export
 */
export declare const ServerEventsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get an event by id.
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvent: (eventId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List events.
     * @param {ListEventsSortEnum} [sort]
     * @param {string} [folderId]
     * @param {string} [objectKey]
     * @param {string} [search]
     * @param {ListEventsIncludeTraceEnum} [includeTrace]
     * @param {ListEventsIncludeDebugEnum} [includeDebug]
     * @param {ListEventsIncludeInfoEnum} [includeInfo]
     * @param {ListEventsIncludeWarningEnum} [includeWarning]
     * @param {ListEventsIncludeErrorEnum} [includeError]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEvents: (sort?: ListEventsSortEnum, folderId?: string, objectKey?: string, search?: string, includeTrace?: ListEventsIncludeTraceEnum, includeDebug?: ListEventsIncludeDebugEnum, includeInfo?: ListEventsIncludeInfoEnum, includeWarning?: ListEventsIncludeWarningEnum, includeError?: ListEventsIncludeErrorEnum, offset?: number, limit?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ServerEventsApi - functional programming interface
 * @export
 */
export declare const ServerEventsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get an event by id.
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvent(eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventGetResponse>>;
    /**
     *
     * @summary List events.
     * @param {ListEventsSortEnum} [sort]
     * @param {string} [folderId]
     * @param {string} [objectKey]
     * @param {string} [search]
     * @param {ListEventsIncludeTraceEnum} [includeTrace]
     * @param {ListEventsIncludeDebugEnum} [includeDebug]
     * @param {ListEventsIncludeInfoEnum} [includeInfo]
     * @param {ListEventsIncludeWarningEnum} [includeWarning]
     * @param {ListEventsIncludeErrorEnum} [includeError]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEvents(sort?: ListEventsSortEnum, folderId?: string, objectKey?: string, search?: string, includeTrace?: ListEventsIncludeTraceEnum, includeDebug?: ListEventsIncludeDebugEnum, includeInfo?: ListEventsIncludeInfoEnum, includeWarning?: ListEventsIncludeWarningEnum, includeError?: ListEventsIncludeErrorEnum, offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventListResponse>>;
};
/**
 * ServerEventsApi - factory interface
 * @export
 */
export declare const ServerEventsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get an event by id.
     * @param {ServerEventsApiGetEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvent(requestParameters: ServerEventsApiGetEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<EventGetResponse>;
    /**
     *
     * @summary List events.
     * @param {ServerEventsApiListEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEvents(requestParameters?: ServerEventsApiListEventsRequest, options?: RawAxiosRequestConfig): AxiosPromise<EventListResponse>;
};
/**
 * Request parameters for getEvent operation in ServerEventsApi.
 * @export
 * @interface ServerEventsApiGetEventRequest
 */
export interface ServerEventsApiGetEventRequest {
    /**
     *
     * @type {string}
     * @memberof ServerEventsApiGetEvent
     */
    readonly eventId: string;
}
/**
 * Request parameters for listEvents operation in ServerEventsApi.
 * @export
 * @interface ServerEventsApiListEventsRequest
 */
export interface ServerEventsApiListEventsRequest {
    /**
     *
     * @type {'createdAt-asc' | 'createdAt-desc' | 'updatedAt-asc' | 'updatedAt-desc'}
     * @memberof ServerEventsApiListEvents
     */
    readonly sort?: ListEventsSortEnum;
    /**
     *
     * @type {string}
     * @memberof ServerEventsApiListEvents
     */
    readonly folderId?: string;
    /**
     *
     * @type {string}
     * @memberof ServerEventsApiListEvents
     */
    readonly objectKey?: string;
    /**
     *
     * @type {string}
     * @memberof ServerEventsApiListEvents
     */
    readonly search?: string;
    /**
     *
     * @type {'true'}
     * @memberof ServerEventsApiListEvents
     */
    readonly includeTrace?: ListEventsIncludeTraceEnum;
    /**
     *
     * @type {'true'}
     * @memberof ServerEventsApiListEvents
     */
    readonly includeDebug?: ListEventsIncludeDebugEnum;
    /**
     *
     * @type {'true'}
     * @memberof ServerEventsApiListEvents
     */
    readonly includeInfo?: ListEventsIncludeInfoEnum;
    /**
     *
     * @type {'true'}
     * @memberof ServerEventsApiListEvents
     */
    readonly includeWarning?: ListEventsIncludeWarningEnum;
    /**
     *
     * @type {'true'}
     * @memberof ServerEventsApiListEvents
     */
    readonly includeError?: ListEventsIncludeErrorEnum;
    /**
     *
     * @type {number}
     * @memberof ServerEventsApiListEvents
     */
    readonly offset?: number;
    /**
     *
     * @type {number}
     * @memberof ServerEventsApiListEvents
     */
    readonly limit?: number;
}
/**
 * ServerEventsApi - object-oriented interface
 * @export
 * @class ServerEventsApi
 * @extends {BaseAPI}
 */
export declare class ServerEventsApi extends BaseAPI {
    /**
     *
     * @summary Get an event by id.
     * @param {ServerEventsApiGetEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerEventsApi
     */
    getEvent(requestParameters: ServerEventsApiGetEventRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventGetResponse, any>>;
    /**
     *
     * @summary List events.
     * @param {ServerEventsApiListEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerEventsApi
     */
    listEvents(requestParameters?: ServerEventsApiListEventsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EventListResponse, any>>;
}
/**
 * @export
 */
export declare const ListEventsSortEnum: {
    readonly CreatedAtAsc: "createdAt-asc";
    readonly CreatedAtDesc: "createdAt-desc";
    readonly UpdatedAtAsc: "updatedAt-asc";
    readonly UpdatedAtDesc: "updatedAt-desc";
};
export type ListEventsSortEnum = typeof ListEventsSortEnum[keyof typeof ListEventsSortEnum];
/**
 * @export
 */
export declare const ListEventsIncludeTraceEnum: {
    readonly True: "true";
};
export type ListEventsIncludeTraceEnum = typeof ListEventsIncludeTraceEnum[keyof typeof ListEventsIncludeTraceEnum];
/**
 * @export
 */
export declare const ListEventsIncludeDebugEnum: {
    readonly True: "true";
};
export type ListEventsIncludeDebugEnum = typeof ListEventsIncludeDebugEnum[keyof typeof ListEventsIncludeDebugEnum];
/**
 * @export
 */
export declare const ListEventsIncludeInfoEnum: {
    readonly True: "true";
};
export type ListEventsIncludeInfoEnum = typeof ListEventsIncludeInfoEnum[keyof typeof ListEventsIncludeInfoEnum];
/**
 * @export
 */
export declare const ListEventsIncludeWarningEnum: {
    readonly True: "true";
};
export type ListEventsIncludeWarningEnum = typeof ListEventsIncludeWarningEnum[keyof typeof ListEventsIncludeWarningEnum];
/**
 * @export
 */
export declare const ListEventsIncludeErrorEnum: {
    readonly True: "true";
};
export type ListEventsIncludeErrorEnum = typeof ListEventsIncludeErrorEnum[keyof typeof ListEventsIncludeErrorEnum];
/**
 * ServerStorageLocationApi - axios parameter creator
 * @export
 */
export declare const ServerStorageLocationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete any set server storage location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteServerStorageLocation: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get the server storage location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServerStorageLocation: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a new server provision.
     * @param {ServerStorageLocationInputDTO} serverStorageLocationInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setServerStorageLocation: (serverStorageLocationInputDTO: ServerStorageLocationInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ServerStorageLocationApi - functional programming interface
 * @export
 */
export declare const ServerStorageLocationApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete any set server storage location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteServerStorageLocation(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get the server storage location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServerStorageLocation(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServerStorageLocationGetResponse>>;
    /**
     *
     * @summary Create a new server provision.
     * @param {ServerStorageLocationInputDTO} serverStorageLocationInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setServerStorageLocation(serverStorageLocationInputDTO: ServerStorageLocationInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServerStorageLocationGetResponse>>;
};
/**
 * ServerStorageLocationApi - factory interface
 * @export
 */
export declare const ServerStorageLocationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Delete any set server storage location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteServerStorageLocation(options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get the server storage location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServerStorageLocation(options?: RawAxiosRequestConfig): AxiosPromise<ServerStorageLocationGetResponse>;
    /**
     *
     * @summary Create a new server provision.
     * @param {ServerStorageLocationApiSetServerStorageLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setServerStorageLocation(requestParameters: ServerStorageLocationApiSetServerStorageLocationRequest, options?: RawAxiosRequestConfig): AxiosPromise<ServerStorageLocationGetResponse>;
};
/**
 * Request parameters for setServerStorageLocation operation in ServerStorageLocationApi.
 * @export
 * @interface ServerStorageLocationApiSetServerStorageLocationRequest
 */
export interface ServerStorageLocationApiSetServerStorageLocationRequest {
    /**
     *
     * @type {ServerStorageLocationInputDTO}
     * @memberof ServerStorageLocationApiSetServerStorageLocation
     */
    readonly serverStorageLocationInputDTO: ServerStorageLocationInputDTO;
}
/**
 * ServerStorageLocationApi - object-oriented interface
 * @export
 * @class ServerStorageLocationApi
 * @extends {BaseAPI}
 */
export declare class ServerStorageLocationApi extends BaseAPI {
    /**
     *
     * @summary Delete any set server storage location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerStorageLocationApi
     */
    deleteServerStorageLocation(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get the server storage location.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerStorageLocationApi
     */
    getServerStorageLocation(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ServerStorageLocationGetResponse, any>>;
    /**
     *
     * @summary Create a new server provision.
     * @param {ServerStorageLocationApiSetServerStorageLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerStorageLocationApi
     */
    setServerStorageLocation(requestParameters: ServerStorageLocationApiSetServerStorageLocationRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ServerStorageLocationGetResponse, any>>;
}
/**
 * ServerTasksApi - axios parameter creator
 * @export
 */
export declare const ServerTasksApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get a task by id.
     * @param {string} taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTask: (taskId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List tasks.
     * @param {string} [objectKey]
     * @param {ListTasksSortEnum} [sort]
     * @param {string} [search]
     * @param {ListTasksIncludeWaitingEnum} [includeWaiting]
     * @param {ListTasksIncludeRunningEnum} [includeRunning]
     * @param {ListTasksIncludeCompleteEnum} [includeComplete]
     * @param {ListTasksIncludeFailedEnum} [includeFailed]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [folderId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTasks: (objectKey?: string, sort?: ListTasksSortEnum, search?: string, includeWaiting?: ListTasksIncludeWaitingEnum, includeRunning?: ListTasksIncludeRunningEnum, includeComplete?: ListTasksIncludeCompleteEnum, includeFailed?: ListTasksIncludeFailedEnum, offset?: number, limit?: number, folderId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ServerTasksApi - functional programming interface
 * @export
 */
export declare const ServerTasksApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get a task by id.
     * @param {string} taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTask(taskId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskGetResponse>>;
    /**
     *
     * @summary List tasks.
     * @param {string} [objectKey]
     * @param {ListTasksSortEnum} [sort]
     * @param {string} [search]
     * @param {ListTasksIncludeWaitingEnum} [includeWaiting]
     * @param {ListTasksIncludeRunningEnum} [includeRunning]
     * @param {ListTasksIncludeCompleteEnum} [includeComplete]
     * @param {ListTasksIncludeFailedEnum} [includeFailed]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [folderId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTasks(objectKey?: string, sort?: ListTasksSortEnum, search?: string, includeWaiting?: ListTasksIncludeWaitingEnum, includeRunning?: ListTasksIncludeRunningEnum, includeComplete?: ListTasksIncludeCompleteEnum, includeFailed?: ListTasksIncludeFailedEnum, offset?: number, limit?: number, folderId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskListResponse>>;
};
/**
 * ServerTasksApi - factory interface
 * @export
 */
export declare const ServerTasksApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get a task by id.
     * @param {ServerTasksApiGetTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTask(requestParameters: ServerTasksApiGetTaskRequest, options?: RawAxiosRequestConfig): AxiosPromise<TaskGetResponse>;
    /**
     *
     * @summary List tasks.
     * @param {ServerTasksApiListTasksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTasks(requestParameters?: ServerTasksApiListTasksRequest, options?: RawAxiosRequestConfig): AxiosPromise<TaskListResponse>;
};
/**
 * Request parameters for getTask operation in ServerTasksApi.
 * @export
 * @interface ServerTasksApiGetTaskRequest
 */
export interface ServerTasksApiGetTaskRequest {
    /**
     *
     * @type {string}
     * @memberof ServerTasksApiGetTask
     */
    readonly taskId: string;
}
/**
 * Request parameters for listTasks operation in ServerTasksApi.
 * @export
 * @interface ServerTasksApiListTasksRequest
 */
export interface ServerTasksApiListTasksRequest {
    /**
     *
     * @type {string}
     * @memberof ServerTasksApiListTasks
     */
    readonly objectKey?: string;
    /**
     *
     * @type {'createdAt-asc' | 'createdAt-desc' | 'updatedAt-asc' | 'updatedAt-desc'}
     * @memberof ServerTasksApiListTasks
     */
    readonly sort?: ListTasksSortEnum;
    /**
     *
     * @type {string}
     * @memberof ServerTasksApiListTasks
     */
    readonly search?: string;
    /**
     *
     * @type {'true'}
     * @memberof ServerTasksApiListTasks
     */
    readonly includeWaiting?: ListTasksIncludeWaitingEnum;
    /**
     *
     * @type {'true'}
     * @memberof ServerTasksApiListTasks
     */
    readonly includeRunning?: ListTasksIncludeRunningEnum;
    /**
     *
     * @type {'true'}
     * @memberof ServerTasksApiListTasks
     */
    readonly includeComplete?: ListTasksIncludeCompleteEnum;
    /**
     *
     * @type {'true'}
     * @memberof ServerTasksApiListTasks
     */
    readonly includeFailed?: ListTasksIncludeFailedEnum;
    /**
     *
     * @type {number}
     * @memberof ServerTasksApiListTasks
     */
    readonly offset?: number;
    /**
     *
     * @type {number}
     * @memberof ServerTasksApiListTasks
     */
    readonly limit?: number;
    /**
     *
     * @type {string}
     * @memberof ServerTasksApiListTasks
     */
    readonly folderId?: string;
}
/**
 * ServerTasksApi - object-oriented interface
 * @export
 * @class ServerTasksApi
 * @extends {BaseAPI}
 */
export declare class ServerTasksApi extends BaseAPI {
    /**
     *
     * @summary Get a task by id.
     * @param {ServerTasksApiGetTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerTasksApi
     */
    getTask(requestParameters: ServerTasksApiGetTaskRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TaskGetResponse, any>>;
    /**
     *
     * @summary List tasks.
     * @param {ServerTasksApiListTasksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerTasksApi
     */
    listTasks(requestParameters?: ServerTasksApiListTasksRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TaskListResponse, any>>;
}
/**
 * @export
 */
export declare const ListTasksSortEnum: {
    readonly CreatedAtAsc: "createdAt-asc";
    readonly CreatedAtDesc: "createdAt-desc";
    readonly UpdatedAtAsc: "updatedAt-asc";
    readonly UpdatedAtDesc: "updatedAt-desc";
};
export type ListTasksSortEnum = typeof ListTasksSortEnum[keyof typeof ListTasksSortEnum];
/**
 * @export
 */
export declare const ListTasksIncludeWaitingEnum: {
    readonly True: "true";
};
export type ListTasksIncludeWaitingEnum = typeof ListTasksIncludeWaitingEnum[keyof typeof ListTasksIncludeWaitingEnum];
/**
 * @export
 */
export declare const ListTasksIncludeRunningEnum: {
    readonly True: "true";
};
export type ListTasksIncludeRunningEnum = typeof ListTasksIncludeRunningEnum[keyof typeof ListTasksIncludeRunningEnum];
/**
 * @export
 */
export declare const ListTasksIncludeCompleteEnum: {
    readonly True: "true";
};
export type ListTasksIncludeCompleteEnum = typeof ListTasksIncludeCompleteEnum[keyof typeof ListTasksIncludeCompleteEnum];
/**
 * @export
 */
export declare const ListTasksIncludeFailedEnum: {
    readonly True: "true";
};
export type ListTasksIncludeFailedEnum = typeof ListTasksIncludeFailedEnum[keyof typeof ListTasksIncludeFailedEnum];
/**
 * TasksApi - axios parameter creator
 * @export
 */
export declare const TasksApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get a folder task by id.
     * @param {string} folderId
     * @param {string} taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderTask: (folderId: string, taskId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List tasks.
     * @param {string} folderId
     * @param {string} [objectKey]
     * @param {ListFolderTasksSortEnum} [sort]
     * @param {string} [search]
     * @param {ListFolderTasksIncludeWaitingEnum} [includeWaiting]
     * @param {ListFolderTasksIncludeRunningEnum} [includeRunning]
     * @param {ListFolderTasksIncludeCompleteEnum} [includeComplete]
     * @param {ListFolderTasksIncludeFailedEnum} [includeFailed]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolderTasks: (folderId: string, objectKey?: string, sort?: ListFolderTasksSortEnum, search?: string, includeWaiting?: ListFolderTasksIncludeWaitingEnum, includeRunning?: ListFolderTasksIncludeRunningEnum, includeComplete?: ListFolderTasksIncludeCompleteEnum, includeFailed?: ListFolderTasksIncludeFailedEnum, offset?: number, limit?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TasksApi - functional programming interface
 * @export
 */
export declare const TasksApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get a folder task by id.
     * @param {string} folderId
     * @param {string} taskId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderTask(folderId: string, taskId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskGetResponse>>;
    /**
     *
     * @summary List tasks.
     * @param {string} folderId
     * @param {string} [objectKey]
     * @param {ListFolderTasksSortEnum} [sort]
     * @param {string} [search]
     * @param {ListFolderTasksIncludeWaitingEnum} [includeWaiting]
     * @param {ListFolderTasksIncludeRunningEnum} [includeRunning]
     * @param {ListFolderTasksIncludeCompleteEnum} [includeComplete]
     * @param {ListFolderTasksIncludeFailedEnum} [includeFailed]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolderTasks(folderId: string, objectKey?: string, sort?: ListFolderTasksSortEnum, search?: string, includeWaiting?: ListFolderTasksIncludeWaitingEnum, includeRunning?: ListFolderTasksIncludeRunningEnum, includeComplete?: ListFolderTasksIncludeCompleteEnum, includeFailed?: ListFolderTasksIncludeFailedEnum, offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskListResponse>>;
};
/**
 * TasksApi - factory interface
 * @export
 */
export declare const TasksApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get a folder task by id.
     * @param {TasksApiGetFolderTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderTask(requestParameters: TasksApiGetFolderTaskRequest, options?: RawAxiosRequestConfig): AxiosPromise<TaskGetResponse>;
    /**
     *
     * @summary List tasks.
     * @param {TasksApiListFolderTasksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolderTasks(requestParameters: TasksApiListFolderTasksRequest, options?: RawAxiosRequestConfig): AxiosPromise<TaskListResponse>;
};
/**
 * Request parameters for getFolderTask operation in TasksApi.
 * @export
 * @interface TasksApiGetFolderTaskRequest
 */
export interface TasksApiGetFolderTaskRequest {
    /**
     *
     * @type {string}
     * @memberof TasksApiGetFolderTask
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof TasksApiGetFolderTask
     */
    readonly taskId: string;
}
/**
 * Request parameters for listFolderTasks operation in TasksApi.
 * @export
 * @interface TasksApiListFolderTasksRequest
 */
export interface TasksApiListFolderTasksRequest {
    /**
     *
     * @type {string}
     * @memberof TasksApiListFolderTasks
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof TasksApiListFolderTasks
     */
    readonly objectKey?: string;
    /**
     *
     * @type {'createdAt-asc' | 'createdAt-desc' | 'updatedAt-asc' | 'updatedAt-desc'}
     * @memberof TasksApiListFolderTasks
     */
    readonly sort?: ListFolderTasksSortEnum;
    /**
     *
     * @type {string}
     * @memberof TasksApiListFolderTasks
     */
    readonly search?: string;
    /**
     *
     * @type {'true'}
     * @memberof TasksApiListFolderTasks
     */
    readonly includeWaiting?: ListFolderTasksIncludeWaitingEnum;
    /**
     *
     * @type {'true'}
     * @memberof TasksApiListFolderTasks
     */
    readonly includeRunning?: ListFolderTasksIncludeRunningEnum;
    /**
     *
     * @type {'true'}
     * @memberof TasksApiListFolderTasks
     */
    readonly includeComplete?: ListFolderTasksIncludeCompleteEnum;
    /**
     *
     * @type {'true'}
     * @memberof TasksApiListFolderTasks
     */
    readonly includeFailed?: ListFolderTasksIncludeFailedEnum;
    /**
     *
     * @type {number}
     * @memberof TasksApiListFolderTasks
     */
    readonly offset?: number;
    /**
     *
     * @type {number}
     * @memberof TasksApiListFolderTasks
     */
    readonly limit?: number;
}
/**
 * TasksApi - object-oriented interface
 * @export
 * @class TasksApi
 * @extends {BaseAPI}
 */
export declare class TasksApi extends BaseAPI {
    /**
     *
     * @summary Get a folder task by id.
     * @param {TasksApiGetFolderTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    getFolderTask(requestParameters: TasksApiGetFolderTaskRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TaskGetResponse, any>>;
    /**
     *
     * @summary List tasks.
     * @param {TasksApiListFolderTasksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    listFolderTasks(requestParameters: TasksApiListFolderTasksRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TaskListResponse, any>>;
}
/**
 * @export
 */
export declare const ListFolderTasksSortEnum: {
    readonly CreatedAtAsc: "createdAt-asc";
    readonly CreatedAtDesc: "createdAt-desc";
    readonly UpdatedAtAsc: "updatedAt-asc";
    readonly UpdatedAtDesc: "updatedAt-desc";
};
export type ListFolderTasksSortEnum = typeof ListFolderTasksSortEnum[keyof typeof ListFolderTasksSortEnum];
/**
 * @export
 */
export declare const ListFolderTasksIncludeWaitingEnum: {
    readonly True: "true";
};
export type ListFolderTasksIncludeWaitingEnum = typeof ListFolderTasksIncludeWaitingEnum[keyof typeof ListFolderTasksIncludeWaitingEnum];
/**
 * @export
 */
export declare const ListFolderTasksIncludeRunningEnum: {
    readonly True: "true";
};
export type ListFolderTasksIncludeRunningEnum = typeof ListFolderTasksIncludeRunningEnum[keyof typeof ListFolderTasksIncludeRunningEnum];
/**
 * @export
 */
export declare const ListFolderTasksIncludeCompleteEnum: {
    readonly True: "true";
};
export type ListFolderTasksIncludeCompleteEnum = typeof ListFolderTasksIncludeCompleteEnum[keyof typeof ListFolderTasksIncludeCompleteEnum];
/**
 * @export
 */
export declare const ListFolderTasksIncludeFailedEnum: {
    readonly True: "true";
};
export type ListFolderTasksIncludeFailedEnum = typeof ListFolderTasksIncludeFailedEnum[keyof typeof ListFolderTasksIncludeFailedEnum];
/**
 * UserStorageProvisionsApi - axios parameter creator
 * @export
 */
export declare const UserStorageProvisionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a new user storage provision.
     * @param {UserStorageProvisionInputDTO} userStorageProvisionInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserStorageProvision: (userStorageProvisionInputDTO: UserStorageProvisionInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a server provision by id.
     * @param {string} userStorageProvisionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserStorageProvision: (userStorageProvisionId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a user storage provision by id.
     * @param {string} userStorageProvisionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserStorageProvision: (userStorageProvisionId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List the user storage provisions.
     * @param {ListUserStorageProvisionsProvisionTypeEnum} [provisionType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserStorageProvisions: (provisionType?: ListUserStorageProvisionsProvisionTypeEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a server provision by id.
     * @param {string} userStorageProvisionId
     * @param {UserStorageProvisionInputDTO} userStorageProvisionInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserStorageProvision: (userStorageProvisionId: string, userStorageProvisionInputDTO: UserStorageProvisionInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UserStorageProvisionsApi - functional programming interface
 * @export
 */
export declare const UserStorageProvisionsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a new user storage provision.
     * @param {UserStorageProvisionInputDTO} userStorageProvisionInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserStorageProvision(userStorageProvisionInputDTO: UserStorageProvisionInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStorageProvisionListResponse>>;
    /**
     *
     * @summary Delete a server provision by id.
     * @param {string} userStorageProvisionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserStorageProvision(userStorageProvisionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStorageProvisionListResponse>>;
    /**
     *
     * @summary Get a user storage provision by id.
     * @param {string} userStorageProvisionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserStorageProvision(userStorageProvisionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStorageProvisionGetResponse>>;
    /**
     *
     * @summary List the user storage provisions.
     * @param {ListUserStorageProvisionsProvisionTypeEnum} [provisionType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserStorageProvisions(provisionType?: ListUserStorageProvisionsProvisionTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStorageProvisionListResponse>>;
    /**
     *
     * @summary Update a server provision by id.
     * @param {string} userStorageProvisionId
     * @param {UserStorageProvisionInputDTO} userStorageProvisionInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserStorageProvision(userStorageProvisionId: string, userStorageProvisionInputDTO: UserStorageProvisionInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStorageProvisionListResponse>>;
};
/**
 * UserStorageProvisionsApi - factory interface
 * @export
 */
export declare const UserStorageProvisionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create a new user storage provision.
     * @param {UserStorageProvisionsApiCreateUserStorageProvisionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserStorageProvision(requestParameters: UserStorageProvisionsApiCreateUserStorageProvisionRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserStorageProvisionListResponse>;
    /**
     *
     * @summary Delete a server provision by id.
     * @param {UserStorageProvisionsApiDeleteUserStorageProvisionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserStorageProvision(requestParameters: UserStorageProvisionsApiDeleteUserStorageProvisionRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserStorageProvisionListResponse>;
    /**
     *
     * @summary Get a user storage provision by id.
     * @param {UserStorageProvisionsApiGetUserStorageProvisionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserStorageProvision(requestParameters: UserStorageProvisionsApiGetUserStorageProvisionRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserStorageProvisionGetResponse>;
    /**
     *
     * @summary List the user storage provisions.
     * @param {UserStorageProvisionsApiListUserStorageProvisionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserStorageProvisions(requestParameters?: UserStorageProvisionsApiListUserStorageProvisionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserStorageProvisionListResponse>;
    /**
     *
     * @summary Update a server provision by id.
     * @param {UserStorageProvisionsApiUpdateUserStorageProvisionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserStorageProvision(requestParameters: UserStorageProvisionsApiUpdateUserStorageProvisionRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserStorageProvisionListResponse>;
};
/**
 * Request parameters for createUserStorageProvision operation in UserStorageProvisionsApi.
 * @export
 * @interface UserStorageProvisionsApiCreateUserStorageProvisionRequest
 */
export interface UserStorageProvisionsApiCreateUserStorageProvisionRequest {
    /**
     *
     * @type {UserStorageProvisionInputDTO}
     * @memberof UserStorageProvisionsApiCreateUserStorageProvision
     */
    readonly userStorageProvisionInputDTO: UserStorageProvisionInputDTO;
}
/**
 * Request parameters for deleteUserStorageProvision operation in UserStorageProvisionsApi.
 * @export
 * @interface UserStorageProvisionsApiDeleteUserStorageProvisionRequest
 */
export interface UserStorageProvisionsApiDeleteUserStorageProvisionRequest {
    /**
     *
     * @type {string}
     * @memberof UserStorageProvisionsApiDeleteUserStorageProvision
     */
    readonly userStorageProvisionId: string;
}
/**
 * Request parameters for getUserStorageProvision operation in UserStorageProvisionsApi.
 * @export
 * @interface UserStorageProvisionsApiGetUserStorageProvisionRequest
 */
export interface UserStorageProvisionsApiGetUserStorageProvisionRequest {
    /**
     *
     * @type {string}
     * @memberof UserStorageProvisionsApiGetUserStorageProvision
     */
    readonly userStorageProvisionId: string;
}
/**
 * Request parameters for listUserStorageProvisions operation in UserStorageProvisionsApi.
 * @export
 * @interface UserStorageProvisionsApiListUserStorageProvisionsRequest
 */
export interface UserStorageProvisionsApiListUserStorageProvisionsRequest {
    /**
     *
     * @type {'CONTENT' | 'METADATA' | 'REDUNDANCY'}
     * @memberof UserStorageProvisionsApiListUserStorageProvisions
     */
    readonly provisionType?: ListUserStorageProvisionsProvisionTypeEnum;
}
/**
 * Request parameters for updateUserStorageProvision operation in UserStorageProvisionsApi.
 * @export
 * @interface UserStorageProvisionsApiUpdateUserStorageProvisionRequest
 */
export interface UserStorageProvisionsApiUpdateUserStorageProvisionRequest {
    /**
     *
     * @type {string}
     * @memberof UserStorageProvisionsApiUpdateUserStorageProvision
     */
    readonly userStorageProvisionId: string;
    /**
     *
     * @type {UserStorageProvisionInputDTO}
     * @memberof UserStorageProvisionsApiUpdateUserStorageProvision
     */
    readonly userStorageProvisionInputDTO: UserStorageProvisionInputDTO;
}
/**
 * UserStorageProvisionsApi - object-oriented interface
 * @export
 * @class UserStorageProvisionsApi
 * @extends {BaseAPI}
 */
export declare class UserStorageProvisionsApi extends BaseAPI {
    /**
     *
     * @summary Create a new user storage provision.
     * @param {UserStorageProvisionsApiCreateUserStorageProvisionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserStorageProvisionsApi
     */
    createUserStorageProvision(requestParameters: UserStorageProvisionsApiCreateUserStorageProvisionRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserStorageProvisionListResponse, any>>;
    /**
     *
     * @summary Delete a server provision by id.
     * @param {UserStorageProvisionsApiDeleteUserStorageProvisionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserStorageProvisionsApi
     */
    deleteUserStorageProvision(requestParameters: UserStorageProvisionsApiDeleteUserStorageProvisionRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserStorageProvisionListResponse, any>>;
    /**
     *
     * @summary Get a user storage provision by id.
     * @param {UserStorageProvisionsApiGetUserStorageProvisionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserStorageProvisionsApi
     */
    getUserStorageProvision(requestParameters: UserStorageProvisionsApiGetUserStorageProvisionRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserStorageProvisionGetResponse, any>>;
    /**
     *
     * @summary List the user storage provisions.
     * @param {UserStorageProvisionsApiListUserStorageProvisionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserStorageProvisionsApi
     */
    listUserStorageProvisions(requestParameters?: UserStorageProvisionsApiListUserStorageProvisionsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserStorageProvisionListResponse, any>>;
    /**
     *
     * @summary Update a server provision by id.
     * @param {UserStorageProvisionsApiUpdateUserStorageProvisionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserStorageProvisionsApi
     */
    updateUserStorageProvision(requestParameters: UserStorageProvisionsApiUpdateUserStorageProvisionRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserStorageProvisionListResponse, any>>;
}
/**
 * @export
 */
export declare const ListUserStorageProvisionsProvisionTypeEnum: {
    readonly Content: "CONTENT";
    readonly Metadata: "METADATA";
    readonly Redundancy: "REDUNDANCY";
};
export type ListUserStorageProvisionsProvisionTypeEnum = typeof ListUserStorageProvisionsProvisionTypeEnum[keyof typeof ListUserStorageProvisionsProvisionTypeEnum];
/**
 * UsersApi - axios parameter creator
 * @export
 */
export declare const UsersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a user.
     * @param {UserCreateInputDTO} userCreateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser: (userCreateInputDTO: UserCreateInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a server user by id.
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser: (userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a user by id.
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: (userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List the users.
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {boolean} [isAdmin]
     * @param {ListUsersSortEnum} [sort]
     * @param {string} [search]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers: (offset?: number, limit?: number, isAdmin?: boolean, sort?: ListUsersSortEnum, search?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a user.
     * @param {string} userId
     * @param {UserUpdateInputDTO} userUpdateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser: (userId: string, userUpdateInputDTO: UserUpdateInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a user.
     * @param {UserCreateInputDTO} userCreateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(userCreateInputDTO: UserCreateInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGetResponse>>;
    /**
     *
     * @summary Delete a server user by id.
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get a user by id.
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGetResponse>>;
    /**
     *
     * @summary List the users.
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {boolean} [isAdmin]
     * @param {ListUsersSortEnum} [sort]
     * @param {string} [search]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(offset?: number, limit?: number, isAdmin?: boolean, sort?: ListUsersSortEnum, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserListResponse>>;
    /**
     *
     * @summary Update a user.
     * @param {string} userId
     * @param {UserUpdateInputDTO} userUpdateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(userId: string, userUpdateInputDTO: UserUpdateInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGetResponse>>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create a user.
     * @param {UsersApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(requestParameters: UsersApiCreateUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserGetResponse>;
    /**
     *
     * @summary Delete a server user by id.
     * @param {UsersApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(requestParameters: UsersApiDeleteUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get a user by id.
     * @param {UsersApiGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(requestParameters: UsersApiGetUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserGetResponse>;
    /**
     *
     * @summary List the users.
     * @param {UsersApiListUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(requestParameters?: UsersApiListUsersRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserListResponse>;
    /**
     *
     * @summary Update a user.
     * @param {UsersApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(requestParameters: UsersApiUpdateUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserGetResponse>;
};
/**
 * Request parameters for createUser operation in UsersApi.
 * @export
 * @interface UsersApiCreateUserRequest
 */
export interface UsersApiCreateUserRequest {
    /**
     *
     * @type {UserCreateInputDTO}
     * @memberof UsersApiCreateUser
     */
    readonly userCreateInputDTO: UserCreateInputDTO;
}
/**
 * Request parameters for deleteUser operation in UsersApi.
 * @export
 * @interface UsersApiDeleteUserRequest
 */
export interface UsersApiDeleteUserRequest {
    /**
     *
     * @type {string}
     * @memberof UsersApiDeleteUser
     */
    readonly userId: string;
}
/**
 * Request parameters for getUser operation in UsersApi.
 * @export
 * @interface UsersApiGetUserRequest
 */
export interface UsersApiGetUserRequest {
    /**
     *
     * @type {string}
     * @memberof UsersApiGetUser
     */
    readonly userId: string;
}
/**
 * Request parameters for listUsers operation in UsersApi.
 * @export
 * @interface UsersApiListUsersRequest
 */
export interface UsersApiListUsersRequest {
    /**
     *
     * @type {number}
     * @memberof UsersApiListUsers
     */
    readonly offset?: number;
    /**
     *
     * @type {number}
     * @memberof UsersApiListUsers
     */
    readonly limit?: number;
    /**
     *
     * @type {boolean}
     * @memberof UsersApiListUsers
     */
    readonly isAdmin?: boolean;
    /**
     *
     * @type {'createdAt-asc' | 'createdAt-desc' | 'email-asc' | 'email-desc' | 'name-asc' | 'name-desc' | 'username-asc' | 'username-desc' | 'updatedAt-asc' | 'updatedAt-desc'}
     * @memberof UsersApiListUsers
     */
    readonly sort?: ListUsersSortEnum;
    /**
     *
     * @type {string}
     * @memberof UsersApiListUsers
     */
    readonly search?: string;
}
/**
 * Request parameters for updateUser operation in UsersApi.
 * @export
 * @interface UsersApiUpdateUserRequest
 */
export interface UsersApiUpdateUserRequest {
    /**
     *
     * @type {string}
     * @memberof UsersApiUpdateUser
     */
    readonly userId: string;
    /**
     *
     * @type {UserUpdateInputDTO}
     * @memberof UsersApiUpdateUser
     */
    readonly userUpdateInputDTO: UserUpdateInputDTO;
}
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI {
    /**
     *
     * @summary Create a user.
     * @param {UsersApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createUser(requestParameters: UsersApiCreateUserRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserGetResponse, any>>;
    /**
     *
     * @summary Delete a server user by id.
     * @param {UsersApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    deleteUser(requestParameters: UsersApiDeleteUserRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get a user by id.
     * @param {UsersApiGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUser(requestParameters: UsersApiGetUserRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserGetResponse, any>>;
    /**
     *
     * @summary List the users.
     * @param {UsersApiListUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUsers(requestParameters?: UsersApiListUsersRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserListResponse, any>>;
    /**
     *
     * @summary Update a user.
     * @param {UsersApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUser(requestParameters: UsersApiUpdateUserRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserGetResponse, any>>;
}
/**
 * @export
 */
export declare const ListUsersSortEnum: {
    readonly CreatedAtAsc: "createdAt-asc";
    readonly CreatedAtDesc: "createdAt-desc";
    readonly EmailAsc: "email-asc";
    readonly EmailDesc: "email-desc";
    readonly NameAsc: "name-asc";
    readonly NameDesc: "name-desc";
    readonly UsernameAsc: "username-asc";
    readonly UsernameDesc: "username-desc";
    readonly UpdatedAtAsc: "updatedAt-asc";
    readonly UpdatedAtDesc: "updatedAt-desc";
};
export type ListUsersSortEnum = typeof ListUsersSortEnum[keyof typeof ListUsersSortEnum];
/**
 * ViewerApi - axios parameter creator
 * @export
 */
export declare const ViewerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getViewer: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {ViewerUpdateInputDTO} viewerUpdateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateViewer: (viewerUpdateInputDTO: ViewerUpdateInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ViewerApi - functional programming interface
 * @export
 */
export declare const ViewerApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getViewer(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewerGetResponse>>;
    /**
     *
     * @param {ViewerUpdateInputDTO} viewerUpdateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateViewer(viewerUpdateInputDTO: ViewerUpdateInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewerGetResponse>>;
};
/**
 * ViewerApi - factory interface
 * @export
 */
export declare const ViewerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getViewer(options?: RawAxiosRequestConfig): AxiosPromise<ViewerGetResponse>;
    /**
     *
     * @param {ViewerApiUpdateViewerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateViewer(requestParameters: ViewerApiUpdateViewerRequest, options?: RawAxiosRequestConfig): AxiosPromise<ViewerGetResponse>;
};
/**
 * Request parameters for updateViewer operation in ViewerApi.
 * @export
 * @interface ViewerApiUpdateViewerRequest
 */
export interface ViewerApiUpdateViewerRequest {
    /**
     *
     * @type {ViewerUpdateInputDTO}
     * @memberof ViewerApiUpdateViewer
     */
    readonly viewerUpdateInputDTO: ViewerUpdateInputDTO;
}
/**
 * ViewerApi - object-oriented interface
 * @export
 * @class ViewerApi
 * @extends {BaseAPI}
 */
export declare class ViewerApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewerApi
     */
    getViewer(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewerGetResponse, any>>;
    /**
     *
     * @param {ViewerApiUpdateViewerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewerApi
     */
    updateViewer(requestParameters: ViewerApiUpdateViewerRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewerGetResponse, any>>;
}
