/**
 * @stellariscloud/api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface AppConfigCreateData
 */
export interface AppConfigCreateData {
    /**
     *
     * @type {string}
     * @memberof AppConfigCreateData
     */
    key: string;
    /**
     *
     * @type {any}
     * @memberof AppConfigCreateData
     */
    value?: any | null;
}
/**
 *
 * @export
 * @interface AppConfigGetResponse
 */
export interface AppConfigGetResponse {
    /**
     *
     * @type {any}
     * @memberof AppConfigGetResponse
     */
    value: any | null;
}
/**
 *
 * @export
 * @interface CreateFolderSharePayload
 */
export interface CreateFolderSharePayload {
    /**
     *
     * @type {string}
     * @memberof CreateFolderSharePayload
     */
    userInviteEmail: string;
    /**
     *
     * @type {FolderShareConfig}
     * @memberof CreateFolderSharePayload
     */
    shareConfiguration: FolderShareConfig;
}
/**
 *
 * @export
 * @interface ErrorData
 */
export interface ErrorData {
    /**
     *
     * @type {string}
     * @memberof ErrorData
     */
    code: string;
    /**
     *
     * @type {string}
     * @memberof ErrorData
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof ErrorData
     */
    detail?: string;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof ErrorData
     */
    meta?: {
        [key: string]: any;
    };
    /**
     *
     * @type {string}
     * @memberof ErrorData
     */
    pointer?: string;
}
/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     *
     * @type {Array<ErrorData>}
     * @memberof ErrorResponse
     */
    errors: Array<ErrorData>;
}
/**
 *
 * @export
 * @interface FolderAndPermission
 */
export interface FolderAndPermission {
    /**
     *
     * @type {FolderData}
     * @memberof FolderAndPermission
     */
    folder: FolderData;
    /**
     *
     * @type {Array<string>}
     * @memberof FolderAndPermission
     */
    permissions: Array<string>;
}
/**
 *
 * @export
 * @interface FolderData
 */
export interface FolderData {
    /**
     *
     * @type {string}
     * @memberof FolderData
     */
    createdAt: string;
    /**
     *
     * @type {string}
     * @memberof FolderData
     */
    updatedAt: string;
    /**
     *
     * @type {string}
     * @memberof FolderData
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof FolderData
     */
    ownerId?: string;
    /**
     *
     * @type {string}
     * @memberof FolderData
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof FolderData
     */
    accessKeyId: string;
    /**
     *
     * @type {string}
     * @memberof FolderData
     */
    endpoint: string;
    /**
     *
     * @type {string}
     * @memberof FolderData
     */
    region?: string;
    /**
     *
     * @type {string}
     * @memberof FolderData
     */
    bucket: string;
    /**
     *
     * @type {string}
     * @memberof FolderData
     */
    prefix?: string;
}
/**
 *
 * @export
 * @interface FolderObjectContentMetadata
 */
export interface FolderObjectContentMetadata {
    /**
     *
     * @type {string}
     * @memberof FolderObjectContentMetadata
     */
    hash: string;
    /**
     *
     * @type {string}
     * @memberof FolderObjectContentMetadata
     */
    mimeType: string;
    /**
     *
     * @type {ImagePreviews}
     * @memberof FolderObjectContentMetadata
     */
    previews: ImagePreviews;
    /**
     *
     * @type {number}
     * @memberof FolderObjectContentMetadata
     */
    lengthMilliseconds: number;
    /**
     *
     * @type {number}
     * @memberof FolderObjectContentMetadata
     */
    imageOrientation?: number;
    /**
     *
     * @type {number}
     * @memberof FolderObjectContentMetadata
     */
    height: number;
    /**
     *
     * @type {number}
     * @memberof FolderObjectContentMetadata
     */
    width: number;
    /**
     *
     * @type {string}
     * @memberof FolderObjectContentMetadata
     */
    createdAt?: string;
}
/**
 *
 * @export
 * @interface FolderObjectData
 */
export interface FolderObjectData {
    /**
     *
     * @type {string}
     * @memberof FolderObjectData
     */
    createdAt: string;
    /**
     *
     * @type {string}
     * @memberof FolderObjectData
     */
    updatedAt: string;
    /**
     *
     * @type {string}
     * @memberof FolderObjectData
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof FolderObjectData
     */
    objectKey: string;
    /**
     *
     * @type {FolderObjectDataFolder}
     * @memberof FolderObjectData
     */
    folder: FolderObjectDataFolder;
    /**
     *
     * @type {FolderObjectContentMetadata}
     * @memberof FolderObjectData
     */
    contentMetadata?: FolderObjectContentMetadata;
    /**
     *
     * @type {number}
     * @memberof FolderObjectData
     */
    lastModified: number;
    /**
     *
     * @type {Array<string>}
     * @memberof FolderObjectData
     */
    tags: Array<string>;
    /**
     *
     * @type {string}
     * @memberof FolderObjectData
     */
    eTag: string;
    /**
     *
     * @type {number}
     * @memberof FolderObjectData
     */
    sizeBytes: number;
    /**
     *
     * @type {MediaType}
     * @memberof FolderObjectData
     */
    mediaType: MediaType;
}
/**
 *
 * @export
 * @interface FolderObjectDataFolder
 */
export interface FolderObjectDataFolder {
    /**
     *
     * @type {string}
     * @memberof FolderObjectDataFolder
     */
    id: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum FolderPermissionName {
    FolderRefresh = "folder_refresh",
    FolderManageShares = "folder_manage_shares",
    FolderForget = "folder_forget",
    ObjectEdit = "object_edit",
    ObjectManage = "object_manage",
    TagCreate = "tag_create",
    TagAssociate = "tag_associate"
}
/**
 *
 * @export
 * @interface FolderShareConfig
 */
export interface FolderShareConfig {
    /**
     *
     * @type {Array<FolderPermissionName>}
     * @memberof FolderShareConfig
     */
    permissions: Array<FolderPermissionName>;
}
/**
 *
 * @export
 * @interface FolderShareData
 */
export interface FolderShareData {
    /**
     *
     * @type {string}
     * @memberof FolderShareData
     */
    createdAt: string;
    /**
     *
     * @type {string}
     * @memberof FolderShareData
     */
    updatedAt: string;
    /**
     *
     * @type {string}
     * @memberof FolderShareData
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof FolderShareData
     */
    userId?: string;
    /**
     *
     * @type {string}
     * @memberof FolderShareData
     */
    userLabel: string;
    /**
     *
     * @type {string}
     * @memberof FolderShareData
     */
    userInviteEmail: string;
    /**
     *
     * @type {FolderObjectDataFolder}
     * @memberof FolderShareData
     */
    folder: FolderObjectDataFolder;
    /**
     *
     * @type {FolderShareConfig}
     * @memberof FolderShareData
     */
    shareConfiguration: FolderShareConfig;
}
/**
 *
 * @export
 * @interface ImagePreview
 */
export interface ImagePreview {
    /**
     *
     * @type {number}
     * @memberof ImagePreview
     */
    size: number;
    /**
     *
     * @type {string}
     * @memberof ImagePreview
     */
    path: string;
}
/**
 *
 * @export
 * @interface ImagePreviews
 */
export interface ImagePreviews {
    /**
     *
     * @type {ImagePreview}
     * @memberof ImagePreviews
     */
    large?: ImagePreview;
    /**
     *
     * @type {ImagePreview}
     * @memberof ImagePreviews
     */
    medium?: ImagePreview;
    /**
     *
     * @type {ImagePreview}
     * @memberof ImagePreviews
     */
    small?: ImagePreview;
}
/**
 *
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     *
     * @type {string}
     * @memberof InlineObject
     */
    prefix?: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject
     */
    bucket: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject
     */
    s3ConnectionId: string;
}
/**
 *
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     *
     * @type {string}
     * @memberof InlineObject1
     */
    eTag?: string;
}
/**
 *
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     *
     * @type {string}
     * @memberof InlineObject2
     */
    name: string;
}
/**
 *
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
    /**
     *
     * @type {string}
     * @memberof InlineObject3
     */
    name: string;
}
/**
 *
 * @export
 * @interface InlineObject4
 */
export interface InlineObject4 {
    /**
     *
     * @type {string}
     * @memberof InlineObject4
     */
    region: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject4
     */
    endpoint: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject4
     */
    secretAccessKey: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject4
     */
    accessKeyId: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject4
     */
    name: string;
}
/**
 *
 * @export
 * @interface InlineObject5
 */
export interface InlineObject5 {
    /**
     *
     * @type {string}
     * @memberof InlineObject5
     */
    region: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject5
     */
    endpoint: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject5
     */
    secretAccessKey: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject5
     */
    accessKeyId: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject5
     */
    name: string;
}
/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     *
     * @type {FolderData}
     * @memberof InlineResponse200
     */
    folder: FolderData;
}
/**
 *
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     *
     * @type {Array<FolderPermissionName>}
     * @memberof InlineResponse2001
     */
    permissions: Array<FolderPermissionName>;
    /**
     *
     * @type {FolderData}
     * @memberof InlineResponse2001
     */
    folder: FolderData;
}
/**
 *
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     *
     * @type {boolean}
     * @memberof InlineResponse2002
     */
    success: boolean;
}
/**
 *
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     *
     * @type {number}
     * @memberof InlineResponse2003
     */
    totalSizeBytes: number;
    /**
     *
     * @type {number}
     * @memberof InlineResponse2003
     */
    totalCount: number;
}
/**
 *
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     *
     * @type {InlineResponse2004Meta}
     * @memberof InlineResponse2004
     */
    meta: InlineResponse2004Meta;
    /**
     *
     * @type {Array<FolderObjectData>}
     * @memberof InlineResponse2004
     */
    result: Array<FolderObjectData>;
}
/**
 *
 * @export
 * @interface InlineResponse2004Meta
 */
export interface InlineResponse2004Meta {
    /**
     *
     * @type {number}
     * @memberof InlineResponse2004Meta
     */
    totalCount: number;
}
/**
 *
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     *
     * @type {InlineResponse2004Meta}
     * @memberof InlineResponse2005
     */
    meta: InlineResponse2004Meta;
    /**
     *
     * @type {Array<FolderShareData>}
     * @memberof InlineResponse2005
     */
    result: Array<FolderShareData>;
}
/**
 *
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
    /**
     *
     * @type {InlineResponse2004Meta}
     * @memberof InlineResponse2006
     */
    meta: InlineResponse2004Meta;
    /**
     *
     * @type {Array<ObjectTagData>}
     * @memberof InlineResponse2006
     */
    result: Array<ObjectTagData>;
}
/**
 *
 * @export
 * @interface InlineResponse2007
 */
export interface InlineResponse2007 {
    /**
     *
     * @type {string}
     * @memberof InlineResponse2007
     */
    method: InlineResponse2007MethodEnum;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2007
     */
    url: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2007
     */
    objectKey: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum InlineResponse2007MethodEnum {
    Put = "PUT",
    Delete = "DELETE",
    Get = "GET"
}
/**
 *
 * @export
 * @interface InlineResponse2008
 */
export interface InlineResponse2008 {
    /**
     *
     * @type {Array<S3ConnectionData>}
     * @memberof InlineResponse2008
     */
    result: Array<S3ConnectionData>;
    /**
     *
     * @type {InlineResponse2004Meta}
     * @memberof InlineResponse2008
     */
    meta: InlineResponse2004Meta;
}
/**
 *
 * @export
 * @interface InlineResponse2009
 */
export interface InlineResponse2009 {
    /**
     *
     * @type {UserData}
     * @memberof InlineResponse2009
     */
    data: UserData;
}
/**
 *
 * @export
 * @interface ListFoldersResponse
 */
export interface ListFoldersResponse {
    /**
     *
     * @type {InlineResponse2004Meta}
     * @memberof ListFoldersResponse
     */
    meta: InlineResponse2004Meta;
    /**
     *
     * @type {Array<FolderAndPermission>}
     * @memberof ListFoldersResponse
     */
    result: Array<FolderAndPermission>;
}
/**
 *
 * @export
 * @interface LoginParams
 */
export interface LoginParams {
    /**
     *
     * @type {string}
     * @memberof LoginParams
     */
    login: string;
    /**
     *
     * @type {string}
     * @memberof LoginParams
     */
    password: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum MediaType {
    Image = "IMAGE",
    Video = "VIDEO",
    Audio = "AUDIO",
    Document = "DOCUMENT",
    Unknown = "UNKNOWN"
}
/**
 *
 * @export
 * @interface ObjectTagData
 */
export interface ObjectTagData {
    /**
     *
     * @type {string}
     * @memberof ObjectTagData
     */
    createdAt: string;
    /**
     *
     * @type {string}
     * @memberof ObjectTagData
     */
    updatedAt: string;
    /**
     *
     * @type {string}
     * @memberof ObjectTagData
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof ObjectTagData
     */
    name: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum PlatformRole {
    Anonymous = "ANONYMOUS",
    Authenticated = "AUTHENTICATED",
    Admin = "ADMIN"
}
/**
 *
 * @export
 * @interface S3ConnectionData
 */
export interface S3ConnectionData {
    /**
     *
     * @type {string}
     * @memberof S3ConnectionData
     */
    createdAt: string;
    /**
     *
     * @type {string}
     * @memberof S3ConnectionData
     */
    updatedAt: string;
    /**
     *
     * @type {string}
     * @memberof S3ConnectionData
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof S3ConnectionData
     */
    ownerId?: string;
    /**
     *
     * @type {string}
     * @memberof S3ConnectionData
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof S3ConnectionData
     */
    accessKeyId: string;
    /**
     *
     * @type {string}
     * @memberof S3ConnectionData
     */
    endpoint: string;
    /**
     *
     * @type {string}
     * @memberof S3ConnectionData
     */
    region?: string;
}
/**
 *
 * @export
 * @interface SessionResponse
 */
export interface SessionResponse {
    /**
     *
     * @type {SessionResponseData}
     * @memberof SessionResponse
     */
    data: SessionResponseData;
}
/**
 *
 * @export
 * @interface SessionResponseData
 */
export interface SessionResponseData {
    /**
     *
     * @type {string}
     * @memberof SessionResponseData
     */
    expiresAt: string;
    /**
     *
     * @type {string}
     * @memberof SessionResponseData
     */
    refreshToken: string;
    /**
     *
     * @type {string}
     * @memberof SessionResponseData
     */
    accessToken: string;
}
/**
 *
 * @export
 * @interface UpdateFolderSharePayload
 */
export interface UpdateFolderSharePayload {
    /**
     *
     * @type {FolderShareConfig}
     * @memberof UpdateFolderSharePayload
     */
    shareConfiguration: FolderShareConfig;
}
/**
 *
 * @export
 * @interface UserData
 */
export interface UserData {
    /**
     *
     * @type {string}
     * @memberof UserData
     */
    createdAt: string;
    /**
     *
     * @type {string}
     * @memberof UserData
     */
    updatedAt: string;
    /**
     *
     * @type {string}
     * @memberof UserData
     */
    id: string;
    /**
     *
     * @type {PlatformRole}
     * @memberof UserData
     */
    role: PlatformRole;
    /**
     *
     * @type {string}
     * @memberof UserData
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof UserData
     */
    username: string;
}
/**
 * AppConfigApi - axios parameter creator
 * @export
 */
export declare const AppConfigApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppConfig: (key: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {AppConfigCreateData} appConfigCreateData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAppConfig: (appConfigCreateData: AppConfigCreateData, options?: any) => Promise<RequestArgs>;
};
/**
 * AppConfigApi - functional programming interface
 * @export
 */
export declare const AppConfigApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppConfig(key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppConfigGetResponse>>;
    /**
     *
     * @param {AppConfigCreateData} appConfigCreateData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAppConfig(appConfigCreateData: AppConfigCreateData, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * AppConfigApi - factory interface
 * @export
 */
export declare const AppConfigApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {string} key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppConfig(key: string, options?: any): AxiosPromise<AppConfigGetResponse>;
    /**
     *
     * @param {AppConfigCreateData} appConfigCreateData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAppConfig(appConfigCreateData: AppConfigCreateData, options?: any): AxiosPromise<void>;
};
/**
 * Request parameters for getAppConfig operation in AppConfigApi.
 * @export
 * @interface AppConfigApiGetAppConfigRequest
 */
export interface AppConfigApiGetAppConfigRequest {
    /**
     *
     * @type {string}
     * @memberof AppConfigApiGetAppConfig
     */
    readonly key: string;
}
/**
 * Request parameters for setAppConfig operation in AppConfigApi.
 * @export
 * @interface AppConfigApiSetAppConfigRequest
 */
export interface AppConfigApiSetAppConfigRequest {
    /**
     *
     * @type {AppConfigCreateData}
     * @memberof AppConfigApiSetAppConfig
     */
    readonly appConfigCreateData: AppConfigCreateData;
}
/**
 * AppConfigApi - object-oriented interface
 * @export
 * @class AppConfigApi
 * @extends {BaseAPI}
 */
export declare class AppConfigApi extends BaseAPI {
    /**
     *
     * @param {AppConfigApiGetAppConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppConfigApi
     */
    getAppConfig(requestParameters: AppConfigApiGetAppConfigRequest, options?: any): Promise<import("axios").AxiosResponse<AppConfigGetResponse, any>>;
    /**
     *
     * @param {AppConfigApiSetAppConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppConfigApi
     */
    setAppConfig(requestParameters: AppConfigApiSetAppConfigRequest, options?: any): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * AuthApi - axios parameter creator
 * @export
 */
export declare const AuthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {LoginParams} loginParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login: (loginParams: LoginParams, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken: (options?: any) => Promise<RequestArgs>;
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export declare const AuthApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {LoginParams} loginParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(loginParams: LoginParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionResponse>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionResponse>>;
};
/**
 * AuthApi - factory interface
 * @export
 */
export declare const AuthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {LoginParams} loginParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(loginParams: LoginParams, options?: any): AxiosPromise<SessionResponse>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout(options?: any): AxiosPromise<void>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken(options?: any): AxiosPromise<SessionResponse>;
};
/**
 * Request parameters for login operation in AuthApi.
 * @export
 * @interface AuthApiLoginRequest
 */
export interface AuthApiLoginRequest {
    /**
     *
     * @type {LoginParams}
     * @memberof AuthApiLogin
     */
    readonly loginParams: LoginParams;
}
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export declare class AuthApi extends BaseAPI {
    /**
     *
     * @param {AuthApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    login(requestParameters: AuthApiLoginRequest, options?: any): Promise<import("axios").AxiosResponse<SessionResponse, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    logout(options?: any): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    refreshToken(options?: any): Promise<import("axios").AxiosResponse<SessionResponse, any>>;
}
/**
 * FoldersApi - axios parameter creator
 * @export
 */
export declare const FoldersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {InlineObject} inlineObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolder: (inlineObject: InlineObject, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {CreateFolderSharePayload} createFolderSharePayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolderShare: (folderId: string, createFolderSharePayload: CreateFolderSharePayload, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {Array<object>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPresignedURLs: (folderId: string, requestBody: Array<object>, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {InlineObject2} inlineObject2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTag: (folderId: string, inlineObject2: InlineObject2, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolder: (folderId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolderObject: (folderId: string, objectKey: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {string} shareId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolderShare: (folderId: string, shareId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {string} tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTag: (folderId: string, tagId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolder: (folderId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderMetadata: (folderId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderObject: (folderId: string, objectKey: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {string} [search]
     * @param {string} [tagId]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolderObjects: (folderId: string, search?: string, tagId?: string, offset?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolderShares: (folderId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolders: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTags: (folderId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshFolder: (folderId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {InlineObject1} inlineObject1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshFolderObjectS3Metadata: (folderId: string, objectKey: string, inlineObject1: InlineObject1, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {string} tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagObject: (folderId: string, objectKey: string, tagId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {string} tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    untagObject: (folderId: string, objectKey: string, tagId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {FolderObjectContentMetadata} folderObjectContentMetadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFolderObjectContentMetadata: (folderId: string, objectKey: string, folderObjectContentMetadata: FolderObjectContentMetadata, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {string} shareId
     * @param {UpdateFolderSharePayload} updateFolderSharePayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFolderShare: (folderId: string, shareId: string, updateFolderSharePayload: UpdateFolderSharePayload, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {string} tagId
     * @param {InlineObject3} inlineObject3
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTag: (folderId: string, tagId: string, inlineObject3: InlineObject3, options?: any) => Promise<RequestArgs>;
};
/**
 * FoldersApi - functional programming interface
 * @export
 */
export declare const FoldersApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {InlineObject} inlineObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolder(inlineObject: InlineObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>>;
    /**
     *
     * @param {string} folderId
     * @param {CreateFolderSharePayload} createFolderSharePayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolderShare(folderId: string, createFolderSharePayload: CreateFolderSharePayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderShareData>>;
    /**
     *
     * @param {string} folderId
     * @param {Array<object>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPresignedURLs(folderId: string, requestBody: Array<object>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse2007>>>;
    /**
     *
     * @param {string} folderId
     * @param {InlineObject2} inlineObject2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTag(folderId: string, inlineObject2: InlineObject2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectTagData>>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolder(folderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolderObject(folderId: string, objectKey: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>>;
    /**
     *
     * @param {string} folderId
     * @param {string} shareId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolderShare(folderId: string, shareId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>>;
    /**
     *
     * @param {string} folderId
     * @param {string} tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTag(folderId: string, tagId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolder(folderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderMetadata(folderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderObject(folderId: string, objectKey: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderObjectData>>;
    /**
     *
     * @param {string} folderId
     * @param {string} [search]
     * @param {string} [tagId]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolderObjects(folderId: string, search?: string, tagId?: string, offset?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolderShares(folderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolders(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListFoldersResponse>>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTags(folderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshFolder(folderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {InlineObject1} inlineObject1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshFolderObjectS3Metadata(folderId: string, objectKey: string, inlineObject1: InlineObject1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderObjectData>>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {string} tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagObject(folderId: string, objectKey: string, tagId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {string} tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    untagObject(folderId: string, objectKey: string, tagId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {FolderObjectContentMetadata} folderObjectContentMetadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFolderObjectContentMetadata(folderId: string, objectKey: string, folderObjectContentMetadata: FolderObjectContentMetadata, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderObjectData>>;
    /**
     *
     * @param {string} folderId
     * @param {string} shareId
     * @param {UpdateFolderSharePayload} updateFolderSharePayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFolderShare(folderId: string, shareId: string, updateFolderSharePayload: UpdateFolderSharePayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderShareData>>;
    /**
     *
     * @param {string} folderId
     * @param {string} tagId
     * @param {InlineObject3} inlineObject3
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTag(folderId: string, tagId: string, inlineObject3: InlineObject3, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectTagData>>;
};
/**
 * FoldersApi - factory interface
 * @export
 */
export declare const FoldersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {InlineObject} inlineObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolder(inlineObject: InlineObject, options?: any): AxiosPromise<InlineResponse200>;
    /**
     *
     * @param {string} folderId
     * @param {CreateFolderSharePayload} createFolderSharePayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolderShare(folderId: string, createFolderSharePayload: CreateFolderSharePayload, options?: any): AxiosPromise<FolderShareData>;
    /**
     *
     * @param {string} folderId
     * @param {Array<object>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPresignedURLs(folderId: string, requestBody: Array<object>, options?: any): AxiosPromise<Array<InlineResponse2007>>;
    /**
     *
     * @param {string} folderId
     * @param {InlineObject2} inlineObject2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTag(folderId: string, inlineObject2: InlineObject2, options?: any): AxiosPromise<ObjectTagData>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolder(folderId: string, options?: any): AxiosPromise<InlineResponse2002>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolderObject(folderId: string, objectKey: string, options?: any): AxiosPromise<InlineResponse2002>;
    /**
     *
     * @param {string} folderId
     * @param {string} shareId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolderShare(folderId: string, shareId: string, options?: any): AxiosPromise<InlineResponse2002>;
    /**
     *
     * @param {string} folderId
     * @param {string} tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTag(folderId: string, tagId: string, options?: any): AxiosPromise<InlineResponse2002>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolder(folderId: string, options?: any): AxiosPromise<InlineResponse2001>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderMetadata(folderId: string, options?: any): AxiosPromise<InlineResponse2003>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderObject(folderId: string, objectKey: string, options?: any): AxiosPromise<FolderObjectData>;
    /**
     *
     * @param {string} folderId
     * @param {string} [search]
     * @param {string} [tagId]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolderObjects(folderId: string, search?: string, tagId?: string, offset?: number, limit?: number, options?: any): AxiosPromise<InlineResponse2004>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolderShares(folderId: string, options?: any): AxiosPromise<InlineResponse2005>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolders(options?: any): AxiosPromise<ListFoldersResponse>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTags(folderId: string, options?: any): AxiosPromise<InlineResponse2006>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshFolder(folderId: string, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {InlineObject1} inlineObject1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshFolderObjectS3Metadata(folderId: string, objectKey: string, inlineObject1: InlineObject1, options?: any): AxiosPromise<FolderObjectData>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {string} tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagObject(folderId: string, objectKey: string, tagId: string, options?: any): AxiosPromise<InlineResponse2002>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {string} tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    untagObject(folderId: string, objectKey: string, tagId: string, options?: any): AxiosPromise<InlineResponse2002>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {FolderObjectContentMetadata} folderObjectContentMetadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFolderObjectContentMetadata(folderId: string, objectKey: string, folderObjectContentMetadata: FolderObjectContentMetadata, options?: any): AxiosPromise<FolderObjectData>;
    /**
     *
     * @param {string} folderId
     * @param {string} shareId
     * @param {UpdateFolderSharePayload} updateFolderSharePayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFolderShare(folderId: string, shareId: string, updateFolderSharePayload: UpdateFolderSharePayload, options?: any): AxiosPromise<FolderShareData>;
    /**
     *
     * @param {string} folderId
     * @param {string} tagId
     * @param {InlineObject3} inlineObject3
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTag(folderId: string, tagId: string, inlineObject3: InlineObject3, options?: any): AxiosPromise<ObjectTagData>;
};
/**
 * Request parameters for createFolder operation in FoldersApi.
 * @export
 * @interface FoldersApiCreateFolderRequest
 */
export interface FoldersApiCreateFolderRequest {
    /**
     *
     * @type {InlineObject}
     * @memberof FoldersApiCreateFolder
     */
    readonly inlineObject: InlineObject;
}
/**
 * Request parameters for createFolderShare operation in FoldersApi.
 * @export
 * @interface FoldersApiCreateFolderShareRequest
 */
export interface FoldersApiCreateFolderShareRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiCreateFolderShare
     */
    readonly folderId: string;
    /**
     *
     * @type {CreateFolderSharePayload}
     * @memberof FoldersApiCreateFolderShare
     */
    readonly createFolderSharePayload: CreateFolderSharePayload;
}
/**
 * Request parameters for createPresignedURLs operation in FoldersApi.
 * @export
 * @interface FoldersApiCreatePresignedURLsRequest
 */
export interface FoldersApiCreatePresignedURLsRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiCreatePresignedURLs
     */
    readonly folderId: string;
    /**
     *
     * @type {Array<object>}
     * @memberof FoldersApiCreatePresignedURLs
     */
    readonly requestBody: Array<object>;
}
/**
 * Request parameters for createTag operation in FoldersApi.
 * @export
 * @interface FoldersApiCreateTagRequest
 */
export interface FoldersApiCreateTagRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiCreateTag
     */
    readonly folderId: string;
    /**
     *
     * @type {InlineObject2}
     * @memberof FoldersApiCreateTag
     */
    readonly inlineObject2: InlineObject2;
}
/**
 * Request parameters for deleteFolder operation in FoldersApi.
 * @export
 * @interface FoldersApiDeleteFolderRequest
 */
export interface FoldersApiDeleteFolderRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiDeleteFolder
     */
    readonly folderId: string;
}
/**
 * Request parameters for deleteFolderObject operation in FoldersApi.
 * @export
 * @interface FoldersApiDeleteFolderObjectRequest
 */
export interface FoldersApiDeleteFolderObjectRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiDeleteFolderObject
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiDeleteFolderObject
     */
    readonly objectKey: string;
}
/**
 * Request parameters for deleteFolderShare operation in FoldersApi.
 * @export
 * @interface FoldersApiDeleteFolderShareRequest
 */
export interface FoldersApiDeleteFolderShareRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiDeleteFolderShare
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiDeleteFolderShare
     */
    readonly shareId: string;
}
/**
 * Request parameters for deleteTag operation in FoldersApi.
 * @export
 * @interface FoldersApiDeleteTagRequest
 */
export interface FoldersApiDeleteTagRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiDeleteTag
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiDeleteTag
     */
    readonly tagId: string;
}
/**
 * Request parameters for getFolder operation in FoldersApi.
 * @export
 * @interface FoldersApiGetFolderRequest
 */
export interface FoldersApiGetFolderRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiGetFolder
     */
    readonly folderId: string;
}
/**
 * Request parameters for getFolderMetadata operation in FoldersApi.
 * @export
 * @interface FoldersApiGetFolderMetadataRequest
 */
export interface FoldersApiGetFolderMetadataRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiGetFolderMetadata
     */
    readonly folderId: string;
}
/**
 * Request parameters for getFolderObject operation in FoldersApi.
 * @export
 * @interface FoldersApiGetFolderObjectRequest
 */
export interface FoldersApiGetFolderObjectRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiGetFolderObject
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiGetFolderObject
     */
    readonly objectKey: string;
}
/**
 * Request parameters for listFolderObjects operation in FoldersApi.
 * @export
 * @interface FoldersApiListFolderObjectsRequest
 */
export interface FoldersApiListFolderObjectsRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiListFolderObjects
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiListFolderObjects
     */
    readonly search?: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiListFolderObjects
     */
    readonly tagId?: string;
    /**
     *
     * @type {number}
     * @memberof FoldersApiListFolderObjects
     */
    readonly offset?: number;
    /**
     *
     * @type {number}
     * @memberof FoldersApiListFolderObjects
     */
    readonly limit?: number;
}
/**
 * Request parameters for listFolderShares operation in FoldersApi.
 * @export
 * @interface FoldersApiListFolderSharesRequest
 */
export interface FoldersApiListFolderSharesRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiListFolderShares
     */
    readonly folderId: string;
}
/**
 * Request parameters for listTags operation in FoldersApi.
 * @export
 * @interface FoldersApiListTagsRequest
 */
export interface FoldersApiListTagsRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiListTags
     */
    readonly folderId: string;
}
/**
 * Request parameters for refreshFolder operation in FoldersApi.
 * @export
 * @interface FoldersApiRefreshFolderRequest
 */
export interface FoldersApiRefreshFolderRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiRefreshFolder
     */
    readonly folderId: string;
}
/**
 * Request parameters for refreshFolderObjectS3Metadata operation in FoldersApi.
 * @export
 * @interface FoldersApiRefreshFolderObjectS3MetadataRequest
 */
export interface FoldersApiRefreshFolderObjectS3MetadataRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiRefreshFolderObjectS3Metadata
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiRefreshFolderObjectS3Metadata
     */
    readonly objectKey: string;
    /**
     *
     * @type {InlineObject1}
     * @memberof FoldersApiRefreshFolderObjectS3Metadata
     */
    readonly inlineObject1: InlineObject1;
}
/**
 * Request parameters for tagObject operation in FoldersApi.
 * @export
 * @interface FoldersApiTagObjectRequest
 */
export interface FoldersApiTagObjectRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiTagObject
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiTagObject
     */
    readonly objectKey: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiTagObject
     */
    readonly tagId: string;
}
/**
 * Request parameters for untagObject operation in FoldersApi.
 * @export
 * @interface FoldersApiUntagObjectRequest
 */
export interface FoldersApiUntagObjectRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiUntagObject
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiUntagObject
     */
    readonly objectKey: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiUntagObject
     */
    readonly tagId: string;
}
/**
 * Request parameters for updateFolderObjectContentMetadata operation in FoldersApi.
 * @export
 * @interface FoldersApiUpdateFolderObjectContentMetadataRequest
 */
export interface FoldersApiUpdateFolderObjectContentMetadataRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiUpdateFolderObjectContentMetadata
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiUpdateFolderObjectContentMetadata
     */
    readonly objectKey: string;
    /**
     *
     * @type {FolderObjectContentMetadata}
     * @memberof FoldersApiUpdateFolderObjectContentMetadata
     */
    readonly folderObjectContentMetadata: FolderObjectContentMetadata;
}
/**
 * Request parameters for updateFolderShare operation in FoldersApi.
 * @export
 * @interface FoldersApiUpdateFolderShareRequest
 */
export interface FoldersApiUpdateFolderShareRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiUpdateFolderShare
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiUpdateFolderShare
     */
    readonly shareId: string;
    /**
     *
     * @type {UpdateFolderSharePayload}
     * @memberof FoldersApiUpdateFolderShare
     */
    readonly updateFolderSharePayload: UpdateFolderSharePayload;
}
/**
 * Request parameters for updateTag operation in FoldersApi.
 * @export
 * @interface FoldersApiUpdateTagRequest
 */
export interface FoldersApiUpdateTagRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiUpdateTag
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiUpdateTag
     */
    readonly tagId: string;
    /**
     *
     * @type {InlineObject3}
     * @memberof FoldersApiUpdateTag
     */
    readonly inlineObject3: InlineObject3;
}
/**
 * FoldersApi - object-oriented interface
 * @export
 * @class FoldersApi
 * @extends {BaseAPI}
 */
export declare class FoldersApi extends BaseAPI {
    /**
     *
     * @param {FoldersApiCreateFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    createFolder(requestParameters: FoldersApiCreateFolderRequest, options?: any): Promise<import("axios").AxiosResponse<InlineResponse200, any>>;
    /**
     *
     * @param {FoldersApiCreateFolderShareRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    createFolderShare(requestParameters: FoldersApiCreateFolderShareRequest, options?: any): Promise<import("axios").AxiosResponse<FolderShareData, any>>;
    /**
     *
     * @param {FoldersApiCreatePresignedURLsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    createPresignedURLs(requestParameters: FoldersApiCreatePresignedURLsRequest, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2007[], any>>;
    /**
     *
     * @param {FoldersApiCreateTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    createTag(requestParameters: FoldersApiCreateTagRequest, options?: any): Promise<import("axios").AxiosResponse<ObjectTagData, any>>;
    /**
     *
     * @param {FoldersApiDeleteFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    deleteFolder(requestParameters: FoldersApiDeleteFolderRequest, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2002, any>>;
    /**
     *
     * @param {FoldersApiDeleteFolderObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    deleteFolderObject(requestParameters: FoldersApiDeleteFolderObjectRequest, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2002, any>>;
    /**
     *
     * @param {FoldersApiDeleteFolderShareRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    deleteFolderShare(requestParameters: FoldersApiDeleteFolderShareRequest, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2002, any>>;
    /**
     *
     * @param {FoldersApiDeleteTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    deleteTag(requestParameters: FoldersApiDeleteTagRequest, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2002, any>>;
    /**
     *
     * @param {FoldersApiGetFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    getFolder(requestParameters: FoldersApiGetFolderRequest, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2001, any>>;
    /**
     *
     * @param {FoldersApiGetFolderMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    getFolderMetadata(requestParameters: FoldersApiGetFolderMetadataRequest, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2003, any>>;
    /**
     *
     * @param {FoldersApiGetFolderObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    getFolderObject(requestParameters: FoldersApiGetFolderObjectRequest, options?: any): Promise<import("axios").AxiosResponse<FolderObjectData, any>>;
    /**
     *
     * @param {FoldersApiListFolderObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    listFolderObjects(requestParameters: FoldersApiListFolderObjectsRequest, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2004, any>>;
    /**
     *
     * @param {FoldersApiListFolderSharesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    listFolderShares(requestParameters: FoldersApiListFolderSharesRequest, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2005, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    listFolders(options?: any): Promise<import("axios").AxiosResponse<ListFoldersResponse, any>>;
    /**
     *
     * @param {FoldersApiListTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    listTags(requestParameters: FoldersApiListTagsRequest, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2006, any>>;
    /**
     *
     * @param {FoldersApiRefreshFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    refreshFolder(requestParameters: FoldersApiRefreshFolderRequest, options?: any): Promise<import("axios").AxiosResponse<boolean, any>>;
    /**
     *
     * @param {FoldersApiRefreshFolderObjectS3MetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    refreshFolderObjectS3Metadata(requestParameters: FoldersApiRefreshFolderObjectS3MetadataRequest, options?: any): Promise<import("axios").AxiosResponse<FolderObjectData, any>>;
    /**
     *
     * @param {FoldersApiTagObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    tagObject(requestParameters: FoldersApiTagObjectRequest, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2002, any>>;
    /**
     *
     * @param {FoldersApiUntagObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    untagObject(requestParameters: FoldersApiUntagObjectRequest, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2002, any>>;
    /**
     *
     * @param {FoldersApiUpdateFolderObjectContentMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    updateFolderObjectContentMetadata(requestParameters: FoldersApiUpdateFolderObjectContentMetadataRequest, options?: any): Promise<import("axios").AxiosResponse<FolderObjectData, any>>;
    /**
     *
     * @param {FoldersApiUpdateFolderShareRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    updateFolderShare(requestParameters: FoldersApiUpdateFolderShareRequest, options?: any): Promise<import("axios").AxiosResponse<FolderShareData, any>>;
    /**
     *
     * @param {FoldersApiUpdateTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    updateTag(requestParameters: FoldersApiUpdateTagRequest, options?: any): Promise<import("axios").AxiosResponse<ObjectTagData, any>>;
}
/**
 * S3ConnectionsApi - axios parameter creator
 * @export
 */
export declare const S3ConnectionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {InlineObject4} inlineObject4
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createS3Connection: (inlineObject4: InlineObject4, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} s3ConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteS3Connection: (s3ConnectionId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} s3ConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getS3Connection: (s3ConnectionId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listS3Connections: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {InlineObject5} inlineObject5
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testS3Connection: (inlineObject5: InlineObject5, options?: any) => Promise<RequestArgs>;
};
/**
 * S3ConnectionsApi - functional programming interface
 * @export
 */
export declare const S3ConnectionsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {InlineObject4} inlineObject4
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createS3Connection(inlineObject4: InlineObject4, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<S3ConnectionData>>;
    /**
     *
     * @param {string} s3ConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteS3Connection(s3ConnectionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>>;
    /**
     *
     * @param {string} s3ConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getS3Connection(s3ConnectionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<S3ConnectionData>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listS3Connections(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2008>>;
    /**
     *
     * @param {InlineObject5} inlineObject5
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testS3Connection(inlineObject5: InlineObject5, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>>;
};
/**
 * S3ConnectionsApi - factory interface
 * @export
 */
export declare const S3ConnectionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {InlineObject4} inlineObject4
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createS3Connection(inlineObject4: InlineObject4, options?: any): AxiosPromise<S3ConnectionData>;
    /**
     *
     * @param {string} s3ConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteS3Connection(s3ConnectionId: string, options?: any): AxiosPromise<InlineResponse2002>;
    /**
     *
     * @param {string} s3ConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getS3Connection(s3ConnectionId: string, options?: any): AxiosPromise<S3ConnectionData>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listS3Connections(options?: any): AxiosPromise<InlineResponse2008>;
    /**
     *
     * @param {InlineObject5} inlineObject5
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testS3Connection(inlineObject5: InlineObject5, options?: any): AxiosPromise<InlineResponse2002>;
};
/**
 * Request parameters for createS3Connection operation in S3ConnectionsApi.
 * @export
 * @interface S3ConnectionsApiCreateS3ConnectionRequest
 */
export interface S3ConnectionsApiCreateS3ConnectionRequest {
    /**
     *
     * @type {InlineObject4}
     * @memberof S3ConnectionsApiCreateS3Connection
     */
    readonly inlineObject4: InlineObject4;
}
/**
 * Request parameters for deleteS3Connection operation in S3ConnectionsApi.
 * @export
 * @interface S3ConnectionsApiDeleteS3ConnectionRequest
 */
export interface S3ConnectionsApiDeleteS3ConnectionRequest {
    /**
     *
     * @type {string}
     * @memberof S3ConnectionsApiDeleteS3Connection
     */
    readonly s3ConnectionId: string;
}
/**
 * Request parameters for getS3Connection operation in S3ConnectionsApi.
 * @export
 * @interface S3ConnectionsApiGetS3ConnectionRequest
 */
export interface S3ConnectionsApiGetS3ConnectionRequest {
    /**
     *
     * @type {string}
     * @memberof S3ConnectionsApiGetS3Connection
     */
    readonly s3ConnectionId: string;
}
/**
 * Request parameters for testS3Connection operation in S3ConnectionsApi.
 * @export
 * @interface S3ConnectionsApiTestS3ConnectionRequest
 */
export interface S3ConnectionsApiTestS3ConnectionRequest {
    /**
     *
     * @type {InlineObject5}
     * @memberof S3ConnectionsApiTestS3Connection
     */
    readonly inlineObject5: InlineObject5;
}
/**
 * S3ConnectionsApi - object-oriented interface
 * @export
 * @class S3ConnectionsApi
 * @extends {BaseAPI}
 */
export declare class S3ConnectionsApi extends BaseAPI {
    /**
     *
     * @param {S3ConnectionsApiCreateS3ConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof S3ConnectionsApi
     */
    createS3Connection(requestParameters: S3ConnectionsApiCreateS3ConnectionRequest, options?: any): Promise<import("axios").AxiosResponse<S3ConnectionData, any>>;
    /**
     *
     * @param {S3ConnectionsApiDeleteS3ConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof S3ConnectionsApi
     */
    deleteS3Connection(requestParameters: S3ConnectionsApiDeleteS3ConnectionRequest, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2002, any>>;
    /**
     *
     * @param {S3ConnectionsApiGetS3ConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof S3ConnectionsApi
     */
    getS3Connection(requestParameters: S3ConnectionsApiGetS3ConnectionRequest, options?: any): Promise<import("axios").AxiosResponse<S3ConnectionData, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof S3ConnectionsApi
     */
    listS3Connections(options?: any): Promise<import("axios").AxiosResponse<InlineResponse2008, any>>;
    /**
     *
     * @param {S3ConnectionsApiTestS3ConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof S3ConnectionsApi
     */
    testS3Connection(requestParameters: S3ConnectionsApiTestS3ConnectionRequest, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2002, any>>;
}
/**
 * ViewerApi - axios parameter creator
 * @export
 */
export declare const ViewerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getViewer: (options?: any) => Promise<RequestArgs>;
};
/**
 * ViewerApi - functional programming interface
 * @export
 */
export declare const ViewerApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getViewer(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2009>>;
};
/**
 * ViewerApi - factory interface
 * @export
 */
export declare const ViewerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getViewer(options?: any): AxiosPromise<InlineResponse2009>;
};
/**
 * ViewerApi - object-oriented interface
 * @export
 * @class ViewerApi
 * @extends {BaseAPI}
 */
export declare class ViewerApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewerApi
     */
    getViewer(options?: any): Promise<import("axios").AxiosResponse<InlineResponse2009, any>>;
}
