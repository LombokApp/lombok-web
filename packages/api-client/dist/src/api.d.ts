/**
 * @stellariscloud/api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface ContentAttibutesPayload
 */
export interface ContentAttibutesPayload {
    /**
     *
     * @type {string}
     * @memberof ContentAttibutesPayload
     */
    'folderId': string;
    /**
     *
     * @type {string}
     * @memberof ContentAttibutesPayload
     */
    'objectKey': string;
    /**
     *
     * @type {string}
     * @memberof ContentAttibutesPayload
     */
    'hash': string;
    /**
     *
     * @type {ContentAttributesType}
     * @memberof ContentAttibutesPayload
     */
    'attributes': ContentAttributesType;
}
/**
 *
 * @export
 * @interface ContentAttributesType
 */
export interface ContentAttributesType {
    /**
     *
     * @type {MediaType}
     * @memberof ContentAttributesType
     */
    'mediaType': MediaType;
    /**
     *
     * @type {string}
     * @memberof ContentAttributesType
     */
    'mimeType': string;
    /**
     *
     * @type {number}
     * @memberof ContentAttributesType
     */
    'height': number;
    /**
     *
     * @type {number}
     * @memberof ContentAttributesType
     */
    'width': number;
    /**
     *
     * @type {number}
     * @memberof ContentAttributesType
     */
    'orientation': number;
    /**
     *
     * @type {number}
     * @memberof ContentAttributesType
     */
    'lengthMs': number;
    /**
     *
     * @type {number}
     * @memberof ContentAttributesType
     */
    'bitrate': number;
}
/**
 *
 * @export
 * @interface ContentMetadataPayload
 */
export interface ContentMetadataPayload {
    /**
     *
     * @type {string}
     * @memberof ContentMetadataPayload
     */
    'folderId': string;
    /**
     *
     * @type {string}
     * @memberof ContentMetadataPayload
     */
    'objectKey': string;
    /**
     *
     * @type {string}
     * @memberof ContentMetadataPayload
     */
    'hash': string;
    /**
     *
     * @type {{ [key: string]: MetadataEntry | undefined; }}
     * @memberof ContentMetadataPayload
     */
    'metadata': {
        [key: string]: MetadataEntry | undefined;
    };
}
/**
 *
 * @export
 * @interface CreateFolder200Response
 */
export interface CreateFolder200Response {
    /**
     *
     * @type {FolderData}
     * @memberof CreateFolder200Response
     */
    'folder': FolderData;
}
/**
 *
 * @export
 * @interface CreateFolderRequest
 */
export interface CreateFolderRequest {
    /**
     *
     * @type {string}
     * @memberof CreateFolderRequest
     */
    'prefix'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateFolderRequest
     */
    'bucket': string;
    /**
     *
     * @type {string}
     * @memberof CreateFolderRequest
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof CreateFolderRequest
     */
    's3ConnectionId': string;
}
/**
 *
 * @export
 * @interface CreateFolderSharePayload
 */
export interface CreateFolderSharePayload {
    /**
     *
     * @type {string}
     * @memberof CreateFolderSharePayload
     */
    'userInviteEmail': string;
    /**
     *
     * @type {FolderShareConfig}
     * @memberof CreateFolderSharePayload
     */
    'shareConfiguration': FolderShareConfig;
}
/**
 *
 * @export
 * @interface CreateMetadataUploadUrls200Response
 */
export interface CreateMetadataUploadUrls200Response {
    /**
     *
     * @type {Array<MetadataUploadUrlsResponse>}
     * @memberof CreateMetadataUploadUrls200Response
     */
    'metadataUploadUrls': Array<MetadataUploadUrlsResponse>;
}
/**
 *
 * @export
 * @interface CreateMetadataUploadUrlsPayload
 */
export interface CreateMetadataUploadUrlsPayload {
    /**
     *
     * @type {string}
     * @memberof CreateMetadataUploadUrlsPayload
     */
    'contentHash': string;
    /**
     *
     * @type {Array<CreateMetadataUploadUrlsPayloadMetadataFilesInner>}
     * @memberof CreateMetadataUploadUrlsPayload
     */
    'metadataFiles': Array<CreateMetadataUploadUrlsPayloadMetadataFilesInner>;
}
/**
 *
 * @export
 * @interface CreateMetadataUploadUrlsPayloadMetadataFilesInner
 */
export interface CreateMetadataUploadUrlsPayloadMetadataFilesInner {
    /**
     *
     * @type {{ [key: string]: string | undefined; }}
     * @memberof CreateMetadataUploadUrlsPayloadMetadataFilesInner
     */
    'metadataHashes': {
        [key: string]: string | undefined;
    };
    /**
     *
     * @type {string}
     * @memberof CreateMetadataUploadUrlsPayloadMetadataFilesInner
     */
    'objectKey': string;
    /**
     *
     * @type {string}
     * @memberof CreateMetadataUploadUrlsPayloadMetadataFilesInner
     */
    'folderId': string;
}
/**
 *
 * @export
 * @interface CreateOutputUploadUrls200Response
 */
export interface CreateOutputUploadUrls200Response {
    /**
     *
     * @type {Array<OutputUploadUrlsResponse>}
     * @memberof CreateOutputUploadUrls200Response
     */
    'outputUploadUrls': Array<OutputUploadUrlsResponse>;
}
/**
 *
 * @export
 * @interface CreateOutputUploadUrlsPayload
 */
export interface CreateOutputUploadUrlsPayload {
    /**
     *
     * @type {Array<CreateOutputUploadUrlsPayloadOutputFilesInner>}
     * @memberof CreateOutputUploadUrlsPayload
     */
    'outputFiles': Array<CreateOutputUploadUrlsPayloadOutputFilesInner>;
}
/**
 *
 * @export
 * @interface CreateOutputUploadUrlsPayloadOutputFilesInner
 */
export interface CreateOutputUploadUrlsPayloadOutputFilesInner {
    /**
     *
     * @type {string}
     * @memberof CreateOutputUploadUrlsPayloadOutputFilesInner
     */
    'objectKey': string;
    /**
     *
     * @type {string}
     * @memberof CreateOutputUploadUrlsPayloadOutputFilesInner
     */
    'folderId': string;
}
/**
 *
 * @export
 * @interface CreateS3ConnectionRequest
 */
export interface CreateS3ConnectionRequest {
    /**
     *
     * @type {string}
     * @memberof CreateS3ConnectionRequest
     */
    'region': string;
    /**
     *
     * @type {string}
     * @memberof CreateS3ConnectionRequest
     */
    'endpoint': string;
    /**
     *
     * @type {string}
     * @memberof CreateS3ConnectionRequest
     */
    'secretAccessKey': string;
    /**
     *
     * @type {string}
     * @memberof CreateS3ConnectionRequest
     */
    'accessKeyId': string;
    /**
     *
     * @type {string}
     * @memberof CreateS3ConnectionRequest
     */
    'name': string;
}
/**
 *
 * @export
 * @interface CreateSocketAuthentication200Response
 */
export interface CreateSocketAuthentication200Response {
    /**
     *
     * @type {string}
     * @memberof CreateSocketAuthentication200Response
     */
    'token': string;
}
/**
 *
 * @export
 * @interface CreateTagRequest
 */
export interface CreateTagRequest {
    /**
     *
     * @type {string}
     * @memberof CreateTagRequest
     */
    'name': string;
}
/**
 *
 * @export
 * @interface DeleteFolder200Response
 */
export interface DeleteFolder200Response {
    /**
     *
     * @type {boolean}
     * @memberof DeleteFolder200Response
     */
    'success': boolean;
}
/**
 *
 * @export
 * @interface ErrorData
 */
export interface ErrorData {
    /**
     *
     * @type {string}
     * @memberof ErrorData
     */
    'code': string;
    /**
     *
     * @type {string}
     * @memberof ErrorData
     */
    'title'?: string;
    /**
     *
     * @type {string}
     * @memberof ErrorData
     */
    'detail'?: string;
    /**
     *
     * @type {{ [key: string]: any | undefined; }}
     * @memberof ErrorData
     */
    'meta'?: {
        [key: string]: any | undefined;
    };
    /**
     *
     * @type {string}
     * @memberof ErrorData
     */
    'pointer'?: string;
}
/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     *
     * @type {Array<ErrorData>}
     * @memberof ErrorResponse
     */
    'errors': Array<ErrorData>;
}
/**
 *
 * @export
 * @interface FolderAndPermission
 */
export interface FolderAndPermission {
    /**
     *
     * @type {FolderData}
     * @memberof FolderAndPermission
     */
    'folder': FolderData;
    /**
     *
     * @type {Array<string>}
     * @memberof FolderAndPermission
     */
    'permissions': Array<string>;
}
/**
 *
 * @export
 * @interface FolderData
 */
export interface FolderData {
    /**
     *
     * @type {string}
     * @memberof FolderData
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof FolderData
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof FolderData
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof FolderData
     */
    'ownerId'?: string;
    /**
     *
     * @type {string}
     * @memberof FolderData
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof FolderData
     */
    'accessKeyId': string;
    /**
     *
     * @type {string}
     * @memberof FolderData
     */
    'endpoint': string;
    /**
     *
     * @type {string}
     * @memberof FolderData
     */
    'region'?: string;
    /**
     *
     * @type {string}
     * @memberof FolderData
     */
    'bucket': string;
    /**
     *
     * @type {string}
     * @memberof FolderData
     */
    'prefix'?: string;
}
/**
 *
 * @export
 * @interface FolderObjectData
 */
export interface FolderObjectData {
    /**
     *
     * @type {string}
     * @memberof FolderObjectData
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof FolderObjectData
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof FolderObjectData
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof FolderObjectData
     */
    'objectKey': string;
    /**
     *
     * @type {FolderObjectDataFolder}
     * @memberof FolderObjectData
     */
    'folder': FolderObjectDataFolder;
    /**
     *
     * @type {{ [key: string]: ContentAttributesType | undefined; }}
     * @memberof FolderObjectData
     */
    'contentAttributes': {
        [key: string]: ContentAttributesType | undefined;
    };
    /**
     *
     * @type {{ [key: string]: { [key: string]: MetadataEntry | undefined; } | undefined; }}
     * @memberof FolderObjectData
     */
    'contentMetadata': {
        [key: string]: {
            [key: string]: MetadataEntry | undefined;
        } | undefined;
    };
    /**
     *
     * @type {string}
     * @memberof FolderObjectData
     */
    'hash'?: string;
    /**
     *
     * @type {number}
     * @memberof FolderObjectData
     */
    'lastModified': number;
    /**
     *
     * @type {Array<string>}
     * @memberof FolderObjectData
     */
    'tags': Array<string>;
    /**
     *
     * @type {string}
     * @memberof FolderObjectData
     */
    'eTag': string;
    /**
     *
     * @type {number}
     * @memberof FolderObjectData
     */
    'sizeBytes': number;
    /**
     *
     * @type {MediaType}
     * @memberof FolderObjectData
     */
    'mediaType': MediaType;
    /**
     *
     * @type {string}
     * @memberof FolderObjectData
     */
    'mimeType': string;
}
/**
 *
 * @export
 * @interface FolderObjectDataFolder
 */
export interface FolderObjectDataFolder {
    /**
     *
     * @type {string}
     * @memberof FolderObjectDataFolder
     */
    'id': string;
}
/**
 *
 * @export
 * @interface FolderOperationData
 */
export interface FolderOperationData {
    /**
     *
     * @type {string}
     * @memberof FolderOperationData
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof FolderOperationData
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof FolderOperationData
     */
    'id': string;
    /**
     *
     * @type {FolderOperationName}
     * @memberof FolderOperationData
     */
    'operationName': FolderOperationName;
    /**
     *
     * @type {{ [key: string]: any | undefined; }}
     * @memberof FolderOperationData
     */
    'operationData': {
        [key: string]: any | undefined;
    };
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const FolderOperationName: {
    readonly IndexFolder: "IndexFolder";
    readonly IndexFolderObject: "IndexFolderObject";
    readonly TranscribeAudio: "TranscribeAudio";
    readonly DetectObjects: "DetectObjects";
};
export type FolderOperationName = typeof FolderOperationName[keyof typeof FolderOperationName];
/**
 *
 * @export
 * @interface FolderOperationRequestPayload
 */
export interface FolderOperationRequestPayload {
    /**
     *
     * @type {FolderOperationName}
     * @memberof FolderOperationRequestPayload
     */
    'operationName': FolderOperationName;
    /**
     *
     * @type {{ [key: string]: any | undefined; }}
     * @memberof FolderOperationRequestPayload
     */
    'operationData': {
        [key: string]: any | undefined;
    };
}
/**
 *
 * @export
 * @interface FolderOperationsResponse
 */
export interface FolderOperationsResponse {
    /**
     *
     * @type {ListFolderObjects200ResponseMeta}
     * @memberof FolderOperationsResponse
     */
    'meta': ListFolderObjects200ResponseMeta;
    /**
     *
     * @type {Array<FolderOperationData>}
     * @memberof FolderOperationsResponse
     */
    'result': Array<FolderOperationData>;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const FolderPermissionName: {
    readonly FolderRefresh: "folder_refresh";
    readonly FolderManageShares: "folder_manage_shares";
    readonly FolderForget: "folder_forget";
    readonly ObjectEdit: "object_edit";
    readonly ObjectManage: "object_manage";
    readonly TagCreate: "tag_create";
    readonly TagAssociate: "tag_associate";
};
export type FolderPermissionName = typeof FolderPermissionName[keyof typeof FolderPermissionName];
/**
 *
 * @export
 * @interface FolderShareConfig
 */
export interface FolderShareConfig {
    /**
     *
     * @type {Array<FolderPermissionName>}
     * @memberof FolderShareConfig
     */
    'permissions': Array<FolderPermissionName>;
}
/**
 *
 * @export
 * @interface FolderShareData
 */
export interface FolderShareData {
    /**
     *
     * @type {string}
     * @memberof FolderShareData
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof FolderShareData
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof FolderShareData
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof FolderShareData
     */
    'userId'?: string;
    /**
     *
     * @type {string}
     * @memberof FolderShareData
     */
    'userLabel': string;
    /**
     *
     * @type {string}
     * @memberof FolderShareData
     */
    'userInviteEmail': string;
    /**
     *
     * @type {FolderObjectDataFolder}
     * @memberof FolderShareData
     */
    'folder': FolderObjectDataFolder;
    /**
     *
     * @type {FolderShareConfig}
     * @memberof FolderShareData
     */
    'shareConfiguration': FolderShareConfig;
}
/**
 *
 * @export
 * @interface GetFolder200Response
 */
export interface GetFolder200Response {
    /**
     *
     * @type {Array<FolderPermissionName>}
     * @memberof GetFolder200Response
     */
    'permissions': Array<FolderPermissionName>;
    /**
     *
     * @type {FolderData}
     * @memberof GetFolder200Response
     */
    'folder': FolderData;
}
/**
 *
 * @export
 * @interface GetFolderMetadata200Response
 */
export interface GetFolderMetadata200Response {
    /**
     *
     * @type {number}
     * @memberof GetFolderMetadata200Response
     */
    'totalSizeBytes': number;
    /**
     *
     * @type {number}
     * @memberof GetFolderMetadata200Response
     */
    'totalCount': number;
}
/**
 *
 * @export
 * @interface GetViewer200Response
 */
export interface GetViewer200Response {
    /**
     *
     * @type {UserData}
     * @memberof GetViewer200Response
     */
    'data': UserData;
}
/**
 *
 * @export
 * @interface ListFolderObjects200Response
 */
export interface ListFolderObjects200Response {
    /**
     *
     * @type {ListFolderObjects200ResponseMeta}
     * @memberof ListFolderObjects200Response
     */
    'meta': ListFolderObjects200ResponseMeta;
    /**
     *
     * @type {Array<FolderObjectData>}
     * @memberof ListFolderObjects200Response
     */
    'result': Array<FolderObjectData>;
}
/**
 *
 * @export
 * @interface ListFolderObjects200ResponseMeta
 */
export interface ListFolderObjects200ResponseMeta {
    /**
     *
     * @type {number}
     * @memberof ListFolderObjects200ResponseMeta
     */
    'totalCount': number;
}
/**
 *
 * @export
 * @interface ListFolderShares200Response
 */
export interface ListFolderShares200Response {
    /**
     *
     * @type {ListFolderObjects200ResponseMeta}
     * @memberof ListFolderShares200Response
     */
    'meta': ListFolderObjects200ResponseMeta;
    /**
     *
     * @type {Array<FolderShareData>}
     * @memberof ListFolderShares200Response
     */
    'result': Array<FolderShareData>;
}
/**
 *
 * @export
 * @interface ListFoldersResponse
 */
export interface ListFoldersResponse {
    /**
     *
     * @type {ListFolderObjects200ResponseMeta}
     * @memberof ListFoldersResponse
     */
    'meta': ListFolderObjects200ResponseMeta;
    /**
     *
     * @type {Array<FolderAndPermission>}
     * @memberof ListFoldersResponse
     */
    'result': Array<FolderAndPermission>;
}
/**
 *
 * @export
 * @interface ListS3Connections200Response
 */
export interface ListS3Connections200Response {
    /**
     *
     * @type {Array<S3ConnectionData>}
     * @memberof ListS3Connections200Response
     */
    'result': Array<S3ConnectionData>;
    /**
     *
     * @type {ListFolderObjects200ResponseMeta}
     * @memberof ListS3Connections200Response
     */
    'meta': ListFolderObjects200ResponseMeta;
}
/**
 *
 * @export
 * @interface ListTags200Response
 */
export interface ListTags200Response {
    /**
     *
     * @type {ListFolderObjects200ResponseMeta}
     * @memberof ListTags200Response
     */
    'meta': ListFolderObjects200ResponseMeta;
    /**
     *
     * @type {Array<ObjectTagData>}
     * @memberof ListTags200Response
     */
    'result': Array<ObjectTagData>;
}
/**
 *
 * @export
 * @interface LoginParams
 */
export interface LoginParams {
    /**
     *
     * @type {string}
     * @memberof LoginParams
     */
    'login': string;
    /**
     *
     * @type {string}
     * @memberof LoginParams
     */
    'password': string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const MediaType: {
    readonly Image: "IMAGE";
    readonly Video: "VIDEO";
    readonly Audio: "AUDIO";
    readonly Document: "DOCUMENT";
    readonly Unknown: "UNKNOWN";
};
export type MediaType = typeof MediaType[keyof typeof MediaType];
/**
 *
 * @export
 * @interface MetadataEntry
 */
export interface MetadataEntry {
    /**
     *
     * @type {string}
     * @memberof MetadataEntry
     */
    'mimeType': string;
    /**
     *
     * @type {number}
     * @memberof MetadataEntry
     */
    'size': number;
    /**
     *
     * @type {string}
     * @memberof MetadataEntry
     */
    'hash': string;
}
/**
 *
 * @export
 * @interface MetadataUploadUrlsResponse
 */
export interface MetadataUploadUrlsResponse {
    /**
     *
     * @type {string}
     * @memberof MetadataUploadUrlsResponse
     */
    'folderId': string;
    /**
     *
     * @type {string}
     * @memberof MetadataUploadUrlsResponse
     */
    'objectKey': string;
    /**
     *
     * @type {{ [key: string]: string | undefined; }}
     * @memberof MetadataUploadUrlsResponse
     */
    'urls': {
        [key: string]: string | undefined;
    };
}
/**
 *
 * @export
 * @interface ObjectTagData
 */
export interface ObjectTagData {
    /**
     *
     * @type {string}
     * @memberof ObjectTagData
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof ObjectTagData
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof ObjectTagData
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof ObjectTagData
     */
    'name': string;
}
/**
 *
 * @export
 * @interface OutputUploadUrlsResponse
 */
export interface OutputUploadUrlsResponse {
    /**
     *
     * @type {string}
     * @memberof OutputUploadUrlsResponse
     */
    'folderId': string;
    /**
     *
     * @type {string}
     * @memberof OutputUploadUrlsResponse
     */
    'objectKey': string;
    /**
     *
     * @type {string}
     * @memberof OutputUploadUrlsResponse
     */
    'url': string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const PlatformRole: {
    readonly Anonymous: "ANONYMOUS";
    readonly Authenticated: "AUTHENTICATED";
    readonly Admin: "ADMIN";
    readonly Service: "SERVICE";
};
export type PlatformRole = typeof PlatformRole[keyof typeof PlatformRole];
/**
 *
 * @export
 * @interface RefreshFolderObjectS3MetadataRequest
 */
export interface RefreshFolderObjectS3MetadataRequest {
    /**
     *
     * @type {string}
     * @memberof RefreshFolderObjectS3MetadataRequest
     */
    'eTag'?: string;
}
/**
 *
 * @export
 * @interface S3ConnectionData
 */
export interface S3ConnectionData {
    /**
     *
     * @type {string}
     * @memberof S3ConnectionData
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof S3ConnectionData
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof S3ConnectionData
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof S3ConnectionData
     */
    'ownerId'?: string;
    /**
     *
     * @type {string}
     * @memberof S3ConnectionData
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof S3ConnectionData
     */
    'accessKeyId': string;
    /**
     *
     * @type {string}
     * @memberof S3ConnectionData
     */
    'endpoint': string;
    /**
     *
     * @type {string}
     * @memberof S3ConnectionData
     */
    'region'?: string;
}
/**
 *
 * @export
 * @interface SessionResponse
 */
export interface SessionResponse {
    /**
     *
     * @type {SessionResponseData}
     * @memberof SessionResponse
     */
    'data': SessionResponseData;
}
/**
 *
 * @export
 * @interface SessionResponseData
 */
export interface SessionResponseData {
    /**
     *
     * @type {string}
     * @memberof SessionResponseData
     */
    'expiresAt': string;
    /**
     *
     * @type {string}
     * @memberof SessionResponseData
     */
    'refreshToken': string;
    /**
     *
     * @type {string}
     * @memberof SessionResponseData
     */
    'accessToken': string;
}
/**
 *
 * @export
 * @interface SignedURLsRequest
 */
export interface SignedURLsRequest {
    /**
     *
     * @type {string}
     * @memberof SignedURLsRequest
     */
    'objectIdentifier': string;
    /**
     *
     * @type {SignedURLsRequestMethod}
     * @memberof SignedURLsRequest
     */
    'method': SignedURLsRequestMethod;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const SignedURLsRequestMethod: {
    readonly Put: "PUT";
    readonly Delete: "DELETE";
    readonly Get: "GET";
};
export type SignedURLsRequestMethod = typeof SignedURLsRequestMethod[keyof typeof SignedURLsRequestMethod];
/**
 *
 * @export
 * @interface Signup201Response
 */
export interface Signup201Response {
    /**
     *
     * @type {UserData}
     * @memberof Signup201Response
     */
    'data': UserData;
}
/**
 *
 * @export
 * @interface SignupParams
 */
export interface SignupParams {
    /**
     *
     * @type {string}
     * @memberof SignupParams
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof SignupParams
     */
    'password': string;
}
/**
 *
 * @export
 * @interface SignupRequest
 */
export interface SignupRequest {
    /**
     *
     * @type {SignupParams}
     * @memberof SignupRequest
     */
    'data': SignupParams;
}
/**
 *
 * @export
 * @interface StartJob200ResponseInner
 */
export interface StartJob200ResponseInner {
    /**
     *
     * @type {string}
     * @memberof StartJob200ResponseInner
     */
    'url': string;
    /**
     *
     * @type {string}
     * @memberof StartJob200ResponseInner
     */
    'objectKey': string;
    /**
     *
     * @type {string}
     * @memberof StartJob200ResponseInner
     */
    'folderId': string;
}
/**
 *
 * @export
 * @interface UpdateFolderSharePayload
 */
export interface UpdateFolderSharePayload {
    /**
     *
     * @type {FolderShareConfig}
     * @memberof UpdateFolderSharePayload
     */
    'shareConfiguration': FolderShareConfig;
}
/**
 *
 * @export
 * @interface UserData
 */
export interface UserData {
    /**
     *
     * @type {string}
     * @memberof UserData
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof UserData
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof UserData
     */
    'id': string;
    /**
     *
     * @type {PlatformRole}
     * @memberof UserData
     */
    'role': PlatformRole;
    /**
     *
     * @type {string}
     * @memberof UserData
     */
    'email'?: string;
}
/**
 * AuthApi - axios parameter creator
 * @export
 */
export declare const AuthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {LoginParams} loginParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login: (loginParams: LoginParams, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Given a user\'s credentials, this endpoint will create a new user.
     * @param {SignupRequest} signupRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signup: (signupRequest: SignupRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export declare const AuthApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {LoginParams} loginParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(loginParams: LoginParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionResponse>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionResponse>>;
    /**
     * Given a user\'s credentials, this endpoint will create a new user.
     * @param {SignupRequest} signupRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signup(signupRequest: SignupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signup201Response>>;
};
/**
 * AuthApi - factory interface
 * @export
 */
export declare const AuthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {AuthApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(requestParameters: AuthApiLoginRequest, options?: AxiosRequestConfig): AxiosPromise<SessionResponse>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout(options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken(options?: AxiosRequestConfig): AxiosPromise<SessionResponse>;
    /**
     * Given a user\'s credentials, this endpoint will create a new user.
     * @param {AuthApiSignupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signup(requestParameters: AuthApiSignupRequest, options?: AxiosRequestConfig): AxiosPromise<Signup201Response>;
};
/**
 * Request parameters for login operation in AuthApi.
 * @export
 * @interface AuthApiLoginRequest
 */
export interface AuthApiLoginRequest {
    /**
     *
     * @type {LoginParams}
     * @memberof AuthApiLogin
     */
    readonly loginParams: LoginParams;
}
/**
 * Request parameters for signup operation in AuthApi.
 * @export
 * @interface AuthApiSignupRequest
 */
export interface AuthApiSignupRequest {
    /**
     *
     * @type {SignupRequest}
     * @memberof AuthApiSignup
     */
    readonly signupRequest: SignupRequest;
}
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export declare class AuthApi extends BaseAPI {
    /**
     *
     * @param {AuthApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    login(requestParameters: AuthApiLoginRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SessionResponse, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    logout(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    refreshToken(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SessionResponse, any>>;
    /**
     * Given a user\'s credentials, this endpoint will create a new user.
     * @param {AuthApiSignupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    signup(requestParameters: AuthApiSignupRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Signup201Response, any>>;
}
/**
 * FoldersApi - axios parameter creator
 * @export
 */
export declare const FoldersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateFolderRequest} createFolderRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolder: (createFolderRequest: CreateFolderRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {CreateFolderSharePayload} createFolderSharePayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolderShare: (folderId: string, createFolderSharePayload: CreateFolderSharePayload, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {Array<SignedURLsRequest>} signedURLsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPresignedUrls: (folderId: string, signedURLsRequest: Array<SignedURLsRequest>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSocketAuthentication: (folderId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {CreateTagRequest} createTagRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTag: (folderId: string, createTagRequest: CreateTagRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolder: (folderId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolderObject: (folderId: string, objectKey: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {string} shareId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolderShare: (folderId: string, shareId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {string} tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTag: (folderId: string, tagId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {FolderOperationRequestPayload} folderOperationRequestPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enqueueFolderOperation: (folderId: string, folderOperationRequestPayload: FolderOperationRequestPayload, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolder: (folderId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderMetadata: (folderId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderObject: (folderId: string, objectKey: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {string} [search]
     * @param {string} [tagId]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolderObjects: (folderId: string, search?: string, tagId?: string, offset?: number, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolderOperations: (folderId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolderShares: (folderId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolders: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTags: (folderId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshFolder: (folderId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {RefreshFolderObjectS3MetadataRequest} refreshFolderObjectS3MetadataRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshFolderObjectS3Metadata: (folderId: string, objectKey: string, refreshFolderObjectS3MetadataRequest: RefreshFolderObjectS3MetadataRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {string} tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagObject: (folderId: string, objectKey: string, tagId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {string} tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    untagObject: (folderId: string, objectKey: string, tagId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {string} shareId
     * @param {UpdateFolderSharePayload} updateFolderSharePayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFolderShare: (folderId: string, shareId: string, updateFolderSharePayload: UpdateFolderSharePayload, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {string} tagId
     * @param {CreateTagRequest} createTagRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTag: (folderId: string, tagId: string, createTagRequest: CreateTagRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FoldersApi - functional programming interface
 * @export
 */
export declare const FoldersApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateFolderRequest} createFolderRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolder(createFolderRequest: CreateFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateFolder200Response>>;
    /**
     *
     * @param {string} folderId
     * @param {CreateFolderSharePayload} createFolderSharePayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolderShare(folderId: string, createFolderSharePayload: CreateFolderSharePayload, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderShareData>>;
    /**
     *
     * @param {string} folderId
     * @param {Array<SignedURLsRequest>} signedURLsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPresignedUrls(folderId: string, signedURLsRequest: Array<SignedURLsRequest>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSocketAuthentication(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSocketAuthentication200Response>>;
    /**
     *
     * @param {string} folderId
     * @param {CreateTagRequest} createTagRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTag(folderId: string, createTagRequest: CreateTagRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectTagData>>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolder(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteFolder200Response>>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolderObject(folderId: string, objectKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteFolder200Response>>;
    /**
     *
     * @param {string} folderId
     * @param {string} shareId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolderShare(folderId: string, shareId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteFolder200Response>>;
    /**
     *
     * @param {string} folderId
     * @param {string} tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTag(folderId: string, tagId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteFolder200Response>>;
    /**
     *
     * @param {string} folderId
     * @param {FolderOperationRequestPayload} folderOperationRequestPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enqueueFolderOperation(folderId: string, folderOperationRequestPayload: FolderOperationRequestPayload, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolder(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFolder200Response>>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderMetadata(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFolderMetadata200Response>>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderObject(folderId: string, objectKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderObjectData>>;
    /**
     *
     * @param {string} folderId
     * @param {string} [search]
     * @param {string} [tagId]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolderObjects(folderId: string, search?: string, tagId?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListFolderObjects200Response>>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolderOperations(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderOperationsResponse>>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolderShares(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListFolderShares200Response>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolders(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListFoldersResponse>>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTags(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTags200Response>>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshFolder(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {RefreshFolderObjectS3MetadataRequest} refreshFolderObjectS3MetadataRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshFolderObjectS3Metadata(folderId: string, objectKey: string, refreshFolderObjectS3MetadataRequest: RefreshFolderObjectS3MetadataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderObjectData>>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {string} tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagObject(folderId: string, objectKey: string, tagId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteFolder200Response>>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {string} tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    untagObject(folderId: string, objectKey: string, tagId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteFolder200Response>>;
    /**
     *
     * @param {string} folderId
     * @param {string} shareId
     * @param {UpdateFolderSharePayload} updateFolderSharePayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFolderShare(folderId: string, shareId: string, updateFolderSharePayload: UpdateFolderSharePayload, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderShareData>>;
    /**
     *
     * @param {string} folderId
     * @param {string} tagId
     * @param {CreateTagRequest} createTagRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTag(folderId: string, tagId: string, createTagRequest: CreateTagRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectTagData>>;
};
/**
 * FoldersApi - factory interface
 * @export
 */
export declare const FoldersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {FoldersApiCreateFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolder(requestParameters: FoldersApiCreateFolderRequest, options?: AxiosRequestConfig): AxiosPromise<CreateFolder200Response>;
    /**
     *
     * @param {FoldersApiCreateFolderShareRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolderShare(requestParameters: FoldersApiCreateFolderShareRequest, options?: AxiosRequestConfig): AxiosPromise<FolderShareData>;
    /**
     *
     * @param {FoldersApiCreatePresignedUrlsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPresignedUrls(requestParameters: FoldersApiCreatePresignedUrlsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<string>>;
    /**
     *
     * @param {FoldersApiCreateSocketAuthenticationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSocketAuthentication(requestParameters: FoldersApiCreateSocketAuthenticationRequest, options?: AxiosRequestConfig): AxiosPromise<CreateSocketAuthentication200Response>;
    /**
     *
     * @param {FoldersApiCreateTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTag(requestParameters: FoldersApiCreateTagRequest, options?: AxiosRequestConfig): AxiosPromise<ObjectTagData>;
    /**
     *
     * @param {FoldersApiDeleteFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolder(requestParameters: FoldersApiDeleteFolderRequest, options?: AxiosRequestConfig): AxiosPromise<DeleteFolder200Response>;
    /**
     *
     * @param {FoldersApiDeleteFolderObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolderObject(requestParameters: FoldersApiDeleteFolderObjectRequest, options?: AxiosRequestConfig): AxiosPromise<DeleteFolder200Response>;
    /**
     *
     * @param {FoldersApiDeleteFolderShareRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolderShare(requestParameters: FoldersApiDeleteFolderShareRequest, options?: AxiosRequestConfig): AxiosPromise<DeleteFolder200Response>;
    /**
     *
     * @param {FoldersApiDeleteTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTag(requestParameters: FoldersApiDeleteTagRequest, options?: AxiosRequestConfig): AxiosPromise<DeleteFolder200Response>;
    /**
     *
     * @param {FoldersApiEnqueueFolderOperationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enqueueFolderOperation(requestParameters: FoldersApiEnqueueFolderOperationRequest, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @param {FoldersApiGetFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolder(requestParameters: FoldersApiGetFolderRequest, options?: AxiosRequestConfig): AxiosPromise<GetFolder200Response>;
    /**
     *
     * @param {FoldersApiGetFolderMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderMetadata(requestParameters: FoldersApiGetFolderMetadataRequest, options?: AxiosRequestConfig): AxiosPromise<GetFolderMetadata200Response>;
    /**
     *
     * @param {FoldersApiGetFolderObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderObject(requestParameters: FoldersApiGetFolderObjectRequest, options?: AxiosRequestConfig): AxiosPromise<FolderObjectData>;
    /**
     *
     * @param {FoldersApiListFolderObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolderObjects(requestParameters: FoldersApiListFolderObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<ListFolderObjects200Response>;
    /**
     *
     * @param {FoldersApiListFolderOperationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolderOperations(requestParameters: FoldersApiListFolderOperationsRequest, options?: AxiosRequestConfig): AxiosPromise<FolderOperationsResponse>;
    /**
     *
     * @param {FoldersApiListFolderSharesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolderShares(requestParameters: FoldersApiListFolderSharesRequest, options?: AxiosRequestConfig): AxiosPromise<ListFolderShares200Response>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolders(options?: AxiosRequestConfig): AxiosPromise<ListFoldersResponse>;
    /**
     *
     * @param {FoldersApiListTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTags(requestParameters: FoldersApiListTagsRequest, options?: AxiosRequestConfig): AxiosPromise<ListTags200Response>;
    /**
     *
     * @param {FoldersApiRefreshFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshFolder(requestParameters: FoldersApiRefreshFolderRequest, options?: AxiosRequestConfig): AxiosPromise<boolean>;
    /**
     *
     * @param {FoldersApiRefreshFolderObjectS3MetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshFolderObjectS3Metadata(requestParameters: FoldersApiRefreshFolderObjectS3MetadataRequest, options?: AxiosRequestConfig): AxiosPromise<FolderObjectData>;
    /**
     *
     * @param {FoldersApiTagObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagObject(requestParameters: FoldersApiTagObjectRequest, options?: AxiosRequestConfig): AxiosPromise<DeleteFolder200Response>;
    /**
     *
     * @param {FoldersApiUntagObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    untagObject(requestParameters: FoldersApiUntagObjectRequest, options?: AxiosRequestConfig): AxiosPromise<DeleteFolder200Response>;
    /**
     *
     * @param {FoldersApiUpdateFolderShareRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFolderShare(requestParameters: FoldersApiUpdateFolderShareRequest, options?: AxiosRequestConfig): AxiosPromise<FolderShareData>;
    /**
     *
     * @param {FoldersApiUpdateTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTag(requestParameters: FoldersApiUpdateTagRequest, options?: AxiosRequestConfig): AxiosPromise<ObjectTagData>;
};
/**
 * Request parameters for createFolder operation in FoldersApi.
 * @export
 * @interface FoldersApiCreateFolderRequest
 */
export interface FoldersApiCreateFolderRequest {
    /**
     *
     * @type {CreateFolderRequest}
     * @memberof FoldersApiCreateFolder
     */
    readonly createFolderRequest: CreateFolderRequest;
}
/**
 * Request parameters for createFolderShare operation in FoldersApi.
 * @export
 * @interface FoldersApiCreateFolderShareRequest
 */
export interface FoldersApiCreateFolderShareRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiCreateFolderShare
     */
    readonly folderId: string;
    /**
     *
     * @type {CreateFolderSharePayload}
     * @memberof FoldersApiCreateFolderShare
     */
    readonly createFolderSharePayload: CreateFolderSharePayload;
}
/**
 * Request parameters for createPresignedUrls operation in FoldersApi.
 * @export
 * @interface FoldersApiCreatePresignedUrlsRequest
 */
export interface FoldersApiCreatePresignedUrlsRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiCreatePresignedUrls
     */
    readonly folderId: string;
    /**
     *
     * @type {Array<SignedURLsRequest>}
     * @memberof FoldersApiCreatePresignedUrls
     */
    readonly signedURLsRequest: Array<SignedURLsRequest>;
}
/**
 * Request parameters for createSocketAuthentication operation in FoldersApi.
 * @export
 * @interface FoldersApiCreateSocketAuthenticationRequest
 */
export interface FoldersApiCreateSocketAuthenticationRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiCreateSocketAuthentication
     */
    readonly folderId: string;
}
/**
 * Request parameters for createTag operation in FoldersApi.
 * @export
 * @interface FoldersApiCreateTagRequest
 */
export interface FoldersApiCreateTagRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiCreateTag
     */
    readonly folderId: string;
    /**
     *
     * @type {CreateTagRequest}
     * @memberof FoldersApiCreateTag
     */
    readonly createTagRequest: CreateTagRequest;
}
/**
 * Request parameters for deleteFolder operation in FoldersApi.
 * @export
 * @interface FoldersApiDeleteFolderRequest
 */
export interface FoldersApiDeleteFolderRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiDeleteFolder
     */
    readonly folderId: string;
}
/**
 * Request parameters for deleteFolderObject operation in FoldersApi.
 * @export
 * @interface FoldersApiDeleteFolderObjectRequest
 */
export interface FoldersApiDeleteFolderObjectRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiDeleteFolderObject
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiDeleteFolderObject
     */
    readonly objectKey: string;
}
/**
 * Request parameters for deleteFolderShare operation in FoldersApi.
 * @export
 * @interface FoldersApiDeleteFolderShareRequest
 */
export interface FoldersApiDeleteFolderShareRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiDeleteFolderShare
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiDeleteFolderShare
     */
    readonly shareId: string;
}
/**
 * Request parameters for deleteTag operation in FoldersApi.
 * @export
 * @interface FoldersApiDeleteTagRequest
 */
export interface FoldersApiDeleteTagRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiDeleteTag
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiDeleteTag
     */
    readonly tagId: string;
}
/**
 * Request parameters for enqueueFolderOperation operation in FoldersApi.
 * @export
 * @interface FoldersApiEnqueueFolderOperationRequest
 */
export interface FoldersApiEnqueueFolderOperationRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiEnqueueFolderOperation
     */
    readonly folderId: string;
    /**
     *
     * @type {FolderOperationRequestPayload}
     * @memberof FoldersApiEnqueueFolderOperation
     */
    readonly folderOperationRequestPayload: FolderOperationRequestPayload;
}
/**
 * Request parameters for getFolder operation in FoldersApi.
 * @export
 * @interface FoldersApiGetFolderRequest
 */
export interface FoldersApiGetFolderRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiGetFolder
     */
    readonly folderId: string;
}
/**
 * Request parameters for getFolderMetadata operation in FoldersApi.
 * @export
 * @interface FoldersApiGetFolderMetadataRequest
 */
export interface FoldersApiGetFolderMetadataRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiGetFolderMetadata
     */
    readonly folderId: string;
}
/**
 * Request parameters for getFolderObject operation in FoldersApi.
 * @export
 * @interface FoldersApiGetFolderObjectRequest
 */
export interface FoldersApiGetFolderObjectRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiGetFolderObject
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiGetFolderObject
     */
    readonly objectKey: string;
}
/**
 * Request parameters for listFolderObjects operation in FoldersApi.
 * @export
 * @interface FoldersApiListFolderObjectsRequest
 */
export interface FoldersApiListFolderObjectsRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiListFolderObjects
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiListFolderObjects
     */
    readonly search?: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiListFolderObjects
     */
    readonly tagId?: string;
    /**
     *
     * @type {number}
     * @memberof FoldersApiListFolderObjects
     */
    readonly offset?: number;
    /**
     *
     * @type {number}
     * @memberof FoldersApiListFolderObjects
     */
    readonly limit?: number;
}
/**
 * Request parameters for listFolderOperations operation in FoldersApi.
 * @export
 * @interface FoldersApiListFolderOperationsRequest
 */
export interface FoldersApiListFolderOperationsRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiListFolderOperations
     */
    readonly folderId: string;
}
/**
 * Request parameters for listFolderShares operation in FoldersApi.
 * @export
 * @interface FoldersApiListFolderSharesRequest
 */
export interface FoldersApiListFolderSharesRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiListFolderShares
     */
    readonly folderId: string;
}
/**
 * Request parameters for listTags operation in FoldersApi.
 * @export
 * @interface FoldersApiListTagsRequest
 */
export interface FoldersApiListTagsRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiListTags
     */
    readonly folderId: string;
}
/**
 * Request parameters for refreshFolder operation in FoldersApi.
 * @export
 * @interface FoldersApiRefreshFolderRequest
 */
export interface FoldersApiRefreshFolderRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiRefreshFolder
     */
    readonly folderId: string;
}
/**
 * Request parameters for refreshFolderObjectS3Metadata operation in FoldersApi.
 * @export
 * @interface FoldersApiRefreshFolderObjectS3MetadataRequest
 */
export interface FoldersApiRefreshFolderObjectS3MetadataRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiRefreshFolderObjectS3Metadata
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiRefreshFolderObjectS3Metadata
     */
    readonly objectKey: string;
    /**
     *
     * @type {RefreshFolderObjectS3MetadataRequest}
     * @memberof FoldersApiRefreshFolderObjectS3Metadata
     */
    readonly refreshFolderObjectS3MetadataRequest: RefreshFolderObjectS3MetadataRequest;
}
/**
 * Request parameters for tagObject operation in FoldersApi.
 * @export
 * @interface FoldersApiTagObjectRequest
 */
export interface FoldersApiTagObjectRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiTagObject
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiTagObject
     */
    readonly objectKey: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiTagObject
     */
    readonly tagId: string;
}
/**
 * Request parameters for untagObject operation in FoldersApi.
 * @export
 * @interface FoldersApiUntagObjectRequest
 */
export interface FoldersApiUntagObjectRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiUntagObject
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiUntagObject
     */
    readonly objectKey: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiUntagObject
     */
    readonly tagId: string;
}
/**
 * Request parameters for updateFolderShare operation in FoldersApi.
 * @export
 * @interface FoldersApiUpdateFolderShareRequest
 */
export interface FoldersApiUpdateFolderShareRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiUpdateFolderShare
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiUpdateFolderShare
     */
    readonly shareId: string;
    /**
     *
     * @type {UpdateFolderSharePayload}
     * @memberof FoldersApiUpdateFolderShare
     */
    readonly updateFolderSharePayload: UpdateFolderSharePayload;
}
/**
 * Request parameters for updateTag operation in FoldersApi.
 * @export
 * @interface FoldersApiUpdateTagRequest
 */
export interface FoldersApiUpdateTagRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiUpdateTag
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiUpdateTag
     */
    readonly tagId: string;
    /**
     *
     * @type {CreateTagRequest}
     * @memberof FoldersApiUpdateTag
     */
    readonly createTagRequest: CreateTagRequest;
}
/**
 * FoldersApi - object-oriented interface
 * @export
 * @class FoldersApi
 * @extends {BaseAPI}
 */
export declare class FoldersApi extends BaseAPI {
    /**
     *
     * @param {FoldersApiCreateFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    createFolder(requestParameters: FoldersApiCreateFolderRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateFolder200Response, any>>;
    /**
     *
     * @param {FoldersApiCreateFolderShareRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    createFolderShare(requestParameters: FoldersApiCreateFolderShareRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FolderShareData, any>>;
    /**
     *
     * @param {FoldersApiCreatePresignedUrlsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    createPresignedUrls(requestParameters: FoldersApiCreatePresignedUrlsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string[], any>>;
    /**
     *
     * @param {FoldersApiCreateSocketAuthenticationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    createSocketAuthentication(requestParameters: FoldersApiCreateSocketAuthenticationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateSocketAuthentication200Response, any>>;
    /**
     *
     * @param {FoldersApiCreateTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    createTag(requestParameters: FoldersApiCreateTagRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ObjectTagData, any>>;
    /**
     *
     * @param {FoldersApiDeleteFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    deleteFolder(requestParameters: FoldersApiDeleteFolderRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteFolder200Response, any>>;
    /**
     *
     * @param {FoldersApiDeleteFolderObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    deleteFolderObject(requestParameters: FoldersApiDeleteFolderObjectRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteFolder200Response, any>>;
    /**
     *
     * @param {FoldersApiDeleteFolderShareRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    deleteFolderShare(requestParameters: FoldersApiDeleteFolderShareRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteFolder200Response, any>>;
    /**
     *
     * @param {FoldersApiDeleteTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    deleteTag(requestParameters: FoldersApiDeleteTagRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteFolder200Response, any>>;
    /**
     *
     * @param {FoldersApiEnqueueFolderOperationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    enqueueFolderOperation(requestParameters: FoldersApiEnqueueFolderOperationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @param {FoldersApiGetFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    getFolder(requestParameters: FoldersApiGetFolderRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetFolder200Response, any>>;
    /**
     *
     * @param {FoldersApiGetFolderMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    getFolderMetadata(requestParameters: FoldersApiGetFolderMetadataRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetFolderMetadata200Response, any>>;
    /**
     *
     * @param {FoldersApiGetFolderObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    getFolderObject(requestParameters: FoldersApiGetFolderObjectRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FolderObjectData, any>>;
    /**
     *
     * @param {FoldersApiListFolderObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    listFolderObjects(requestParameters: FoldersApiListFolderObjectsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListFolderObjects200Response, any>>;
    /**
     *
     * @param {FoldersApiListFolderOperationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    listFolderOperations(requestParameters: FoldersApiListFolderOperationsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FolderOperationsResponse, any>>;
    /**
     *
     * @param {FoldersApiListFolderSharesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    listFolderShares(requestParameters: FoldersApiListFolderSharesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListFolderShares200Response, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    listFolders(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListFoldersResponse, any>>;
    /**
     *
     * @param {FoldersApiListTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    listTags(requestParameters: FoldersApiListTagsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListTags200Response, any>>;
    /**
     *
     * @param {FoldersApiRefreshFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    refreshFolder(requestParameters: FoldersApiRefreshFolderRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<boolean, any>>;
    /**
     *
     * @param {FoldersApiRefreshFolderObjectS3MetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    refreshFolderObjectS3Metadata(requestParameters: FoldersApiRefreshFolderObjectS3MetadataRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FolderObjectData, any>>;
    /**
     *
     * @param {FoldersApiTagObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    tagObject(requestParameters: FoldersApiTagObjectRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteFolder200Response, any>>;
    /**
     *
     * @param {FoldersApiUntagObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    untagObject(requestParameters: FoldersApiUntagObjectRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteFolder200Response, any>>;
    /**
     *
     * @param {FoldersApiUpdateFolderShareRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    updateFolderShare(requestParameters: FoldersApiUpdateFolderShareRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FolderShareData, any>>;
    /**
     *
     * @param {FoldersApiUpdateTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    updateTag(requestParameters: FoldersApiUpdateTagRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ObjectTagData, any>>;
}
/**
 * S3ConnectionsApi - axios parameter creator
 * @export
 */
export declare const S3ConnectionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateS3ConnectionRequest} createS3ConnectionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createS3Connection: (createS3ConnectionRequest: CreateS3ConnectionRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} s3ConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteS3Connection: (s3ConnectionId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} s3ConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getS3Connection: (s3ConnectionId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listS3Connections: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {CreateS3ConnectionRequest} createS3ConnectionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testS3Connection: (createS3ConnectionRequest: CreateS3ConnectionRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * S3ConnectionsApi - functional programming interface
 * @export
 */
export declare const S3ConnectionsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {CreateS3ConnectionRequest} createS3ConnectionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createS3Connection(createS3ConnectionRequest: CreateS3ConnectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<S3ConnectionData>>;
    /**
     *
     * @param {string} s3ConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteS3Connection(s3ConnectionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteFolder200Response>>;
    /**
     *
     * @param {string} s3ConnectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getS3Connection(s3ConnectionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<S3ConnectionData>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listS3Connections(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListS3Connections200Response>>;
    /**
     *
     * @param {CreateS3ConnectionRequest} createS3ConnectionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testS3Connection(createS3ConnectionRequest: CreateS3ConnectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteFolder200Response>>;
};
/**
 * S3ConnectionsApi - factory interface
 * @export
 */
export declare const S3ConnectionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {S3ConnectionsApiCreateS3ConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createS3Connection(requestParameters: S3ConnectionsApiCreateS3ConnectionRequest, options?: AxiosRequestConfig): AxiosPromise<S3ConnectionData>;
    /**
     *
     * @param {S3ConnectionsApiDeleteS3ConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteS3Connection(requestParameters: S3ConnectionsApiDeleteS3ConnectionRequest, options?: AxiosRequestConfig): AxiosPromise<DeleteFolder200Response>;
    /**
     *
     * @param {S3ConnectionsApiGetS3ConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getS3Connection(requestParameters: S3ConnectionsApiGetS3ConnectionRequest, options?: AxiosRequestConfig): AxiosPromise<S3ConnectionData>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listS3Connections(options?: AxiosRequestConfig): AxiosPromise<ListS3Connections200Response>;
    /**
     *
     * @param {S3ConnectionsApiTestS3ConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testS3Connection(requestParameters: S3ConnectionsApiTestS3ConnectionRequest, options?: AxiosRequestConfig): AxiosPromise<DeleteFolder200Response>;
};
/**
 * Request parameters for createS3Connection operation in S3ConnectionsApi.
 * @export
 * @interface S3ConnectionsApiCreateS3ConnectionRequest
 */
export interface S3ConnectionsApiCreateS3ConnectionRequest {
    /**
     *
     * @type {CreateS3ConnectionRequest}
     * @memberof S3ConnectionsApiCreateS3Connection
     */
    readonly createS3ConnectionRequest: CreateS3ConnectionRequest;
}
/**
 * Request parameters for deleteS3Connection operation in S3ConnectionsApi.
 * @export
 * @interface S3ConnectionsApiDeleteS3ConnectionRequest
 */
export interface S3ConnectionsApiDeleteS3ConnectionRequest {
    /**
     *
     * @type {string}
     * @memberof S3ConnectionsApiDeleteS3Connection
     */
    readonly s3ConnectionId: string;
}
/**
 * Request parameters for getS3Connection operation in S3ConnectionsApi.
 * @export
 * @interface S3ConnectionsApiGetS3ConnectionRequest
 */
export interface S3ConnectionsApiGetS3ConnectionRequest {
    /**
     *
     * @type {string}
     * @memberof S3ConnectionsApiGetS3Connection
     */
    readonly s3ConnectionId: string;
}
/**
 * Request parameters for testS3Connection operation in S3ConnectionsApi.
 * @export
 * @interface S3ConnectionsApiTestS3ConnectionRequest
 */
export interface S3ConnectionsApiTestS3ConnectionRequest {
    /**
     *
     * @type {CreateS3ConnectionRequest}
     * @memberof S3ConnectionsApiTestS3Connection
     */
    readonly createS3ConnectionRequest: CreateS3ConnectionRequest;
}
/**
 * S3ConnectionsApi - object-oriented interface
 * @export
 * @class S3ConnectionsApi
 * @extends {BaseAPI}
 */
export declare class S3ConnectionsApi extends BaseAPI {
    /**
     *
     * @param {S3ConnectionsApiCreateS3ConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof S3ConnectionsApi
     */
    createS3Connection(requestParameters: S3ConnectionsApiCreateS3ConnectionRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<S3ConnectionData, any>>;
    /**
     *
     * @param {S3ConnectionsApiDeleteS3ConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof S3ConnectionsApi
     */
    deleteS3Connection(requestParameters: S3ConnectionsApiDeleteS3ConnectionRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteFolder200Response, any>>;
    /**
     *
     * @param {S3ConnectionsApiGetS3ConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof S3ConnectionsApi
     */
    getS3Connection(requestParameters: S3ConnectionsApiGetS3ConnectionRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<S3ConnectionData, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof S3ConnectionsApi
     */
    listS3Connections(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListS3Connections200Response, any>>;
    /**
     *
     * @param {S3ConnectionsApiTestS3ConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof S3ConnectionsApi
     */
    testS3Connection(requestParameters: S3ConnectionsApiTestS3ConnectionRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteFolder200Response, any>>;
}
/**
 * ViewerApi - axios parameter creator
 * @export
 */
export declare const ViewerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getViewer: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ViewerApi - functional programming interface
 * @export
 */
export declare const ViewerApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getViewer(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetViewer200Response>>;
};
/**
 * ViewerApi - factory interface
 * @export
 */
export declare const ViewerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getViewer(options?: AxiosRequestConfig): AxiosPromise<GetViewer200Response>;
};
/**
 * ViewerApi - object-oriented interface
 * @export
 * @class ViewerApi
 * @extends {BaseAPI}
 */
export declare class ViewerApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewerApi
     */
    getViewer(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetViewer200Response, any>>;
}
/**
 * WorkerApi - axios parameter creator
 * @export
 */
export declare const WorkerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} operationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeJob: (operationId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} operationId
     * @param {CreateMetadataUploadUrlsPayload} createMetadataUploadUrlsPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMetadataUploadUrls: (operationId: string, createMetadataUploadUrlsPayload: CreateMetadataUploadUrlsPayload, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} operationId
     * @param {CreateOutputUploadUrlsPayload} createOutputUploadUrlsPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutputUploadUrls: (operationId: string, createOutputUploadUrlsPayload: CreateOutputUploadUrlsPayload, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} operationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startJob: (operationId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {Array<ContentAttibutesPayload>} contentAttibutesPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContentAttributes: (contentAttibutesPayload: Array<ContentAttibutesPayload>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {Array<ContentMetadataPayload>} contentMetadataPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContentMetadata: (contentMetadataPayload: Array<ContentMetadataPayload>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * WorkerApi - functional programming interface
 * @export
 */
export declare const WorkerApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} operationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeJob(operationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {string} operationId
     * @param {CreateMetadataUploadUrlsPayload} createMetadataUploadUrlsPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMetadataUploadUrls(operationId: string, createMetadataUploadUrlsPayload: CreateMetadataUploadUrlsPayload, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMetadataUploadUrls200Response>>;
    /**
     *
     * @param {string} operationId
     * @param {CreateOutputUploadUrlsPayload} createOutputUploadUrlsPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutputUploadUrls(operationId: string, createOutputUploadUrlsPayload: CreateOutputUploadUrlsPayload, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOutputUploadUrls200Response>>;
    /**
     *
     * @param {string} operationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startJob(operationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StartJob200ResponseInner>>>;
    /**
     *
     * @param {Array<ContentAttibutesPayload>} contentAttibutesPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContentAttributes(contentAttibutesPayload: Array<ContentAttibutesPayload>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {Array<ContentMetadataPayload>} contentMetadataPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContentMetadata(contentMetadataPayload: Array<ContentMetadataPayload>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * WorkerApi - factory interface
 * @export
 */
export declare const WorkerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {WorkerApiCompleteJobRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeJob(requestParameters: WorkerApiCompleteJobRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @param {WorkerApiCreateMetadataUploadUrlsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMetadataUploadUrls(requestParameters: WorkerApiCreateMetadataUploadUrlsRequest, options?: AxiosRequestConfig): AxiosPromise<CreateMetadataUploadUrls200Response>;
    /**
     *
     * @param {WorkerApiCreateOutputUploadUrlsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOutputUploadUrls(requestParameters: WorkerApiCreateOutputUploadUrlsRequest, options?: AxiosRequestConfig): AxiosPromise<CreateOutputUploadUrls200Response>;
    /**
     *
     * @param {WorkerApiStartJobRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startJob(requestParameters: WorkerApiStartJobRequest, options?: AxiosRequestConfig): AxiosPromise<Array<StartJob200ResponseInner>>;
    /**
     *
     * @param {WorkerApiUpdateContentAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContentAttributes(requestParameters: WorkerApiUpdateContentAttributesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @param {WorkerApiUpdateContentMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContentMetadata(requestParameters: WorkerApiUpdateContentMetadataRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
};
/**
 * Request parameters for completeJob operation in WorkerApi.
 * @export
 * @interface WorkerApiCompleteJobRequest
 */
export interface WorkerApiCompleteJobRequest {
    /**
     *
     * @type {string}
     * @memberof WorkerApiCompleteJob
     */
    readonly operationId: string;
}
/**
 * Request parameters for createMetadataUploadUrls operation in WorkerApi.
 * @export
 * @interface WorkerApiCreateMetadataUploadUrlsRequest
 */
export interface WorkerApiCreateMetadataUploadUrlsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkerApiCreateMetadataUploadUrls
     */
    readonly operationId: string;
    /**
     *
     * @type {CreateMetadataUploadUrlsPayload}
     * @memberof WorkerApiCreateMetadataUploadUrls
     */
    readonly createMetadataUploadUrlsPayload: CreateMetadataUploadUrlsPayload;
}
/**
 * Request parameters for createOutputUploadUrls operation in WorkerApi.
 * @export
 * @interface WorkerApiCreateOutputUploadUrlsRequest
 */
export interface WorkerApiCreateOutputUploadUrlsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkerApiCreateOutputUploadUrls
     */
    readonly operationId: string;
    /**
     *
     * @type {CreateOutputUploadUrlsPayload}
     * @memberof WorkerApiCreateOutputUploadUrls
     */
    readonly createOutputUploadUrlsPayload: CreateOutputUploadUrlsPayload;
}
/**
 * Request parameters for startJob operation in WorkerApi.
 * @export
 * @interface WorkerApiStartJobRequest
 */
export interface WorkerApiStartJobRequest {
    /**
     *
     * @type {string}
     * @memberof WorkerApiStartJob
     */
    readonly operationId: string;
}
/**
 * Request parameters for updateContentAttributes operation in WorkerApi.
 * @export
 * @interface WorkerApiUpdateContentAttributesRequest
 */
export interface WorkerApiUpdateContentAttributesRequest {
    /**
     *
     * @type {Array<ContentAttibutesPayload>}
     * @memberof WorkerApiUpdateContentAttributes
     */
    readonly contentAttibutesPayload: Array<ContentAttibutesPayload>;
}
/**
 * Request parameters for updateContentMetadata operation in WorkerApi.
 * @export
 * @interface WorkerApiUpdateContentMetadataRequest
 */
export interface WorkerApiUpdateContentMetadataRequest {
    /**
     *
     * @type {Array<ContentMetadataPayload>}
     * @memberof WorkerApiUpdateContentMetadata
     */
    readonly contentMetadataPayload: Array<ContentMetadataPayload>;
}
/**
 * WorkerApi - object-oriented interface
 * @export
 * @class WorkerApi
 * @extends {BaseAPI}
 */
export declare class WorkerApi extends BaseAPI {
    /**
     *
     * @param {WorkerApiCompleteJobRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApi
     */
    completeJob(requestParameters: WorkerApiCompleteJobRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @param {WorkerApiCreateMetadataUploadUrlsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApi
     */
    createMetadataUploadUrls(requestParameters: WorkerApiCreateMetadataUploadUrlsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateMetadataUploadUrls200Response, any>>;
    /**
     *
     * @param {WorkerApiCreateOutputUploadUrlsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApi
     */
    createOutputUploadUrls(requestParameters: WorkerApiCreateOutputUploadUrlsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOutputUploadUrls200Response, any>>;
    /**
     *
     * @param {WorkerApiStartJobRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApi
     */
    startJob(requestParameters: WorkerApiStartJobRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StartJob200ResponseInner[], any>>;
    /**
     *
     * @param {WorkerApiUpdateContentAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApi
     */
    updateContentAttributes(requestParameters: WorkerApiUpdateContentAttributesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @param {WorkerApiUpdateContentMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApi
     */
    updateContentMetadata(requestParameters: WorkerApiUpdateContentMetadataRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
