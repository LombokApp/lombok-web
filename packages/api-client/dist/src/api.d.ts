/**
 * @stellariscloud/api
 * The Stellaris Cloud core API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface EventDTO
 */
export interface EventDTO {
    /**
     *
     * @type {string}
     * @memberof EventDTO
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof EventDTO
     */
    'eventKey': string;
}
/**
 *
 * @export
 * @interface LoginCredentialsDTO
 */
export interface LoginCredentialsDTO {
    /**
     *
     * @type {string}
     * @memberof LoginCredentialsDTO
     */
    'login': string;
    /**
     *
     * @type {string}
     * @memberof LoginCredentialsDTO
     */
    'password': string;
}
/**
 *
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     *
     * @type {LoginResponseSession}
     * @memberof LoginResponse
     */
    'session': LoginResponseSession;
}
/**
 *
 * @export
 * @interface LoginResponseSession
 */
export interface LoginResponseSession {
    /**
     *
     * @type {string}
     * @memberof LoginResponseSession
     */
    'accessToken': string;
    /**
     *
     * @type {string}
     * @memberof LoginResponseSession
     */
    'refreshToken': string;
}
/**
 *
 * @export
 * @interface SignupCredentialsDTO
 */
export interface SignupCredentialsDTO {
    /**
     *
     * @type {string}
     * @memberof SignupCredentialsDTO
     */
    'username': string;
    /**
     *
     * @type {string}
     * @memberof SignupCredentialsDTO
     */
    'email'?: string;
    /**
     *
     * @type {string}
     * @memberof SignupCredentialsDTO
     */
    'password': string;
}
/**
 *
 * @export
 * @interface SignupResponse
 */
export interface SignupResponse {
    /**
     *
     * @type {UserDTO}
     * @memberof SignupResponse
     */
    'user': UserDTO;
}
/**
 *
 * @export
 * @interface UpdateViewerInputDTO
 */
export interface UpdateViewerInputDTO {
    /**
     *
     * @type {string}
     * @memberof UpdateViewerInputDTO
     */
    'name': string;
}
/**
 *
 * @export
 * @interface UserDTO
 */
export interface UserDTO {
    /**
     *
     * @type {any}
     * @memberof UserDTO
     */
    'name'?: any;
    /**
     *
     * @type {any}
     * @memberof UserDTO
     */
    'email'?: any;
    /**
     *
     * @type {boolean}
     * @memberof UserDTO
     */
    'emailVerified': boolean;
    /**
     *
     * @type {boolean}
     * @memberof UserDTO
     */
    'isAdmin': boolean;
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    'username': string;
    /**
     *
     * @type {Array<string>}
     * @memberof UserDTO
     */
    'permissions': Array<string>;
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface ViewerGetResponse
 */
export interface ViewerGetResponse {
    /**
     *
     * @type {ViewerGetResponseUser}
     * @memberof ViewerGetResponse
     */
    'user': ViewerGetResponseUser;
}
/**
 *
 * @export
 * @interface ViewerGetResponseUser
 */
export interface ViewerGetResponseUser {
    /**
     *
     * @type {any}
     * @memberof ViewerGetResponseUser
     */
    'name'?: any;
    /**
     *
     * @type {any}
     * @memberof ViewerGetResponseUser
     */
    'email'?: any;
    /**
     *
     * @type {boolean}
     * @memberof ViewerGetResponseUser
     */
    'emailVerified': boolean;
    /**
     *
     * @type {boolean}
     * @memberof ViewerGetResponseUser
     */
    'isAdmin': boolean;
    /**
     *
     * @type {string}
     * @memberof ViewerGetResponseUser
     */
    'username': string;
    /**
     *
     * @type {Array<string>}
     * @memberof ViewerGetResponseUser
     */
    'permissions': Array<string>;
    /**
     *
     * @type {string}
     * @memberof ViewerGetResponseUser
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof ViewerGetResponseUser
     */
    'updatedAt': string;
}
/**
 * AuthApi - axios parameter creator
 * @export
 */
export declare const AuthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {LoginCredentialsDTO} loginCredentialsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login: (loginCredentialsDTO: LoginCredentialsDTO, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {SignupCredentialsDTO} signupCredentialsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signup: (signupCredentialsDTO: SignupCredentialsDTO, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export declare const AuthApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {LoginCredentialsDTO} loginCredentialsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(loginCredentialsDTO: LoginCredentialsDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>>;
    /**
     *
     * @param {SignupCredentialsDTO} signupCredentialsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signup(signupCredentialsDTO: SignupCredentialsDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignupResponse>>;
};
/**
 * AuthApi - factory interface
 * @export
 */
export declare const AuthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {AuthApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(requestParameters: AuthApiLoginRequest, options?: AxiosRequestConfig): AxiosPromise<LoginResponse>;
    /**
     *
     * @param {AuthApiSignupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signup(requestParameters: AuthApiSignupRequest, options?: AxiosRequestConfig): AxiosPromise<SignupResponse>;
};
/**
 * Request parameters for login operation in AuthApi.
 * @export
 * @interface AuthApiLoginRequest
 */
export interface AuthApiLoginRequest {
    /**
     *
     * @type {LoginCredentialsDTO}
     * @memberof AuthApiLogin
     */
    readonly loginCredentialsDTO: LoginCredentialsDTO;
}
/**
 * Request parameters for signup operation in AuthApi.
 * @export
 * @interface AuthApiSignupRequest
 */
export interface AuthApiSignupRequest {
    /**
     *
     * @type {SignupCredentialsDTO}
     * @memberof AuthApiSignup
     */
    readonly signupCredentialsDTO: SignupCredentialsDTO;
}
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export declare class AuthApi extends BaseAPI {
    /**
     *
     * @param {AuthApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    login(requestParameters: AuthApiLoginRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LoginResponse, any>>;
    /**
     *
     * @param {AuthApiSignupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    signup(requestParameters: AuthApiSignupRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SignupResponse, any>>;
}
/**
 * EventApi - axios parameter creator
 * @export
 */
export declare const EventApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppInfo: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EventApi - functional programming interface
 * @export
 */
export declare const EventApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventDTO>>;
};
/**
 * EventApi - factory interface
 * @export
 */
export declare const EventApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppInfo(options?: AxiosRequestConfig): AxiosPromise<EventDTO>;
};
/**
 * EventApi - object-oriented interface
 * @export
 * @class EventApi
 * @extends {BaseAPI}
 */
export declare class EventApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    getAppInfo(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EventDTO, any>>;
}
/**
 * FoldersApi - axios parameter creator
 * @export
 */
export declare const FoldersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppInfo: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FoldersApi - functional programming interface
 * @export
 */
export declare const FoldersApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * FoldersApi - factory interface
 * @export
 */
export declare const FoldersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppInfo(options?: AxiosRequestConfig): AxiosPromise<void>;
};
/**
 * FoldersApi - object-oriented interface
 * @export
 * @class FoldersApi
 * @extends {BaseAPI}
 */
export declare class FoldersApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    getAppInfo(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * ServerApi - axios parameter creator
 * @export
 */
export declare const ServerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServerSettings: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setServerSetting: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ServerApi - functional programming interface
 * @export
 */
export declare const ServerApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServerSettings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setServerSetting(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};
/**
 * ServerApi - factory interface
 * @export
 */
export declare const ServerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServerSettings(options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setServerSetting(options?: AxiosRequestConfig): AxiosPromise<object>;
};
/**
 * ServerApi - object-oriented interface
 * @export
 * @class ServerApi
 * @extends {BaseAPI}
 */
export declare class ServerApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    getServerSettings(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    setServerSetting(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
}
/**
 * ViewerApi - axios parameter creator
 * @export
 */
export declare const ViewerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getViewer: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {UpdateViewerInputDTO} updateViewerInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateViewer: (updateViewerInputDTO: UpdateViewerInputDTO, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ViewerApi - functional programming interface
 * @export
 */
export declare const ViewerApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getViewer(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewerGetResponse>>;
    /**
     *
     * @param {UpdateViewerInputDTO} updateViewerInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateViewer(updateViewerInputDTO: UpdateViewerInputDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewerGetResponse>>;
};
/**
 * ViewerApi - factory interface
 * @export
 */
export declare const ViewerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getViewer(options?: AxiosRequestConfig): AxiosPromise<ViewerGetResponse>;
    /**
     *
     * @param {ViewerApiUpdateViewerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateViewer(requestParameters: ViewerApiUpdateViewerRequest, options?: AxiosRequestConfig): AxiosPromise<ViewerGetResponse>;
};
/**
 * Request parameters for updateViewer operation in ViewerApi.
 * @export
 * @interface ViewerApiUpdateViewerRequest
 */
export interface ViewerApiUpdateViewerRequest {
    /**
     *
     * @type {UpdateViewerInputDTO}
     * @memberof ViewerApiUpdateViewer
     */
    readonly updateViewerInputDTO: UpdateViewerInputDTO;
}
/**
 * ViewerApi - object-oriented interface
 * @export
 * @class ViewerApi
 * @extends {BaseAPI}
 */
export declare class ViewerApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewerApi
     */
    getViewer(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewerGetResponse, any>>;
    /**
     *
     * @param {ViewerApiUpdateViewerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewerApi
     */
    updateViewer(requestParameters: ViewerApiUpdateViewerRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewerGetResponse, any>>;
}
