/**
 * @stellariscloud/api
 * The Stellaris Cloud core API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface EventDTO
 */
export interface EventDTO {
    /**
     *
     * @type {string}
     * @memberof EventDTO
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof EventDTO
     */
    'eventKey': string;
}
/**
 *
 * @export
 * @interface FolderCreateInputDTO
 */
export interface FolderCreateInputDTO {
    /**
     *
     * @type {string}
     * @memberof FolderCreateInputDTO
     */
    'name': string;
    /**
     *
     * @type {FolderCreateInputDTOMetadataLocation}
     * @memberof FolderCreateInputDTO
     */
    'metadataLocation': FolderCreateInputDTOMetadataLocation;
    /**
     *
     * @type {FolderCreateInputDTOMetadataLocation}
     * @memberof FolderCreateInputDTO
     */
    'contentLocation': FolderCreateInputDTOMetadataLocation;
}
/**
 *
 * @export
 * @interface FolderCreateInputDTOMetadataLocation
 */
export interface FolderCreateInputDTOMetadataLocation {
    /**
     *
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'serverLocationId'?: string;
    /**
     *
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'userLocationId'?: string;
    /**
     *
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'userLocationBucketOverride'?: string;
    /**
     *
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'userLocationPrefixOverride'?: string;
    /**
     *
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'accessKeyId'?: string;
    /**
     *
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'secretAccessKey'?: string;
    /**
     *
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'endpoint'?: string;
    /**
     *
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'bucket'?: string;
    /**
     *
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'region'?: string;
    /**
     *
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'prefix'?: string;
}
/**
 *
 * @export
 * @interface FolderCreateResponse
 */
export interface FolderCreateResponse {
    /**
     *
     * @type {FolderGetResponseFolder}
     * @memberof FolderCreateResponse
     */
    'folder': FolderGetResponseFolder;
}
/**
 *
 * @export
 * @interface FolderCreateSignedUrlInputDTOInner
 */
export interface FolderCreateSignedUrlInputDTOInner {
    /**
     *
     * @type {string}
     * @memberof FolderCreateSignedUrlInputDTOInner
     */
    'objectIdentifier': string;
    /**
     *
     * @type {string}
     * @memberof FolderCreateSignedUrlInputDTOInner
     */
    'method': FolderCreateSignedUrlInputDTOInnerMethodEnum;
}
export declare const FolderCreateSignedUrlInputDTOInnerMethodEnum: {
    readonly Delete: "DELETE";
    readonly Put: "PUT";
    readonly Get: "GET";
};
export type FolderCreateSignedUrlInputDTOInnerMethodEnum = typeof FolderCreateSignedUrlInputDTOInnerMethodEnum[keyof typeof FolderCreateSignedUrlInputDTOInnerMethodEnum];
/**
 *
 * @export
 * @interface FolderGetMetadataResponse
 */
export interface FolderGetMetadataResponse {
    /**
     *
     * @type {number}
     * @memberof FolderGetMetadataResponse
     */
    'totalCount': number;
    /**
     *
     * @type {number}
     * @memberof FolderGetMetadataResponse
     */
    'totalSizeBytes': number;
}
/**
 *
 * @export
 * @interface FolderGetResponse
 */
export interface FolderGetResponse {
    /**
     *
     * @type {FolderGetResponseFolder}
     * @memberof FolderGetResponse
     */
    'folder': FolderGetResponseFolder;
    /**
     *
     * @type {Array<string>}
     * @memberof FolderGetResponse
     */
    'permissions': Array<string>;
}
/**
 *
 * @export
 * @interface FolderGetResponseFolder
 */
export interface FolderGetResponseFolder {
    /**
     *
     * @type {string}
     * @memberof FolderGetResponseFolder
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof FolderGetResponseFolder
     */
    'ownerId': string;
    /**
     *
     * @type {string}
     * @memberof FolderGetResponseFolder
     */
    'name': string;
    /**
     *
     * @type {FolderGetResponseFolderMetadataLocation}
     * @memberof FolderGetResponseFolder
     */
    'metadataLocation': FolderGetResponseFolderMetadataLocation;
    /**
     *
     * @type {FolderGetResponseFolderMetadataLocation}
     * @memberof FolderGetResponseFolder
     */
    'contentLocation': FolderGetResponseFolderMetadataLocation;
}
/**
 *
 * @export
 * @interface FolderGetResponseFolderMetadataLocation
 */
export interface FolderGetResponseFolderMetadataLocation {
    /**
     *
     * @type {string}
     * @memberof FolderGetResponseFolderMetadataLocation
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof FolderGetResponseFolderMetadataLocation
     */
    'userId'?: string;
    /**
     *
     * @type {string}
     * @memberof FolderGetResponseFolderMetadataLocation
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof FolderGetResponseFolderMetadataLocation
     */
    'endpoint': string;
    /**
     *
     * @type {string}
     * @memberof FolderGetResponseFolderMetadataLocation
     */
    'region': string;
    /**
     *
     * @type {string}
     * @memberof FolderGetResponseFolderMetadataLocation
     */
    'bucket': string;
    /**
     *
     * @type {string}
     * @memberof FolderGetResponseFolderMetadataLocation
     */
    'prefix'?: string;
    /**
     *
     * @type {string}
     * @memberof FolderGetResponseFolderMetadataLocation
     */
    'accessKeyId': string;
}
/**
 *
 * @export
 * @interface FolderListResponse
 */
export interface FolderListResponse {
    /**
     *
     * @type {FolderListResponseMeta}
     * @memberof FolderListResponse
     */
    'meta': FolderListResponseMeta;
    /**
     *
     * @type {Array<FolderListResponseResultInner>}
     * @memberof FolderListResponse
     */
    'result': Array<FolderListResponseResultInner>;
}
/**
 *
 * @export
 * @interface FolderListResponseMeta
 */
export interface FolderListResponseMeta {
    /**
     *
     * @type {number}
     * @memberof FolderListResponseMeta
     */
    'totalCount': number;
}
/**
 *
 * @export
 * @interface FolderListResponseResultInner
 */
export interface FolderListResponseResultInner {
    /**
     *
     * @type {Array<string>}
     * @memberof FolderListResponseResultInner
     */
    'permissions': Array<string>;
    /**
     *
     * @type {FolderGetResponseFolder}
     * @memberof FolderListResponseResultInner
     */
    'folder': FolderGetResponseFolder;
}
/**
 *
 * @export
 * @interface FolderObjectGetResponse
 */
export interface FolderObjectGetResponse {
    /**
     *
     * @type {FolderObjectListResponseResultInner}
     * @memberof FolderObjectGetResponse
     */
    'folderObject': FolderObjectListResponseResultInner;
}
/**
 *
 * @export
 * @interface FolderObjectListResponse
 */
export interface FolderObjectListResponse {
    /**
     *
     * @type {FolderListResponseMeta}
     * @memberof FolderObjectListResponse
     */
    'meta': FolderListResponseMeta;
    /**
     *
     * @type {Array<FolderObjectListResponseResultInner>}
     * @memberof FolderObjectListResponse
     */
    'result': Array<FolderObjectListResponseResultInner>;
}
/**
 *
 * @export
 * @interface FolderObjectListResponseResultInner
 */
export interface FolderObjectListResponseResultInner {
    /**
     *
     * @type {string}
     * @memberof FolderObjectListResponseResultInner
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof FolderObjectListResponseResultInner
     */
    'objectKey': string;
    /**
     *
     * @type {string}
     * @memberof FolderObjectListResponseResultInner
     */
    'folderId': string;
    /**
     *
     * @type {any}
     * @memberof FolderObjectListResponseResultInner
     */
    'hash'?: any;
    /**
     *
     * @type {number}
     * @memberof FolderObjectListResponseResultInner
     */
    'lastModified': number;
    /**
     *
     * @type {string}
     * @memberof FolderObjectListResponseResultInner
     */
    'eTag': string;
    /**
     *
     * @type {number}
     * @memberof FolderObjectListResponseResultInner
     */
    'sizeBytes': number;
    /**
     *
     * @type {string}
     * @memberof FolderObjectListResponseResultInner
     */
    'mimeType': string;
    /**
     *
     * @type {string}
     * @memberof FolderObjectListResponseResultInner
     */
    'mediaType': FolderObjectListResponseResultInnerMediaTypeEnum;
}
export declare const FolderObjectListResponseResultInnerMediaTypeEnum: {
    readonly Image: "IMAGE";
    readonly Video: "VIDEO";
    readonly Audio: "AUDIO";
    readonly Document: "DOCUMENT";
    readonly Unknown: "UNKNOWN";
};
export type FolderObjectListResponseResultInnerMediaTypeEnum = typeof FolderObjectListResponseResultInnerMediaTypeEnum[keyof typeof FolderObjectListResponseResultInnerMediaTypeEnum];
/**
 *
 * @export
 * @interface LoginCredentialsDTO
 */
export interface LoginCredentialsDTO {
    /**
     *
     * @type {string}
     * @memberof LoginCredentialsDTO
     */
    'login': string;
    /**
     *
     * @type {string}
     * @memberof LoginCredentialsDTO
     */
    'password': string;
}
/**
 *
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     *
     * @type {LoginResponseSession}
     * @memberof LoginResponse
     */
    'session': LoginResponseSession;
}
/**
 *
 * @export
 * @interface LoginResponseSession
 */
export interface LoginResponseSession {
    /**
     *
     * @type {string}
     * @memberof LoginResponseSession
     */
    'accessToken': string;
    /**
     *
     * @type {string}
     * @memberof LoginResponseSession
     */
    'refreshToken': string;
}
/**
 *
 * @export
 * @interface SignupCredentialsDTO
 */
export interface SignupCredentialsDTO {
    /**
     *
     * @type {string}
     * @memberof SignupCredentialsDTO
     */
    'username': string;
    /**
     *
     * @type {string}
     * @memberof SignupCredentialsDTO
     */
    'email'?: string;
    /**
     *
     * @type {string}
     * @memberof SignupCredentialsDTO
     */
    'password': string;
}
/**
 *
 * @export
 * @interface SignupResponse
 */
export interface SignupResponse {
    /**
     *
     * @type {SignupResponseUser}
     * @memberof SignupResponse
     */
    'user': SignupResponseUser;
}
/**
 *
 * @export
 * @interface SignupResponseUser
 */
export interface SignupResponseUser {
    /**
     *
     * @type {any}
     * @memberof SignupResponseUser
     */
    'name'?: any;
    /**
     *
     * @type {any}
     * @memberof SignupResponseUser
     */
    'email'?: any;
    /**
     *
     * @type {boolean}
     * @memberof SignupResponseUser
     */
    'emailVerified': boolean;
    /**
     *
     * @type {boolean}
     * @memberof SignupResponseUser
     */
    'isAdmin': boolean;
    /**
     *
     * @type {string}
     * @memberof SignupResponseUser
     */
    'username': string;
    /**
     *
     * @type {Array<string>}
     * @memberof SignupResponseUser
     */
    'permissions': Array<string>;
    /**
     *
     * @type {string}
     * @memberof SignupResponseUser
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof SignupResponseUser
     */
    'updatedAt': string;
}
/**
 *
 * @export
 * @interface TokenRefreshResponse
 */
export interface TokenRefreshResponse {
    /**
     *
     * @type {LoginResponseSession}
     * @memberof TokenRefreshResponse
     */
    'session': LoginResponseSession;
}
/**
 *
 * @export
 * @interface UpdateViewerInputDTO
 */
export interface UpdateViewerInputDTO {
    /**
     *
     * @type {string}
     * @memberof UpdateViewerInputDTO
     */
    'name': string;
}
/**
 *
 * @export
 * @interface ViewerGetResponse
 */
export interface ViewerGetResponse {
    /**
     *
     * @type {SignupResponseUser}
     * @memberof ViewerGetResponse
     */
    'user': SignupResponseUser;
}
/**
 * AuthApi - axios parameter creator
 * @export
 */
export declare const AuthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {LoginCredentialsDTO} loginCredentialsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login: (loginCredentialsDTO: LoginCredentialsDTO, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {SignupCredentialsDTO} signupCredentialsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signup: (signupCredentialsDTO: SignupCredentialsDTO, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export declare const AuthApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {LoginCredentialsDTO} loginCredentialsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(loginCredentialsDTO: LoginCredentialsDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenRefreshResponse>>;
    /**
     *
     * @param {SignupCredentialsDTO} signupCredentialsDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signup(signupCredentialsDTO: SignupCredentialsDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignupResponse>>;
};
/**
 * AuthApi - factory interface
 * @export
 */
export declare const AuthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {AuthApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(requestParameters: AuthApiLoginRequest, options?: AxiosRequestConfig): AxiosPromise<LoginResponse>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout(options?: AxiosRequestConfig): AxiosPromise<boolean>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken(options?: AxiosRequestConfig): AxiosPromise<TokenRefreshResponse>;
    /**
     *
     * @param {AuthApiSignupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signup(requestParameters: AuthApiSignupRequest, options?: AxiosRequestConfig): AxiosPromise<SignupResponse>;
};
/**
 * Request parameters for login operation in AuthApi.
 * @export
 * @interface AuthApiLoginRequest
 */
export interface AuthApiLoginRequest {
    /**
     *
     * @type {LoginCredentialsDTO}
     * @memberof AuthApiLogin
     */
    readonly loginCredentialsDTO: LoginCredentialsDTO;
}
/**
 * Request parameters for signup operation in AuthApi.
 * @export
 * @interface AuthApiSignupRequest
 */
export interface AuthApiSignupRequest {
    /**
     *
     * @type {SignupCredentialsDTO}
     * @memberof AuthApiSignup
     */
    readonly signupCredentialsDTO: SignupCredentialsDTO;
}
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export declare class AuthApi extends BaseAPI {
    /**
     *
     * @param {AuthApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    login(requestParameters: AuthApiLoginRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LoginResponse, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    logout(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<boolean, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    refreshToken(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TokenRefreshResponse, any>>;
    /**
     *
     * @param {AuthApiSignupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    signup(requestParameters: AuthApiSignupRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SignupResponse, any>>;
}
/**
 * EventApi - axios parameter creator
 * @export
 */
export declare const EventApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppInfo: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EventApi - functional programming interface
 * @export
 */
export declare const EventApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventDTO>>;
};
/**
 * EventApi - factory interface
 * @export
 */
export declare const EventApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppInfo(options?: AxiosRequestConfig): AxiosPromise<EventDTO>;
};
/**
 * EventApi - object-oriented interface
 * @export
 * @class EventApi
 * @extends {BaseAPI}
 */
export declare class EventApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    getAppInfo(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EventDTO, any>>;
}
/**
 * FoldersApi - axios parameter creator
 * @export
 */
export declare const FoldersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {FolderCreateInputDTO} folderCreateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolder: (folderCreateInputDTO: FolderCreateInputDTO, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {Array<FolderCreateSignedUrlInputDTOInner>} folderCreateSignedUrlInputDTOInner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPresignedUrls: (folderId: string, folderCreateSignedUrlInputDTOInner: Array<FolderCreateSignedUrlInputDTOInner>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolder: (folderId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolderObject: (folderId: string, objectKey: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolder: (folderId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderMetadata: (folderId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderObject: (folderId: string, objectKey: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [search]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolderObjects: (folderId: string, offset?: number, limit?: number, search?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolders: (offset?: number, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshFolderObjectS3Metadata: (folderId: string, objectKey: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rescanFolder: (folderId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FoldersApi - functional programming interface
 * @export
 */
export declare const FoldersApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {FolderCreateInputDTO} folderCreateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolder(folderCreateInputDTO: FolderCreateInputDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderCreateResponse>>;
    /**
     *
     * @param {string} folderId
     * @param {Array<FolderCreateSignedUrlInputDTOInner>} folderCreateSignedUrlInputDTOInner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPresignedUrls(folderId: string, folderCreateSignedUrlInputDTOInner: Array<FolderCreateSignedUrlInputDTOInner>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolder(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolderObject(folderId: string, objectKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolder(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderGetResponse>>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderMetadata(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderGetMetadataResponse>>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderObject(folderId: string, objectKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderObjectGetResponse>>;
    /**
     *
     * @param {string} folderId
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [search]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolderObjects(folderId: string, offset?: number, limit?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderObjectListResponse>>;
    /**
     *
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolders(offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderListResponse>>;
    /**
     *
     * @param {string} folderId
     * @param {string} objectKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshFolderObjectS3Metadata(folderId: string, objectKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderObjectGetResponse>>;
    /**
     *
     * @param {string} folderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rescanFolder(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * FoldersApi - factory interface
 * @export
 */
export declare const FoldersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {FoldersApiCreateFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolder(requestParameters: FoldersApiCreateFolderRequest, options?: AxiosRequestConfig): AxiosPromise<FolderCreateResponse>;
    /**
     *
     * @param {FoldersApiCreatePresignedUrlsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPresignedUrls(requestParameters: FoldersApiCreatePresignedUrlsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<string>>;
    /**
     *
     * @param {FoldersApiDeleteFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolder(requestParameters: FoldersApiDeleteFolderRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @param {FoldersApiDeleteFolderObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFolderObject(requestParameters: FoldersApiDeleteFolderObjectRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @param {FoldersApiGetFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolder(requestParameters: FoldersApiGetFolderRequest, options?: AxiosRequestConfig): AxiosPromise<FolderGetResponse>;
    /**
     *
     * @param {FoldersApiGetFolderMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderMetadata(requestParameters: FoldersApiGetFolderMetadataRequest, options?: AxiosRequestConfig): AxiosPromise<FolderGetMetadataResponse>;
    /**
     *
     * @param {FoldersApiGetFolderObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFolderObject(requestParameters: FoldersApiGetFolderObjectRequest, options?: AxiosRequestConfig): AxiosPromise<FolderObjectGetResponse>;
    /**
     *
     * @param {FoldersApiListFolderObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolderObjects(requestParameters: FoldersApiListFolderObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<FolderObjectListResponse>;
    /**
     *
     * @param {FoldersApiListFoldersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFolders(requestParameters?: FoldersApiListFoldersRequest, options?: AxiosRequestConfig): AxiosPromise<FolderListResponse>;
    /**
     *
     * @param {FoldersApiRefreshFolderObjectS3MetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshFolderObjectS3Metadata(requestParameters: FoldersApiRefreshFolderObjectS3MetadataRequest, options?: AxiosRequestConfig): AxiosPromise<FolderObjectGetResponse>;
    /**
     *
     * @param {FoldersApiRescanFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rescanFolder(requestParameters: FoldersApiRescanFolderRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
};
/**
 * Request parameters for createFolder operation in FoldersApi.
 * @export
 * @interface FoldersApiCreateFolderRequest
 */
export interface FoldersApiCreateFolderRequest {
    /**
     *
     * @type {FolderCreateInputDTO}
     * @memberof FoldersApiCreateFolder
     */
    readonly folderCreateInputDTO: FolderCreateInputDTO;
}
/**
 * Request parameters for createPresignedUrls operation in FoldersApi.
 * @export
 * @interface FoldersApiCreatePresignedUrlsRequest
 */
export interface FoldersApiCreatePresignedUrlsRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiCreatePresignedUrls
     */
    readonly folderId: string;
    /**
     *
     * @type {Array<FolderCreateSignedUrlInputDTOInner>}
     * @memberof FoldersApiCreatePresignedUrls
     */
    readonly folderCreateSignedUrlInputDTOInner: Array<FolderCreateSignedUrlInputDTOInner>;
}
/**
 * Request parameters for deleteFolder operation in FoldersApi.
 * @export
 * @interface FoldersApiDeleteFolderRequest
 */
export interface FoldersApiDeleteFolderRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiDeleteFolder
     */
    readonly folderId: string;
}
/**
 * Request parameters for deleteFolderObject operation in FoldersApi.
 * @export
 * @interface FoldersApiDeleteFolderObjectRequest
 */
export interface FoldersApiDeleteFolderObjectRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiDeleteFolderObject
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiDeleteFolderObject
     */
    readonly objectKey: string;
}
/**
 * Request parameters for getFolder operation in FoldersApi.
 * @export
 * @interface FoldersApiGetFolderRequest
 */
export interface FoldersApiGetFolderRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiGetFolder
     */
    readonly folderId: string;
}
/**
 * Request parameters for getFolderMetadata operation in FoldersApi.
 * @export
 * @interface FoldersApiGetFolderMetadataRequest
 */
export interface FoldersApiGetFolderMetadataRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiGetFolderMetadata
     */
    readonly folderId: string;
}
/**
 * Request parameters for getFolderObject operation in FoldersApi.
 * @export
 * @interface FoldersApiGetFolderObjectRequest
 */
export interface FoldersApiGetFolderObjectRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiGetFolderObject
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiGetFolderObject
     */
    readonly objectKey: string;
}
/**
 * Request parameters for listFolderObjects operation in FoldersApi.
 * @export
 * @interface FoldersApiListFolderObjectsRequest
 */
export interface FoldersApiListFolderObjectsRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiListFolderObjects
     */
    readonly folderId: string;
    /**
     *
     * @type {number}
     * @memberof FoldersApiListFolderObjects
     */
    readonly offset?: number;
    /**
     *
     * @type {number}
     * @memberof FoldersApiListFolderObjects
     */
    readonly limit?: number;
    /**
     *
     * @type {string}
     * @memberof FoldersApiListFolderObjects
     */
    readonly search?: string;
}
/**
 * Request parameters for listFolders operation in FoldersApi.
 * @export
 * @interface FoldersApiListFoldersRequest
 */
export interface FoldersApiListFoldersRequest {
    /**
     *
     * @type {number}
     * @memberof FoldersApiListFolders
     */
    readonly offset?: number;
    /**
     *
     * @type {number}
     * @memberof FoldersApiListFolders
     */
    readonly limit?: number;
}
/**
 * Request parameters for refreshFolderObjectS3Metadata operation in FoldersApi.
 * @export
 * @interface FoldersApiRefreshFolderObjectS3MetadataRequest
 */
export interface FoldersApiRefreshFolderObjectS3MetadataRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiRefreshFolderObjectS3Metadata
     */
    readonly folderId: string;
    /**
     *
     * @type {string}
     * @memberof FoldersApiRefreshFolderObjectS3Metadata
     */
    readonly objectKey: string;
}
/**
 * Request parameters for rescanFolder operation in FoldersApi.
 * @export
 * @interface FoldersApiRescanFolderRequest
 */
export interface FoldersApiRescanFolderRequest {
    /**
     *
     * @type {string}
     * @memberof FoldersApiRescanFolder
     */
    readonly folderId: string;
}
/**
 * FoldersApi - object-oriented interface
 * @export
 * @class FoldersApi
 * @extends {BaseAPI}
 */
export declare class FoldersApi extends BaseAPI {
    /**
     *
     * @param {FoldersApiCreateFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    createFolder(requestParameters: FoldersApiCreateFolderRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FolderCreateResponse, any>>;
    /**
     *
     * @param {FoldersApiCreatePresignedUrlsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    createPresignedUrls(requestParameters: FoldersApiCreatePresignedUrlsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string[], any>>;
    /**
     *
     * @param {FoldersApiDeleteFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    deleteFolder(requestParameters: FoldersApiDeleteFolderRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @param {FoldersApiDeleteFolderObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    deleteFolderObject(requestParameters: FoldersApiDeleteFolderObjectRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @param {FoldersApiGetFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    getFolder(requestParameters: FoldersApiGetFolderRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FolderGetResponse, any>>;
    /**
     *
     * @param {FoldersApiGetFolderMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    getFolderMetadata(requestParameters: FoldersApiGetFolderMetadataRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FolderGetMetadataResponse, any>>;
    /**
     *
     * @param {FoldersApiGetFolderObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    getFolderObject(requestParameters: FoldersApiGetFolderObjectRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FolderObjectGetResponse, any>>;
    /**
     *
     * @param {FoldersApiListFolderObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    listFolderObjects(requestParameters: FoldersApiListFolderObjectsRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FolderObjectListResponse, any>>;
    /**
     *
     * @param {FoldersApiListFoldersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    listFolders(requestParameters?: FoldersApiListFoldersRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FolderListResponse, any>>;
    /**
     *
     * @param {FoldersApiRefreshFolderObjectS3MetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    refreshFolderObjectS3Metadata(requestParameters: FoldersApiRefreshFolderObjectS3MetadataRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FolderObjectGetResponse, any>>;
    /**
     *
     * @param {FoldersApiRescanFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    rescanFolder(requestParameters: FoldersApiRescanFolderRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * ServerApi - axios parameter creator
 * @export
 */
export declare const ServerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServerSettings: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setServerSetting: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ServerApi - functional programming interface
 * @export
 */
export declare const ServerApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServerSettings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setServerSetting(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};
/**
 * ServerApi - factory interface
 * @export
 */
export declare const ServerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServerSettings(options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setServerSetting(options?: AxiosRequestConfig): AxiosPromise<object>;
};
/**
 * ServerApi - object-oriented interface
 * @export
 * @class ServerApi
 * @extends {BaseAPI}
 */
export declare class ServerApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    getServerSettings(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    setServerSetting(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
}
/**
 * ViewerApi - axios parameter creator
 * @export
 */
export declare const ViewerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getViewer: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {UpdateViewerInputDTO} updateViewerInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateViewer: (updateViewerInputDTO: UpdateViewerInputDTO, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ViewerApi - functional programming interface
 * @export
 */
export declare const ViewerApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getViewer(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewerGetResponse>>;
    /**
     *
     * @param {UpdateViewerInputDTO} updateViewerInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateViewer(updateViewerInputDTO: UpdateViewerInputDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewerGetResponse>>;
};
/**
 * ViewerApi - factory interface
 * @export
 */
export declare const ViewerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getViewer(options?: AxiosRequestConfig): AxiosPromise<ViewerGetResponse>;
    /**
     *
     * @param {ViewerApiUpdateViewerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateViewer(requestParameters: ViewerApiUpdateViewerRequest, options?: AxiosRequestConfig): AxiosPromise<ViewerGetResponse>;
};
/**
 * Request parameters for updateViewer operation in ViewerApi.
 * @export
 * @interface ViewerApiUpdateViewerRequest
 */
export interface ViewerApiUpdateViewerRequest {
    /**
     *
     * @type {UpdateViewerInputDTO}
     * @memberof ViewerApiUpdateViewer
     */
    readonly updateViewerInputDTO: UpdateViewerInputDTO;
}
/**
 * ViewerApi - object-oriented interface
 * @export
 * @class ViewerApi
 * @extends {BaseAPI}
 */
export declare class ViewerApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewerApi
     */
    getViewer(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewerGetResponse, any>>;
    /**
     *
     * @param {ViewerApiUpdateViewerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewerApi
     */
    updateViewer(requestParameters: ViewerApiUpdateViewerRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ViewerGetResponse, any>>;
}
