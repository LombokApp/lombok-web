/**
 * @stellariscloud/api
 * The Stellaris Cloud core API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface AppInfoDTO
 */
export interface AppInfoDTO {
    /**
     *
     * @type {string}
     * @memberof AppInfoDTO
     */
    'version': string;
}
/**
 *
 * @export
 * @interface LoginDTO
 */
export interface LoginDTO {
    /**
     *
     * @type {string}
     * @memberof LoginDTO
     */
    'login': string;
    /**
     *
     * @type {string}
     * @memberof LoginDTO
     */
    'password': string;
}
/**
 *
 * @export
 * @interface UserSessionDTO
 */
export interface UserSessionDTO {
    /**
     *
     * @type {string}
     * @memberof UserSessionDTO
     */
    'accessToken': string;
    /**
     *
     * @type {string}
     * @memberof UserSessionDTO
     */
    'refreshToken': string;
}
/**
 * AppApi - axios parameter creator
 * @export
 */
export declare const AppApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppInfo: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AppApi - functional programming interface
 * @export
 */
export declare const AppApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppInfoDTO>>;
};
/**
 * AppApi - factory interface
 * @export
 */
export declare const AppApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppInfo(options?: AxiosRequestConfig): AxiosPromise<AppInfoDTO>;
};
/**
 * AppApi - object-oriented interface
 * @export
 * @class AppApi
 * @extends {BaseAPI}
 */
export declare class AppApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    getAppInfo(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AppInfoDTO, any>>;
}
/**
 * AuthApi - axios parameter creator
 * @export
 */
export declare const AuthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {LoginDTO} loginDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login: (loginDTO: LoginDTO, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export declare const AuthApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {LoginDTO} loginDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(loginDTO: LoginDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSessionDTO>>;
};
/**
 * AuthApi - factory interface
 * @export
 */
export declare const AuthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {AuthApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(requestParameters: AuthApiLoginRequest, options?: AxiosRequestConfig): AxiosPromise<UserSessionDTO>;
};
/**
 * Request parameters for login operation in AuthApi.
 * @export
 * @interface AuthApiLoginRequest
 */
export interface AuthApiLoginRequest {
    /**
     *
     * @type {LoginDTO}
     * @memberof AuthApiLogin
     */
    readonly loginDTO: LoginDTO;
}
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export declare class AuthApi extends BaseAPI {
    /**
     *
     * @param {AuthApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    login(requestParameters: AuthApiLoginRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserSessionDTO, any>>;
}
