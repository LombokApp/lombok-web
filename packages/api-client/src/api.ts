/* tslint:disable */
/* eslint-disable */
/**
 * @stellariscloud/api
 * The Stellaris Cloud core API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AppListResponse
 */
export interface AppListResponse {
    /**
     * 
     * @type {UserListResponseMeta}
     * @memberof AppListResponse
     */
    'meta': UserListResponseMeta;
    /**
     * 
     * @type {Array<AppListResponseResultInner>}
     * @memberof AppListResponse
     */
    'result': Array<AppListResponseResultInner>;
}
/**
 * 
 * @export
 * @interface AppListResponseResultInner
 */
export interface AppListResponseResultInner {
    /**
     * 
     * @type {string}
     * @memberof AppListResponseResultInner
     */
    'identifier': string;
    /**
     * 
     * @type {AppListResponseResultInnerConfig}
     * @memberof AppListResponseResultInner
     */
    'config': AppListResponseResultInnerConfig;
    /**
     * 
     * @type {{ [key: string]: AppListResponseResultInnerUiValue | undefined; }}
     * @memberof AppListResponseResultInner
     */
    'ui': { [key: string]: AppListResponseResultInnerUiValue | undefined; };
}
/**
 * 
 * @export
 * @interface AppListResponseResultInnerConfig
 */
export interface AppListResponseResultInnerConfig {
    /**
     * 
     * @type {string}
     * @memberof AppListResponseResultInnerConfig
     */
    'publicKey': string;
    /**
     * 
     * @type {string}
     * @memberof AppListResponseResultInnerConfig
     */
    'description': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AppListResponseResultInnerConfig
     */
    'subscribedEvents': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AppListResponseResultInnerConfig
     */
    'emitEvents': Array<string>;
    /**
     * 
     * @type {AppListResponseResultInnerConfigActions}
     * @memberof AppListResponseResultInnerConfig
     */
    'actions': AppListResponseResultInnerConfigActions;
    /**
     * 
     * @type {Array<AppListResponseResultInnerConfigMenuItemsInner>}
     * @memberof AppListResponseResultInnerConfig
     */
    'menuItems': Array<AppListResponseResultInnerConfigMenuItemsInner>;
}
/**
 * 
 * @export
 * @interface AppListResponseResultInnerConfigActions
 */
export interface AppListResponseResultInnerConfigActions {
    /**
     * 
     * @type {Array<AppListResponseResultInnerConfigActionsFolderInner>}
     * @memberof AppListResponseResultInnerConfigActions
     */
    'folder': Array<AppListResponseResultInnerConfigActionsFolderInner>;
    /**
     * 
     * @type {Array<AppListResponseResultInnerConfigActionsFolderInner>}
     * @memberof AppListResponseResultInnerConfigActions
     */
    'object': Array<AppListResponseResultInnerConfigActionsFolderInner>;
}
/**
 * 
 * @export
 * @interface AppListResponseResultInnerConfigActionsFolderInner
 */
export interface AppListResponseResultInnerConfigActionsFolderInner {
    /**
     * 
     * @type {string}
     * @memberof AppListResponseResultInnerConfigActionsFolderInner
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof AppListResponseResultInnerConfigActionsFolderInner
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface AppListResponseResultInnerConfigMenuItemsInner
 */
export interface AppListResponseResultInnerConfigMenuItemsInner {
    /**
     * 
     * @type {string}
     * @memberof AppListResponseResultInnerConfigMenuItemsInner
     */
    'label': string;
    /**
     * 
     * @type {string}
     * @memberof AppListResponseResultInnerConfigMenuItemsInner
     */
    'iconPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppListResponseResultInnerConfigMenuItemsInner
     */
    'uiName': string;
}
/**
 * 
 * @export
 * @interface AppListResponseResultInnerUiValue
 */
export interface AppListResponseResultInnerUiValue {
    /**
     * 
     * @type {string}
     * @memberof AppListResponseResultInnerUiValue
     */
    'path': string;
    /**
     * 
     * @type {string}
     * @memberof AppListResponseResultInnerUiValue
     */
    'name': string;
    /**
     * 
     * @type {{ [key: string]: AppListResponseResultInnerUiValueFilesValue | undefined; }}
     * @memberof AppListResponseResultInnerUiValue
     */
    'files': { [key: string]: AppListResponseResultInnerUiValueFilesValue | undefined; };
}
/**
 * 
 * @export
 * @interface AppListResponseResultInnerUiValueFilesValue
 */
export interface AppListResponseResultInnerUiValueFilesValue {
    /**
     * 
     * @type {number}
     * @memberof AppListResponseResultInnerUiValueFilesValue
     */
    'size': number;
    /**
     * 
     * @type {string}
     * @memberof AppListResponseResultInnerUiValueFilesValue
     */
    'hash': string;
}
/**
 * 
 * @export
 * @interface EventGetResponse
 */
export interface EventGetResponse {
    /**
     * 
     * @type {EventGetResponseEvent}
     * @memberof EventGetResponse
     */
    'event': EventGetResponseEvent;
}
/**
 * 
 * @export
 * @interface EventGetResponseEvent
 */
export interface EventGetResponseEvent {
    /**
     * 
     * @type {string}
     * @memberof EventGetResponseEvent
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof EventGetResponseEvent
     */
    'eventKey': string;
    /**
     * 
     * @type {EventGetResponseEventData}
     * @memberof EventGetResponseEvent
     */
    'data': EventGetResponseEventData;
    /**
     * 
     * @type {string}
     * @memberof EventGetResponseEvent
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof EventGetResponseEvent
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface EventGetResponseEventData
 */
export interface EventGetResponseEventData {
    /**
     * 
     * @type {string}
     * @memberof EventGetResponseEventData
     */
    'folderId': string;
    /**
     * 
     * @type {string}
     * @memberof EventGetResponseEventData
     */
    'objectKey'?: string;
}
/**
 * 
 * @export
 * @interface FolderCreateInputDTO
 */
export interface FolderCreateInputDTO {
    /**
     * 
     * @type {string}
     * @memberof FolderCreateInputDTO
     */
    'name': string;
    /**
     * 
     * @type {FolderCreateInputDTOMetadataLocation}
     * @memberof FolderCreateInputDTO
     */
    'metadataLocation': FolderCreateInputDTOMetadataLocation;
    /**
     * 
     * @type {FolderCreateInputDTOMetadataLocation}
     * @memberof FolderCreateInputDTO
     */
    'contentLocation': FolderCreateInputDTOMetadataLocation;
}
/**
 * 
 * @export
 * @interface FolderCreateInputDTOMetadataLocation
 */
export interface FolderCreateInputDTOMetadataLocation {
    /**
     * 
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'serverLocationId'?: string;
    /**
     * 
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'userLocationId'?: string;
    /**
     * 
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'userLocationBucketOverride'?: string;
    /**
     * 
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'userLocationPrefixOverride'?: string;
    /**
     * 
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'accessKeyId'?: string;
    /**
     * 
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'secretAccessKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'endpoint'?: string;
    /**
     * 
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'bucket'?: string;
    /**
     * 
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'region'?: string;
    /**
     * 
     * @type {string}
     * @memberof FolderCreateInputDTOMetadataLocation
     */
    'prefix'?: string;
}
/**
 * 
 * @export
 * @interface FolderCreateResponse
 */
export interface FolderCreateResponse {
    /**
     * 
     * @type {FolderGetResponseFolder}
     * @memberof FolderCreateResponse
     */
    'folder': FolderGetResponseFolder;
}
/**
 * 
 * @export
 * @interface FolderCreateSignedUrlInputDTOInner
 */
export interface FolderCreateSignedUrlInputDTOInner {
    /**
     * 
     * @type {string}
     * @memberof FolderCreateSignedUrlInputDTOInner
     */
    'objectIdentifier': string;
    /**
     * 
     * @type {string}
     * @memberof FolderCreateSignedUrlInputDTOInner
     */
    'method': FolderCreateSignedUrlInputDTOInnerMethodEnum;
}

export const FolderCreateSignedUrlInputDTOInnerMethodEnum = {
    Delete: 'DELETE',
    Put: 'PUT',
    Get: 'GET'
} as const;

export type FolderCreateSignedUrlInputDTOInnerMethodEnum = typeof FolderCreateSignedUrlInputDTOInnerMethodEnum[keyof typeof FolderCreateSignedUrlInputDTOInnerMethodEnum];

/**
 * 
 * @export
 * @interface FolderDTO
 */
export interface FolderDTO {
    /**
     * 
     * @type {string}
     * @memberof FolderDTO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FolderDTO
     */
    'ownerId': string;
    /**
     * 
     * @type {string}
     * @memberof FolderDTO
     */
    'name': string;
    /**
     * 
     * @type {FolderDTOMetadataLocation}
     * @memberof FolderDTO
     */
    'metadataLocation': FolderDTOMetadataLocation;
    /**
     * 
     * @type {FolderDTOMetadataLocation}
     * @memberof FolderDTO
     */
    'contentLocation': FolderDTOMetadataLocation;
}
/**
 * 
 * @export
 * @interface FolderDTOMetadataLocation
 */
export interface FolderDTOMetadataLocation {
    /**
     * 
     * @type {string}
     * @memberof FolderDTOMetadataLocation
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FolderDTOMetadataLocation
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof FolderDTOMetadataLocation
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof FolderDTOMetadataLocation
     */
    'endpoint': string;
    /**
     * 
     * @type {string}
     * @memberof FolderDTOMetadataLocation
     */
    'region': string;
    /**
     * 
     * @type {string}
     * @memberof FolderDTOMetadataLocation
     */
    'bucket': string;
    /**
     * 
     * @type {string}
     * @memberof FolderDTOMetadataLocation
     */
    'prefix'?: string;
    /**
     * 
     * @type {string}
     * @memberof FolderDTOMetadataLocation
     */
    'accessKeyId': string;
}
/**
 * 
 * @export
 * @interface FolderGetMetadataResponse
 */
export interface FolderGetMetadataResponse {
    /**
     * 
     * @type {number}
     * @memberof FolderGetMetadataResponse
     */
    'totalCount': number;
    /**
     * 
     * @type {number}
     * @memberof FolderGetMetadataResponse
     */
    'totalSizeBytes': number;
}
/**
 * 
 * @export
 * @interface FolderGetResponse
 */
export interface FolderGetResponse {
    /**
     * 
     * @type {FolderGetResponseFolder}
     * @memberof FolderGetResponse
     */
    'folder': FolderGetResponseFolder;
    /**
     * 
     * @type {Array<string>}
     * @memberof FolderGetResponse
     */
    'permissions': Array<FolderGetResponsePermissionsEnum>;
}

export const FolderGetResponsePermissionsEnum = {
    FolderRescan: 'FOLDER_RESCAN',
    FolderForget: 'FOLDER_FORGET',
    ObjectEdit: 'OBJECT_EDIT',
    ObjectManage: 'OBJECT_MANAGE'
} as const;

export type FolderGetResponsePermissionsEnum = typeof FolderGetResponsePermissionsEnum[keyof typeof FolderGetResponsePermissionsEnum];

/**
 * 
 * @export
 * @interface FolderGetResponseFolder
 */
export interface FolderGetResponseFolder {
    /**
     * 
     * @type {string}
     * @memberof FolderGetResponseFolder
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FolderGetResponseFolder
     */
    'ownerId': string;
    /**
     * 
     * @type {string}
     * @memberof FolderGetResponseFolder
     */
    'name': string;
    /**
     * 
     * @type {FolderDTOMetadataLocation}
     * @memberof FolderGetResponseFolder
     */
    'metadataLocation': FolderDTOMetadataLocation;
    /**
     * 
     * @type {FolderDTOMetadataLocation}
     * @memberof FolderGetResponseFolder
     */
    'contentLocation': FolderDTOMetadataLocation;
}
/**
 * 
 * @export
 * @interface FolderListResponse
 */
export interface FolderListResponse {
    /**
     * 
     * @type {UserListResponseMeta}
     * @memberof FolderListResponse
     */
    'meta': UserListResponseMeta;
    /**
     * 
     * @type {Array<FolderListResponseResultInner>}
     * @memberof FolderListResponse
     */
    'result': Array<FolderListResponseResultInner>;
}
/**
 * 
 * @export
 * @interface FolderListResponseResultInner
 */
export interface FolderListResponseResultInner {
    /**
     * 
     * @type {Array<string>}
     * @memberof FolderListResponseResultInner
     */
    'permissions': Array<FolderListResponseResultInnerPermissionsEnum>;
    /**
     * 
     * @type {FolderGetResponseFolder}
     * @memberof FolderListResponseResultInner
     */
    'folder': FolderGetResponseFolder;
}

export const FolderListResponseResultInnerPermissionsEnum = {
    FolderRescan: 'FOLDER_RESCAN',
    FolderForget: 'FOLDER_FORGET',
    ObjectEdit: 'OBJECT_EDIT',
    ObjectManage: 'OBJECT_MANAGE'
} as const;

export type FolderListResponseResultInnerPermissionsEnum = typeof FolderListResponseResultInnerPermissionsEnum[keyof typeof FolderListResponseResultInnerPermissionsEnum];

/**
 * 
 * @export
 * @interface FolderObjectContentAttributesDTO
 */
export interface FolderObjectContentAttributesDTO {
    /**
     * 
     * @type {string}
     * @memberof FolderObjectContentAttributesDTO
     */
    'mediaType': FolderObjectContentAttributesDTOMediaTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof FolderObjectContentAttributesDTO
     */
    'mimeType': string;
    /**
     * 
     * @type {number}
     * @memberof FolderObjectContentAttributesDTO
     */
    'height': number;
    /**
     * 
     * @type {number}
     * @memberof FolderObjectContentAttributesDTO
     */
    'width': number;
    /**
     * 
     * @type {number}
     * @memberof FolderObjectContentAttributesDTO
     */
    'orientation': number;
    /**
     * 
     * @type {number}
     * @memberof FolderObjectContentAttributesDTO
     */
    'lengthMs': number;
    /**
     * 
     * @type {number}
     * @memberof FolderObjectContentAttributesDTO
     */
    'bitrate': number;
}

export const FolderObjectContentAttributesDTOMediaTypeEnum = {
    Image: 'IMAGE',
    Video: 'VIDEO',
    Audio: 'AUDIO',
    Document: 'DOCUMENT',
    Unknown: 'UNKNOWN'
} as const;

export type FolderObjectContentAttributesDTOMediaTypeEnum = typeof FolderObjectContentAttributesDTOMediaTypeEnum[keyof typeof FolderObjectContentAttributesDTOMediaTypeEnum];

/**
 * 
 * @export
 * @interface FolderObjectDTO
 */
export interface FolderObjectDTO {
    /**
     * 
     * @type {string}
     * @memberof FolderObjectDTO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FolderObjectDTO
     */
    'objectKey': string;
    /**
     * 
     * @type {string}
     * @memberof FolderObjectDTO
     */
    'folderId': string;
    /**
     * 
     * @type {any}
     * @memberof FolderObjectDTO
     */
    'hash'?: any;
    /**
     * 
     * @type {number}
     * @memberof FolderObjectDTO
     */
    'lastModified': number;
    /**
     * 
     * @type {string}
     * @memberof FolderObjectDTO
     */
    'eTag': string;
    /**
     * 
     * @type {number}
     * @memberof FolderObjectDTO
     */
    'sizeBytes': number;
    /**
     * 
     * @type {string}
     * @memberof FolderObjectDTO
     */
    'mimeType': string;
    /**
     * 
     * @type {string}
     * @memberof FolderObjectDTO
     */
    'mediaType': FolderObjectDTOMediaTypeEnum;
    /**
     * 
     * @type {{ [key: string]: FolderObjectDTOContentAttributesValue | undefined; }}
     * @memberof FolderObjectDTO
     */
    'contentAttributes': { [key: string]: FolderObjectDTOContentAttributesValue | undefined; };
    /**
     * 
     * @type {{ [key: string]: { [key: string]: FolderObjectDTOContentMetadataValueValue | undefined; } | undefined; }}
     * @memberof FolderObjectDTO
     */
    'contentMetadata': { [key: string]: { [key: string]: FolderObjectDTOContentMetadataValueValue | undefined; } | undefined; };
}

export const FolderObjectDTOMediaTypeEnum = {
    Image: 'IMAGE',
    Video: 'VIDEO',
    Audio: 'AUDIO',
    Document: 'DOCUMENT',
    Unknown: 'UNKNOWN'
} as const;

export type FolderObjectDTOMediaTypeEnum = typeof FolderObjectDTOMediaTypeEnum[keyof typeof FolderObjectDTOMediaTypeEnum];

/**
 * 
 * @export
 * @interface FolderObjectDTOContentAttributesValue
 */
export interface FolderObjectDTOContentAttributesValue {
    /**
     * 
     * @type {string}
     * @memberof FolderObjectDTOContentAttributesValue
     */
    'mediaType': FolderObjectDTOContentAttributesValueMediaTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof FolderObjectDTOContentAttributesValue
     */
    'mimeType': string;
    /**
     * 
     * @type {number}
     * @memberof FolderObjectDTOContentAttributesValue
     */
    'height': number;
    /**
     * 
     * @type {number}
     * @memberof FolderObjectDTOContentAttributesValue
     */
    'width': number;
    /**
     * 
     * @type {number}
     * @memberof FolderObjectDTOContentAttributesValue
     */
    'orientation': number;
    /**
     * 
     * @type {number}
     * @memberof FolderObjectDTOContentAttributesValue
     */
    'lengthMs': number;
    /**
     * 
     * @type {number}
     * @memberof FolderObjectDTOContentAttributesValue
     */
    'bitrate': number;
}

export const FolderObjectDTOContentAttributesValueMediaTypeEnum = {
    Image: 'IMAGE',
    Video: 'VIDEO',
    Audio: 'AUDIO',
    Document: 'DOCUMENT',
    Unknown: 'UNKNOWN'
} as const;

export type FolderObjectDTOContentAttributesValueMediaTypeEnum = typeof FolderObjectDTOContentAttributesValueMediaTypeEnum[keyof typeof FolderObjectDTOContentAttributesValueMediaTypeEnum];

/**
 * 
 * @export
 * @interface FolderObjectDTOContentMetadataValueValue
 */
export interface FolderObjectDTOContentMetadataValueValue {
    /**
     * 
     * @type {string}
     * @memberof FolderObjectDTOContentMetadataValueValue
     */
    'mimeType': string;
    /**
     * 
     * @type {number}
     * @memberof FolderObjectDTOContentMetadataValueValue
     */
    'size': number;
    /**
     * 
     * @type {string}
     * @memberof FolderObjectDTOContentMetadataValueValue
     */
    'hash': string;
}
/**
 * 
 * @export
 * @interface FolderObjectGetResponse
 */
export interface FolderObjectGetResponse {
    /**
     * 
     * @type {FolderObjectListResponseResultInner}
     * @memberof FolderObjectGetResponse
     */
    'folderObject': FolderObjectListResponseResultInner;
}
/**
 * 
 * @export
 * @interface FolderObjectListResponse
 */
export interface FolderObjectListResponse {
    /**
     * 
     * @type {UserListResponseMeta}
     * @memberof FolderObjectListResponse
     */
    'meta': UserListResponseMeta;
    /**
     * 
     * @type {Array<FolderObjectListResponseResultInner>}
     * @memberof FolderObjectListResponse
     */
    'result': Array<FolderObjectListResponseResultInner>;
}
/**
 * 
 * @export
 * @interface FolderObjectListResponseResultInner
 */
export interface FolderObjectListResponseResultInner {
    /**
     * 
     * @type {string}
     * @memberof FolderObjectListResponseResultInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FolderObjectListResponseResultInner
     */
    'objectKey': string;
    /**
     * 
     * @type {string}
     * @memberof FolderObjectListResponseResultInner
     */
    'folderId': string;
    /**
     * 
     * @type {any}
     * @memberof FolderObjectListResponseResultInner
     */
    'hash'?: any;
    /**
     * 
     * @type {number}
     * @memberof FolderObjectListResponseResultInner
     */
    'lastModified': number;
    /**
     * 
     * @type {string}
     * @memberof FolderObjectListResponseResultInner
     */
    'eTag': string;
    /**
     * 
     * @type {number}
     * @memberof FolderObjectListResponseResultInner
     */
    'sizeBytes': number;
    /**
     * 
     * @type {string}
     * @memberof FolderObjectListResponseResultInner
     */
    'mimeType': string;
    /**
     * 
     * @type {string}
     * @memberof FolderObjectListResponseResultInner
     */
    'mediaType': FolderObjectListResponseResultInnerMediaTypeEnum;
    /**
     * 
     * @type {{ [key: string]: FolderObjectDTOContentAttributesValue | undefined; }}
     * @memberof FolderObjectListResponseResultInner
     */
    'contentAttributes': { [key: string]: FolderObjectDTOContentAttributesValue | undefined; };
    /**
     * 
     * @type {{ [key: string]: { [key: string]: FolderObjectDTOContentMetadataValueValue | undefined; } | undefined; }}
     * @memberof FolderObjectListResponseResultInner
     */
    'contentMetadata': { [key: string]: { [key: string]: FolderObjectDTOContentMetadataValueValue | undefined; } | undefined; };
}

export const FolderObjectListResponseResultInnerMediaTypeEnum = {
    Image: 'IMAGE',
    Video: 'VIDEO',
    Audio: 'AUDIO',
    Document: 'DOCUMENT',
    Unknown: 'UNKNOWN'
} as const;

export type FolderObjectListResponseResultInnerMediaTypeEnum = typeof FolderObjectListResponseResultInnerMediaTypeEnum[keyof typeof FolderObjectListResponseResultInnerMediaTypeEnum];

/**
 * 
 * @export
 * @interface LoginCredentialsDTO
 */
export interface LoginCredentialsDTO {
    /**
     * 
     * @type {string}
     * @memberof LoginCredentialsDTO
     */
    'login': string;
    /**
     * 
     * @type {string}
     * @memberof LoginCredentialsDTO
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {LoginResponseSession}
     * @memberof LoginResponse
     */
    'session': LoginResponseSession;
}
/**
 * 
 * @export
 * @interface LoginResponseSession
 */
export interface LoginResponseSession {
    /**
     * 
     * @type {string}
     * @memberof LoginResponseSession
     */
    'accessToken': string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseSession
     */
    'refreshToken': string;
}
/**
 * 
 * @export
 * @interface SetSettingInputDTO
 */
export interface SetSettingInputDTO {
    /**
     * 
     * @type {any}
     * @memberof SetSettingInputDTO
     */
    'value'?: any;
}
/**
 * 
 * @export
 * @interface SettingSetResponse
 */
export interface SettingSetResponse {
    /**
     * 
     * @type {string}
     * @memberof SettingSetResponse
     */
    'settingKey': string;
    /**
     * 
     * @type {any}
     * @memberof SettingSetResponse
     */
    'settingValue'?: any;
}
/**
 * 
 * @export
 * @interface SettingsGetResponse
 */
export interface SettingsGetResponse {
    /**
     * 
     * @type {SettingsGetResponseSettings}
     * @memberof SettingsGetResponse
     */
    'settings': SettingsGetResponseSettings;
}
/**
 * 
 * @export
 * @interface SettingsGetResponseSettings
 */
export interface SettingsGetResponseSettings {
    /**
     * 
     * @type {boolean}
     * @memberof SettingsGetResponseSettings
     */
    'SIGNUP_ENABLED'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SettingsGetResponseSettings
     */
    'SERVER_HOSTNAME'?: string;
}
/**
 * 
 * @export
 * @interface SignupCredentialsDTO
 */
export interface SignupCredentialsDTO {
    /**
     * 
     * @type {string}
     * @memberof SignupCredentialsDTO
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof SignupCredentialsDTO
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof SignupCredentialsDTO
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface SignupResponse
 */
export interface SignupResponse {
    /**
     * 
     * @type {SignupResponseUser}
     * @memberof SignupResponse
     */
    'user': SignupResponseUser;
}
/**
 * 
 * @export
 * @interface SignupResponseUser
 */
export interface SignupResponseUser {
    /**
     * 
     * @type {string}
     * @memberof SignupResponseUser
     */
    'id': string;
    /**
     * 
     * @type {any}
     * @memberof SignupResponseUser
     */
    'name'?: any;
    /**
     * 
     * @type {any}
     * @memberof SignupResponseUser
     */
    'email'?: any;
    /**
     * 
     * @type {boolean}
     * @memberof SignupResponseUser
     */
    'emailVerified': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SignupResponseUser
     */
    'isAdmin': boolean;
    /**
     * 
     * @type {string}
     * @memberof SignupResponseUser
     */
    'username': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SignupResponseUser
     */
    'permissions': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SignupResponseUser
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof SignupResponseUser
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface TokenRefreshResponse
 */
export interface TokenRefreshResponse {
    /**
     * 
     * @type {LoginResponseSession}
     * @memberof TokenRefreshResponse
     */
    'session': LoginResponseSession;
}
/**
 * 
 * @export
 * @interface UpdateViewerInputDTO
 */
export interface UpdateViewerInputDTO {
    /**
     * 
     * @type {string}
     * @memberof UpdateViewerInputDTO
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface UserCreateInputDTO
 */
export interface UserCreateInputDTO {
    /**
     * 
     * @type {any}
     * @memberof UserCreateInputDTO
     */
    'name'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserCreateInputDTO
     */
    'email'?: any;
    /**
     * 
     * @type {boolean}
     * @memberof UserCreateInputDTO
     */
    'emailVerified'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserCreateInputDTO
     */
    'isAdmin': boolean;
    /**
     * 
     * @type {string}
     * @memberof UserCreateInputDTO
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateInputDTO
     */
    'password': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserCreateInputDTO
     */
    'permissions'?: Array<string>;
}
/**
 * 
 * @export
 * @interface UserGetResponse
 */
export interface UserGetResponse {
    /**
     * 
     * @type {SignupResponseUser}
     * @memberof UserGetResponse
     */
    'user': SignupResponseUser;
}
/**
 * 
 * @export
 * @interface UserListResponse
 */
export interface UserListResponse {
    /**
     * 
     * @type {UserListResponseMeta}
     * @memberof UserListResponse
     */
    'meta': UserListResponseMeta;
    /**
     * 
     * @type {Array<SignupResponseUser>}
     * @memberof UserListResponse
     */
    'result': Array<SignupResponseUser>;
}
/**
 * 
 * @export
 * @interface UserListResponseMeta
 */
export interface UserListResponseMeta {
    /**
     * 
     * @type {number}
     * @memberof UserListResponseMeta
     */
    'totalCount': number;
}
/**
 * 
 * @export
 * @interface UserUpdateInputDTO
 */
export interface UserUpdateInputDTO {
    /**
     * 
     * @type {any}
     * @memberof UserUpdateInputDTO
     */
    'name'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserUpdateInputDTO
     */
    'email'?: any;
    /**
     * 
     * @type {boolean}
     * @memberof UserUpdateInputDTO
     */
    'emailVerified'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserUpdateInputDTO
     */
    'isAdmin'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateInputDTO
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateInputDTO
     */
    'password'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserUpdateInputDTO
     */
    'permissions'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ViewerGetResponse
 */
export interface ViewerGetResponse {
    /**
     * 
     * @type {SignupResponseUser}
     * @memberof ViewerGetResponse
     */
    'user': SignupResponseUser;
}

/**
 * AppsApi - axios parameter creator
 * @export
 */
export const AppsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApps: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/server/apps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppsApi - functional programming interface
 * @export
 */
export const AppsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApps(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listApps(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppsApi - factory interface
 * @export
 */
export const AppsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApps(options?: AxiosRequestConfig): AxiosPromise<AppListResponse> {
            return localVarFp.listApps(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppsApi - object-oriented interface
 * @export
 * @class AppsApi
 * @extends {BaseAPI}
 */
export class AppsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApi
     */
    public listApps(options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).listApps(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginCredentialsDTO} loginCredentialsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginCredentialsDTO: LoginCredentialsDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginCredentialsDTO' is not null or undefined
            assertParamExists('login', 'loginCredentialsDTO', loginCredentialsDTO)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginCredentialsDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/refresh-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SignupCredentialsDTO} signupCredentialsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup: async (signupCredentialsDTO: SignupCredentialsDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signupCredentialsDTO' is not null or undefined
            assertParamExists('signup', 'signupCredentialsDTO', signupCredentialsDTO)
            const localVarPath = `/auth/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signupCredentialsDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginCredentialsDTO} loginCredentialsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginCredentialsDTO: LoginCredentialsDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginCredentialsDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshToken(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenRefreshResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SignupCredentialsDTO} signupCredentialsDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signup(signupCredentialsDTO: SignupCredentialsDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signup(signupCredentialsDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {AuthApiLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(requestParameters: AuthApiLoginRequest, options?: AxiosRequestConfig): AxiosPromise<LoginResponse> {
            return localVarFp.login(requestParameters.loginCredentialsDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: AxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(options?: AxiosRequestConfig): AxiosPromise<TokenRefreshResponse> {
            return localVarFp.refreshToken(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthApiSignupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup(requestParameters: AuthApiSignupRequest, options?: AxiosRequestConfig): AxiosPromise<SignupResponse> {
            return localVarFp.signup(requestParameters.signupCredentialsDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for login operation in AuthApi.
 * @export
 * @interface AuthApiLoginRequest
 */
export interface AuthApiLoginRequest {
    /**
     * 
     * @type {LoginCredentialsDTO}
     * @memberof AuthApiLogin
     */
    readonly loginCredentialsDTO: LoginCredentialsDTO
}

/**
 * Request parameters for signup operation in AuthApi.
 * @export
 * @interface AuthApiSignupRequest
 */
export interface AuthApiSignupRequest {
    /**
     * 
     * @type {SignupCredentialsDTO}
     * @memberof AuthApiSignup
     */
    readonly signupCredentialsDTO: SignupCredentialsDTO
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {AuthApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public login(requestParameters: AuthApiLoginRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).login(requestParameters.loginCredentialsDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public logout(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public refreshToken(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).refreshToken(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthApiSignupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public signup(requestParameters: AuthApiSignupRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).signup(requestParameters.signupCredentialsDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EventsApi - axios parameter creator
 * @export
 */
export const EventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvent: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/events/{eventId}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventsApi - functional programming interface
 * @export
 */
export const EventsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEvent(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEvent(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventsApi - factory interface
 * @export
 */
export const EventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvent(options?: AxiosRequestConfig): AxiosPromise<EventGetResponse> {
            return localVarFp.getEvent(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export class EventsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public getEvent(options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).getEvent(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FoldersApi - axios parameter creator
 * @export
 */
export const FoldersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {FolderCreateInputDTO} folderCreateInputDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFolder: async (folderCreateInputDTO: FolderCreateInputDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderCreateInputDTO' is not null or undefined
            assertParamExists('createFolder', 'folderCreateInputDTO', folderCreateInputDTO)
            const localVarPath = `/folders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(folderCreateInputDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} folderId 
         * @param {Array<FolderCreateSignedUrlInputDTOInner>} folderCreateSignedUrlInputDTOInner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPresignedUrls: async (folderId: string, folderCreateSignedUrlInputDTOInner: Array<FolderCreateSignedUrlInputDTOInner>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('createPresignedUrls', 'folderId', folderId)
            // verify required parameter 'folderCreateSignedUrlInputDTOInner' is not null or undefined
            assertParamExists('createPresignedUrls', 'folderCreateSignedUrlInputDTOInner', folderCreateSignedUrlInputDTOInner)
            const localVarPath = `/folders/{folderId}/presigned-urls`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(folderCreateSignedUrlInputDTOInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} folderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFolder: async (folderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('deleteFolder', 'folderId', folderId)
            const localVarPath = `/folders/{folderId}`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} folderId 
         * @param {string} objectKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFolderObject: async (folderId: string, objectKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('deleteFolderObject', 'folderId', folderId)
            // verify required parameter 'objectKey' is not null or undefined
            assertParamExists('deleteFolderObject', 'objectKey', objectKey)
            const localVarPath = `/folders/{folderId}/objects/{objectKey}`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)))
                .replace(`{${"objectKey"}}`, encodeURIComponent(String(objectKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} folderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolder: async (folderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('getFolder', 'folderId', folderId)
            const localVarPath = `/folders/{folderId}`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} folderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderMetadata: async (folderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('getFolderMetadata', 'folderId', folderId)
            const localVarPath = `/folders/{folderId}/metadata`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} folderId 
         * @param {string} objectKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderObject: async (folderId: string, objectKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('getFolderObject', 'folderId', folderId)
            // verify required parameter 'objectKey' is not null or undefined
            assertParamExists('getFolderObject', 'objectKey', objectKey)
            const localVarPath = `/folders/{folderId}/objects/{objectKey}`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)))
                .replace(`{${"objectKey"}}`, encodeURIComponent(String(objectKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} folderId 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFolderObjects: async (folderId: string, offset?: number, limit?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('listFolderObjects', 'folderId', folderId)
            const localVarPath = `/folders/{folderId}/objects`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFolders: async (offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/folders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} folderId 
         * @param {string} objectKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshFolderObjectS3Metadata: async (folderId: string, objectKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('refreshFolderObjectS3Metadata', 'folderId', folderId)
            // verify required parameter 'objectKey' is not null or undefined
            assertParamExists('refreshFolderObjectS3Metadata', 'objectKey', objectKey)
            const localVarPath = `/folders/{folderId}/objects/{objectKey}`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)))
                .replace(`{${"objectKey"}}`, encodeURIComponent(String(objectKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} folderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rescanFolder: async (folderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('rescanFolder', 'folderId', folderId)
            const localVarPath = `/folders/{folderId}/rescan`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FoldersApi - functional programming interface
 * @export
 */
export const FoldersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FoldersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {FolderCreateInputDTO} folderCreateInputDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFolder(folderCreateInputDTO: FolderCreateInputDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFolder(folderCreateInputDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} folderId 
         * @param {Array<FolderCreateSignedUrlInputDTOInner>} folderCreateSignedUrlInputDTOInner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPresignedUrls(folderId: string, folderCreateSignedUrlInputDTOInner: Array<FolderCreateSignedUrlInputDTOInner>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPresignedUrls(folderId, folderCreateSignedUrlInputDTOInner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} folderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFolder(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFolder(folderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} folderId 
         * @param {string} objectKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFolderObject(folderId: string, objectKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFolderObject(folderId, objectKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} folderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFolder(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFolder(folderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} folderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFolderMetadata(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderGetMetadataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFolderMetadata(folderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} folderId 
         * @param {string} objectKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFolderObject(folderId: string, objectKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderObjectGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFolderObject(folderId, objectKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} folderId 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFolderObjects(folderId: string, offset?: number, limit?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderObjectListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFolderObjects(folderId, offset, limit, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFolders(offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFolders(offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} folderId 
         * @param {string} objectKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshFolderObjectS3Metadata(folderId: string, objectKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FolderObjectGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshFolderObjectS3Metadata(folderId, objectKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} folderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rescanFolder(folderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rescanFolder(folderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FoldersApi - factory interface
 * @export
 */
export const FoldersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FoldersApiFp(configuration)
    return {
        /**
         * 
         * @param {FoldersApiCreateFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFolder(requestParameters: FoldersApiCreateFolderRequest, options?: AxiosRequestConfig): AxiosPromise<FolderCreateResponse> {
            return localVarFp.createFolder(requestParameters.folderCreateInputDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FoldersApiCreatePresignedUrlsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPresignedUrls(requestParameters: FoldersApiCreatePresignedUrlsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.createPresignedUrls(requestParameters.folderId, requestParameters.folderCreateSignedUrlInputDTOInner, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FoldersApiDeleteFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFolder(requestParameters: FoldersApiDeleteFolderRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteFolder(requestParameters.folderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FoldersApiDeleteFolderObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFolderObject(requestParameters: FoldersApiDeleteFolderObjectRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteFolderObject(requestParameters.folderId, requestParameters.objectKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FoldersApiGetFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolder(requestParameters: FoldersApiGetFolderRequest, options?: AxiosRequestConfig): AxiosPromise<FolderGetResponse> {
            return localVarFp.getFolder(requestParameters.folderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FoldersApiGetFolderMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderMetadata(requestParameters: FoldersApiGetFolderMetadataRequest, options?: AxiosRequestConfig): AxiosPromise<FolderGetMetadataResponse> {
            return localVarFp.getFolderMetadata(requestParameters.folderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FoldersApiGetFolderObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFolderObject(requestParameters: FoldersApiGetFolderObjectRequest, options?: AxiosRequestConfig): AxiosPromise<FolderObjectGetResponse> {
            return localVarFp.getFolderObject(requestParameters.folderId, requestParameters.objectKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FoldersApiListFolderObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFolderObjects(requestParameters: FoldersApiListFolderObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<FolderObjectListResponse> {
            return localVarFp.listFolderObjects(requestParameters.folderId, requestParameters.offset, requestParameters.limit, requestParameters.search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FoldersApiListFoldersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFolders(requestParameters: FoldersApiListFoldersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<FolderListResponse> {
            return localVarFp.listFolders(requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FoldersApiRefreshFolderObjectS3MetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshFolderObjectS3Metadata(requestParameters: FoldersApiRefreshFolderObjectS3MetadataRequest, options?: AxiosRequestConfig): AxiosPromise<FolderObjectGetResponse> {
            return localVarFp.refreshFolderObjectS3Metadata(requestParameters.folderId, requestParameters.objectKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FoldersApiRescanFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rescanFolder(requestParameters: FoldersApiRescanFolderRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rescanFolder(requestParameters.folderId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createFolder operation in FoldersApi.
 * @export
 * @interface FoldersApiCreateFolderRequest
 */
export interface FoldersApiCreateFolderRequest {
    /**
     * 
     * @type {FolderCreateInputDTO}
     * @memberof FoldersApiCreateFolder
     */
    readonly folderCreateInputDTO: FolderCreateInputDTO
}

/**
 * Request parameters for createPresignedUrls operation in FoldersApi.
 * @export
 * @interface FoldersApiCreatePresignedUrlsRequest
 */
export interface FoldersApiCreatePresignedUrlsRequest {
    /**
     * 
     * @type {string}
     * @memberof FoldersApiCreatePresignedUrls
     */
    readonly folderId: string

    /**
     * 
     * @type {Array<FolderCreateSignedUrlInputDTOInner>}
     * @memberof FoldersApiCreatePresignedUrls
     */
    readonly folderCreateSignedUrlInputDTOInner: Array<FolderCreateSignedUrlInputDTOInner>
}

/**
 * Request parameters for deleteFolder operation in FoldersApi.
 * @export
 * @interface FoldersApiDeleteFolderRequest
 */
export interface FoldersApiDeleteFolderRequest {
    /**
     * 
     * @type {string}
     * @memberof FoldersApiDeleteFolder
     */
    readonly folderId: string
}

/**
 * Request parameters for deleteFolderObject operation in FoldersApi.
 * @export
 * @interface FoldersApiDeleteFolderObjectRequest
 */
export interface FoldersApiDeleteFolderObjectRequest {
    /**
     * 
     * @type {string}
     * @memberof FoldersApiDeleteFolderObject
     */
    readonly folderId: string

    /**
     * 
     * @type {string}
     * @memberof FoldersApiDeleteFolderObject
     */
    readonly objectKey: string
}

/**
 * Request parameters for getFolder operation in FoldersApi.
 * @export
 * @interface FoldersApiGetFolderRequest
 */
export interface FoldersApiGetFolderRequest {
    /**
     * 
     * @type {string}
     * @memberof FoldersApiGetFolder
     */
    readonly folderId: string
}

/**
 * Request parameters for getFolderMetadata operation in FoldersApi.
 * @export
 * @interface FoldersApiGetFolderMetadataRequest
 */
export interface FoldersApiGetFolderMetadataRequest {
    /**
     * 
     * @type {string}
     * @memberof FoldersApiGetFolderMetadata
     */
    readonly folderId: string
}

/**
 * Request parameters for getFolderObject operation in FoldersApi.
 * @export
 * @interface FoldersApiGetFolderObjectRequest
 */
export interface FoldersApiGetFolderObjectRequest {
    /**
     * 
     * @type {string}
     * @memberof FoldersApiGetFolderObject
     */
    readonly folderId: string

    /**
     * 
     * @type {string}
     * @memberof FoldersApiGetFolderObject
     */
    readonly objectKey: string
}

/**
 * Request parameters for listFolderObjects operation in FoldersApi.
 * @export
 * @interface FoldersApiListFolderObjectsRequest
 */
export interface FoldersApiListFolderObjectsRequest {
    /**
     * 
     * @type {string}
     * @memberof FoldersApiListFolderObjects
     */
    readonly folderId: string

    /**
     * 
     * @type {number}
     * @memberof FoldersApiListFolderObjects
     */
    readonly offset?: number

    /**
     * 
     * @type {number}
     * @memberof FoldersApiListFolderObjects
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof FoldersApiListFolderObjects
     */
    readonly search?: string
}

/**
 * Request parameters for listFolders operation in FoldersApi.
 * @export
 * @interface FoldersApiListFoldersRequest
 */
export interface FoldersApiListFoldersRequest {
    /**
     * 
     * @type {number}
     * @memberof FoldersApiListFolders
     */
    readonly offset?: number

    /**
     * 
     * @type {number}
     * @memberof FoldersApiListFolders
     */
    readonly limit?: number
}

/**
 * Request parameters for refreshFolderObjectS3Metadata operation in FoldersApi.
 * @export
 * @interface FoldersApiRefreshFolderObjectS3MetadataRequest
 */
export interface FoldersApiRefreshFolderObjectS3MetadataRequest {
    /**
     * 
     * @type {string}
     * @memberof FoldersApiRefreshFolderObjectS3Metadata
     */
    readonly folderId: string

    /**
     * 
     * @type {string}
     * @memberof FoldersApiRefreshFolderObjectS3Metadata
     */
    readonly objectKey: string
}

/**
 * Request parameters for rescanFolder operation in FoldersApi.
 * @export
 * @interface FoldersApiRescanFolderRequest
 */
export interface FoldersApiRescanFolderRequest {
    /**
     * 
     * @type {string}
     * @memberof FoldersApiRescanFolder
     */
    readonly folderId: string
}

/**
 * FoldersApi - object-oriented interface
 * @export
 * @class FoldersApi
 * @extends {BaseAPI}
 */
export class FoldersApi extends BaseAPI {
    /**
     * 
     * @param {FoldersApiCreateFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    public createFolder(requestParameters: FoldersApiCreateFolderRequest, options?: AxiosRequestConfig) {
        return FoldersApiFp(this.configuration).createFolder(requestParameters.folderCreateInputDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FoldersApiCreatePresignedUrlsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    public createPresignedUrls(requestParameters: FoldersApiCreatePresignedUrlsRequest, options?: AxiosRequestConfig) {
        return FoldersApiFp(this.configuration).createPresignedUrls(requestParameters.folderId, requestParameters.folderCreateSignedUrlInputDTOInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FoldersApiDeleteFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    public deleteFolder(requestParameters: FoldersApiDeleteFolderRequest, options?: AxiosRequestConfig) {
        return FoldersApiFp(this.configuration).deleteFolder(requestParameters.folderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FoldersApiDeleteFolderObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    public deleteFolderObject(requestParameters: FoldersApiDeleteFolderObjectRequest, options?: AxiosRequestConfig) {
        return FoldersApiFp(this.configuration).deleteFolderObject(requestParameters.folderId, requestParameters.objectKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FoldersApiGetFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    public getFolder(requestParameters: FoldersApiGetFolderRequest, options?: AxiosRequestConfig) {
        return FoldersApiFp(this.configuration).getFolder(requestParameters.folderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FoldersApiGetFolderMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    public getFolderMetadata(requestParameters: FoldersApiGetFolderMetadataRequest, options?: AxiosRequestConfig) {
        return FoldersApiFp(this.configuration).getFolderMetadata(requestParameters.folderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FoldersApiGetFolderObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    public getFolderObject(requestParameters: FoldersApiGetFolderObjectRequest, options?: AxiosRequestConfig) {
        return FoldersApiFp(this.configuration).getFolderObject(requestParameters.folderId, requestParameters.objectKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FoldersApiListFolderObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    public listFolderObjects(requestParameters: FoldersApiListFolderObjectsRequest, options?: AxiosRequestConfig) {
        return FoldersApiFp(this.configuration).listFolderObjects(requestParameters.folderId, requestParameters.offset, requestParameters.limit, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FoldersApiListFoldersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    public listFolders(requestParameters: FoldersApiListFoldersRequest = {}, options?: AxiosRequestConfig) {
        return FoldersApiFp(this.configuration).listFolders(requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FoldersApiRefreshFolderObjectS3MetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    public refreshFolderObjectS3Metadata(requestParameters: FoldersApiRefreshFolderObjectS3MetadataRequest, options?: AxiosRequestConfig) {
        return FoldersApiFp(this.configuration).refreshFolderObjectS3Metadata(requestParameters.folderId, requestParameters.objectKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FoldersApiRescanFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApi
     */
    public rescanFolder(requestParameters: FoldersApiRescanFolderRequest, options?: AxiosRequestConfig) {
        return FoldersApiFp(this.configuration).rescanFolder(requestParameters.folderId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ServerApi - axios parameter creator
 * @export
 */
export const ServerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServerSettings: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/server/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} settingKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetServerSetting: async (settingKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'settingKey' is not null or undefined
            assertParamExists('resetServerSetting', 'settingKey', settingKey)
            const localVarPath = `/server/settings/{settingKey}`
                .replace(`{${"settingKey"}}`, encodeURIComponent(String(settingKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} settingKey 
         * @param {SetSettingInputDTO} setSettingInputDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setServerSetting: async (settingKey: string, setSettingInputDTO: SetSettingInputDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'settingKey' is not null or undefined
            assertParamExists('setServerSetting', 'settingKey', settingKey)
            // verify required parameter 'setSettingInputDTO' is not null or undefined
            assertParamExists('setServerSetting', 'setSettingInputDTO', setSettingInputDTO)
            const localVarPath = `/server/settings/{settingKey}`
                .replace(`{${"settingKey"}}`, encodeURIComponent(String(settingKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setSettingInputDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServerApi - functional programming interface
 * @export
 */
export const ServerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServerSettings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServerSettings(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} settingKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetServerSetting(settingKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingSetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetServerSetting(settingKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} settingKey 
         * @param {SetSettingInputDTO} setSettingInputDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setServerSetting(settingKey: string, setSettingInputDTO: SetSettingInputDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingSetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setServerSetting(settingKey, setSettingInputDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServerApi - factory interface
 * @export
 */
export const ServerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServerSettings(options?: AxiosRequestConfig): AxiosPromise<SettingsGetResponse> {
            return localVarFp.getServerSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ServerApiResetServerSettingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetServerSetting(requestParameters: ServerApiResetServerSettingRequest, options?: AxiosRequestConfig): AxiosPromise<SettingSetResponse> {
            return localVarFp.resetServerSetting(requestParameters.settingKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ServerApiSetServerSettingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setServerSetting(requestParameters: ServerApiSetServerSettingRequest, options?: AxiosRequestConfig): AxiosPromise<SettingSetResponse> {
            return localVarFp.setServerSetting(requestParameters.settingKey, requestParameters.setSettingInputDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for resetServerSetting operation in ServerApi.
 * @export
 * @interface ServerApiResetServerSettingRequest
 */
export interface ServerApiResetServerSettingRequest {
    /**
     * 
     * @type {string}
     * @memberof ServerApiResetServerSetting
     */
    readonly settingKey: string
}

/**
 * Request parameters for setServerSetting operation in ServerApi.
 * @export
 * @interface ServerApiSetServerSettingRequest
 */
export interface ServerApiSetServerSettingRequest {
    /**
     * 
     * @type {string}
     * @memberof ServerApiSetServerSetting
     */
    readonly settingKey: string

    /**
     * 
     * @type {SetSettingInputDTO}
     * @memberof ServerApiSetServerSetting
     */
    readonly setSettingInputDTO: SetSettingInputDTO
}

/**
 * ServerApi - object-oriented interface
 * @export
 * @class ServerApi
 * @extends {BaseAPI}
 */
export class ServerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    public getServerSettings(options?: AxiosRequestConfig) {
        return ServerApiFp(this.configuration).getServerSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ServerApiResetServerSettingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    public resetServerSetting(requestParameters: ServerApiResetServerSettingRequest, options?: AxiosRequestConfig) {
        return ServerApiFp(this.configuration).resetServerSetting(requestParameters.settingKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ServerApiSetServerSettingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerApi
     */
    public setServerSetting(requestParameters: ServerApiSetServerSettingRequest, options?: AxiosRequestConfig) {
        return ServerApiFp(this.configuration).setServerSetting(requestParameters.settingKey, requestParameters.setSettingInputDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserCreateInputDTO} userCreateInputDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (userCreateInputDTO: UserCreateInputDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreateInputDTO' is not null or undefined
            assertParamExists('createUser', 'userCreateInputDTO', userCreateInputDTO)
            const localVarPath = `/server/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreateInputDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUser', 'userId', userId)
            const localVarPath = `/server/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUser', 'userId', userId)
            const localVarPath = `/server/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {boolean} [isAdmin] 
         * @param {ListUsersSortEnum} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: async (offset?: number, limit?: number, isAdmin?: boolean, sort?: ListUsersSortEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/server/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (isAdmin !== undefined) {
                localVarQueryParameter['isAdmin'] = isAdmin;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {UserUpdateInputDTO} userUpdateInputDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (userId: string, userUpdateInputDTO: UserUpdateInputDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUser', 'userId', userId)
            // verify required parameter 'userUpdateInputDTO' is not null or undefined
            assertParamExists('updateUser', 'userUpdateInputDTO', userUpdateInputDTO)
            const localVarPath = `/server/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdateInputDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserCreateInputDTO} userCreateInputDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(userCreateInputDTO: UserCreateInputDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(userCreateInputDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {boolean} [isAdmin] 
         * @param {ListUsersSortEnum} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsers(offset?: number, limit?: number, isAdmin?: boolean, sort?: ListUsersSortEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(offset, limit, isAdmin, sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userId 
         * @param {UserUpdateInputDTO} userUpdateInputDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(userId: string, userUpdateInputDTO: UserUpdateInputDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(userId, userUpdateInputDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {UsersApiCreateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(requestParameters: UsersApiCreateUserRequest, options?: AxiosRequestConfig): AxiosPromise<UserGetResponse> {
            return localVarFp.createUser(requestParameters.userCreateInputDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsersApiDeleteUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(requestParameters: UsersApiDeleteUserRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteUser(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsersApiGetUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(requestParameters: UsersApiGetUserRequest, options?: AxiosRequestConfig): AxiosPromise<UserGetResponse> {
            return localVarFp.getUser(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsersApiListUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(requestParameters: UsersApiListUsersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<UserListResponse> {
            return localVarFp.listUsers(requestParameters.offset, requestParameters.limit, requestParameters.isAdmin, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsersApiUpdateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(requestParameters: UsersApiUpdateUserRequest, options?: AxiosRequestConfig): AxiosPromise<UserGetResponse> {
            return localVarFp.updateUser(requestParameters.userId, requestParameters.userUpdateInputDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createUser operation in UsersApi.
 * @export
 * @interface UsersApiCreateUserRequest
 */
export interface UsersApiCreateUserRequest {
    /**
     * 
     * @type {UserCreateInputDTO}
     * @memberof UsersApiCreateUser
     */
    readonly userCreateInputDTO: UserCreateInputDTO
}

/**
 * Request parameters for deleteUser operation in UsersApi.
 * @export
 * @interface UsersApiDeleteUserRequest
 */
export interface UsersApiDeleteUserRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiDeleteUser
     */
    readonly userId: string
}

/**
 * Request parameters for getUser operation in UsersApi.
 * @export
 * @interface UsersApiGetUserRequest
 */
export interface UsersApiGetUserRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiGetUser
     */
    readonly userId: string
}

/**
 * Request parameters for listUsers operation in UsersApi.
 * @export
 * @interface UsersApiListUsersRequest
 */
export interface UsersApiListUsersRequest {
    /**
     * 
     * @type {number}
     * @memberof UsersApiListUsers
     */
    readonly offset?: number

    /**
     * 
     * @type {number}
     * @memberof UsersApiListUsers
     */
    readonly limit?: number

    /**
     * 
     * @type {boolean}
     * @memberof UsersApiListUsers
     */
    readonly isAdmin?: boolean

    /**
     * 
     * @type {'createdAt-asc' | 'createdAt-desc' | 'email-asc' | 'email-desc' | 'name-asc' | 'name-desc' | 'role-asc' | 'role-desc' | 'status-asc' | 'status-desc' | 'updatedAt-asc' | 'updatedAt-desc'}
     * @memberof UsersApiListUsers
     */
    readonly sort?: ListUsersSortEnum
}

/**
 * Request parameters for updateUser operation in UsersApi.
 * @export
 * @interface UsersApiUpdateUserRequest
 */
export interface UsersApiUpdateUserRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiUpdateUser
     */
    readonly userId: string

    /**
     * 
     * @type {UserUpdateInputDTO}
     * @memberof UsersApiUpdateUser
     */
    readonly userUpdateInputDTO: UserUpdateInputDTO
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {UsersApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createUser(requestParameters: UsersApiCreateUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).createUser(requestParameters.userCreateInputDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUser(requestParameters: UsersApiDeleteUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).deleteUser(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUser(requestParameters: UsersApiGetUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUser(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiListUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUsers(requestParameters: UsersApiListUsersRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUsers(requestParameters.offset, requestParameters.limit, requestParameters.isAdmin, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUser(requestParameters: UsersApiUpdateUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateUser(requestParameters.userId, requestParameters.userUpdateInputDTO, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListUsersSortEnum = {
    CreatedAtAsc: 'createdAt-asc',
    CreatedAtDesc: 'createdAt-desc',
    EmailAsc: 'email-asc',
    EmailDesc: 'email-desc',
    NameAsc: 'name-asc',
    NameDesc: 'name-desc',
    RoleAsc: 'role-asc',
    RoleDesc: 'role-desc',
    StatusAsc: 'status-asc',
    StatusDesc: 'status-desc',
    UpdatedAtAsc: 'updatedAt-asc',
    UpdatedAtDesc: 'updatedAt-desc'
} as const;
export type ListUsersSortEnum = typeof ListUsersSortEnum[keyof typeof ListUsersSortEnum];


/**
 * ViewerApi - axios parameter creator
 * @export
 */
export const ViewerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getViewer: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/viewer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateViewerInputDTO} updateViewerInputDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateViewer: async (updateViewerInputDTO: UpdateViewerInputDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateViewerInputDTO' is not null or undefined
            assertParamExists('updateViewer', 'updateViewerInputDTO', updateViewerInputDTO)
            const localVarPath = `/viewer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateViewerInputDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ViewerApi - functional programming interface
 * @export
 */
export const ViewerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ViewerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getViewer(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewerGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getViewer(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateViewerInputDTO} updateViewerInputDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateViewer(updateViewerInputDTO: UpdateViewerInputDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewerGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateViewer(updateViewerInputDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ViewerApi - factory interface
 * @export
 */
export const ViewerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ViewerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getViewer(options?: AxiosRequestConfig): AxiosPromise<ViewerGetResponse> {
            return localVarFp.getViewer(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ViewerApiUpdateViewerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateViewer(requestParameters: ViewerApiUpdateViewerRequest, options?: AxiosRequestConfig): AxiosPromise<ViewerGetResponse> {
            return localVarFp.updateViewer(requestParameters.updateViewerInputDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for updateViewer operation in ViewerApi.
 * @export
 * @interface ViewerApiUpdateViewerRequest
 */
export interface ViewerApiUpdateViewerRequest {
    /**
     * 
     * @type {UpdateViewerInputDTO}
     * @memberof ViewerApiUpdateViewer
     */
    readonly updateViewerInputDTO: UpdateViewerInputDTO
}

/**
 * ViewerApi - object-oriented interface
 * @export
 * @class ViewerApi
 * @extends {BaseAPI}
 */
export class ViewerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewerApi
     */
    public getViewer(options?: AxiosRequestConfig) {
        return ViewerApiFp(this.configuration).getViewer(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ViewerApiUpdateViewerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewerApi
     */
    public updateViewer(requestParameters: ViewerApiUpdateViewerRequest, options?: AxiosRequestConfig) {
        return ViewerApiFp(this.configuration).updateViewer(requestParameters.updateViewerInputDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



