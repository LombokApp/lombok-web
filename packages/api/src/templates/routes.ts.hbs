/* tslint:disable */
/* eslint-disable */
// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
import { Controller, TsoaRoute, HttpStatusCodeLiteral, TsoaResponse } from '@tsoa/runtime';
{{#each controllers}}
// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
import { {{name}} } from '{{modulePath}}';
{{/each}}
{{#if authenticationModule}}
import { expressAuthentication } from '{{authenticationModule}}';
{{/if}}
{{#if iocModule}}
import { iocContainer } from '{{iocModule}}';
import { IocContainer, IocContainerFactory } from '@tsoa/runtime';
{{/if}}
import * as express from 'express';
import type { OpenApiValidator } from 'express-openapi-validate';
{{#if useFileUploads}}
const multer = require('multer');
const upload = multer();
{{/if}}

// From https://github.com/lukeautry/tsoa/blob/641f12c/packages/cli/src/utils/pathUtils.ts#L23
const convertPath = (path: string) => path.replace(/:([^\/]+)/g, '{$1}');

// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa

export function RegisterRoutes(app: express.Router, validator: OpenApiValidator) {
  {{!-- app.use('{{basePath}}', validator.match()); --}}

  // ###########################################################################################################
  //  NOTE: If you do not see routes for all of your controllers in this file, then you might not have informed tsoa of where to look
  //  Please look into the "controllerPathGlobs" config option described in the readme: https://github.com/lukeautry/tsoa
  // ###########################################################################################################
  {{#each controllers}}
  {{#each actions}}
  app.{{method}}(
    '{{fullPath}}',
    {{#if security.length}}
    authenticateMiddleware({{json security}}),
    {{/if}}
    {{#if uploadFile}}
    upload.single('{{uploadFileName}}'),
    {{/if}}
    {{#if uploadFiles}}
    upload.array('{{uploadFilesName}}'),
    {{/if}}
    validator.validate('{{method}}', convertPath('{{basePath}}{{../path}}{{path}}')),
    function {{../name}}_{{name}}(request: any, response: any, next: any) {
      const args = {
        {{#each parameters}}
          {{@key}}: {{{json this}}},
        {{/each}}
      };

      // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa

      {{#if ../../iocModule}}
      const container: IocContainer = typeof iocContainer === 'function' ? (iocContainer as IocContainerFactory)(request) : iocContainer;

      const controller: any = container.get<{{../name}}>({{../name}});
      if (typeof controller['setStatus'] === 'function') {
        controller.setStatus(undefined);
      }
      {{else}}
      const controller = new {{../name}}();
      {{/if}}

      const promise = controller.{{name}}.apply(controller, getArgs(args, request, response));
      promiseHandler(controller, promise, response, {{successStatus}}, next);
    }
  );
  
  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
  {{/each}}
  {{/each}}

  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa

  function isController(object: any): object is Controller {
    return 'getHeaders' in object && 'getStatus' in object && 'setStatus' in object;
  }

  function promiseHandler(controllerObj: any, promise: any, response: any, successStatus: any, next: any) {
    return Promise.resolve(promise)
      .then((data: any) => {
        let statusCode = successStatus;
        let headers;
        if (isController(controllerObj)) {
          headers = controllerObj.getHeaders();
          statusCode = controllerObj.getStatus() || statusCode;
        }

        // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa

        returnHandler(response, statusCode, data, headers)
      })
      .catch((error: any) => next(error));
  }

  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa

  function returnHandler(response: any, statusCode?: number, data?: any, headers: any = {}) {
    if (response.headersSent) {
      return;
    }
    Object.keys(headers).forEach((name: string) => {
      response.set(name, headers[name]);
    });
    if (data && typeof data.pipe === 'function' && data.readable && typeof data._read === 'function') {
      data.pipe(response);
    } else if (data !== null && data !== undefined) {
      response.status(statusCode || 200).json(data);
    } else {
      response.status(statusCode || 204).end();
    }
  }

  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa

  function responder(response: any): TsoaResponse<HttpStatusCodeLiteral, unknown>  {
    return function(status, data, headers) {
      returnHandler(response, status, data, headers);
    };
  };

  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa

  function getArgs(args: any, request: any, response: any): any[] {
    const values = Object.keys(args).map((key) => {
      const name = args[key].name;
      switch (args[key].in) {
        case 'request':
          return request;
        case 'query':
          return request.query[name];
        case 'path':
          return request.params[name];
        case 'header':
          return request.header(name);
        case 'body':
          return request.body;
        case 'body-prop':
          return request.body[name];
        case 'formData':
          if (args[key].dataType === 'file') {
            return request.file;
          } else if (args[key].dataType === 'array' && args[key].array.dataType === 'file') {
            return request.files;
          } else {
            return request.body[name];
          }
        case 'res':
          return responder(response);
      }
    });
    
    return values;
  }

  // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
}

// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa


// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa

{{#if useSecurity}}
export function authenticateMiddleware(security: TsoaRoute.Security[] = []) {
  return function runAuthenticationMiddleware(request: any, _response: any, next: any) {
    let responded = 0;
    let success = false;

    const succeed = function(user: any) {
      if (!success) {
        success = true;
        responded++;
        request['user'] = user;
        next();
      }
    }

    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa

    const fail = function(error: any) {
      responded++;
      if (responded == security.length && !success) {
        error.status = error.status || 401;
        next(error)
      }
    }

    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa

    for (const secMethod of security) {
      if (Object.keys(secMethod).length > 1) {
        let promises: Promise<any>[] = [];

        for (const name in secMethod) {
          promises.push(expressAuthentication(request, name, secMethod[name]));
        }

        Promise.all(promises)
          .then((users) => { succeed(users[0]); })
          .catch(fail);
      } else {
        for (const name in secMethod) {
          expressAuthentication(request, name, secMethod[name])
            .then(succeed)
            .catch(fail);
        }
      }
    }
  }
}
{{/if}}