import type { AdapterMap } from './kvjs.types'

export const OPERATION_ADAPTER_MAP: AdapterMap = {
  set: 'SET',
  get: 'GET',
  append: 'APPEND',
  del: 'DEL',
  exists: 'EXISTS',
  incr: 'INCR',
  incrby: 'INCRBY',
  decr: 'DECR',
  decrby: 'DECRBY',
  expire: 'EXPIRE',
  keys: 'KEYS',
  mget: 'MGET',
  mset: 'MSET',
  renamenx: 'RENAMENX',
  randomkey: 'randomKey',
  expireat: 'expireAt',
  pexpire: 'pExpire',
  pexpireat: 'pExpireAt',
  pttl: 'pTTL',
  ttl: 'TTL',
  persist: 'persist',
  getrange: 'getRange',
  getset: 'getSet',
  setex: 'setEx',
  setrange: 'setRange',
  strlen: 'strLen',
  msetnx: 'mSetNX',
  incrbyfloat: 'incrByFloat',
  getbit: 'getBit',
  setbit: 'setBit',
  copy: 'copy',
  rename: 'rename',
  type: 'type',
  sadd: 'SADD',
  scard: 'sCard',
  sdiff: 'sDiff',
  sdiffstore: 'sDiffStore',
  sinter: 'sInter',
  sintercard: 'sInterCard',
  sinterstore: 'sInterStore',
  sismember: 'sIsMember',
  smembers: 'sMembers',
  smismember: 'smIsMember',
  smove: 'sMove',
  spop: 'sPop',
  srandmember: 'sRandMember',
  srem: 'sRem',
  sscan: 'sScan',
  sunion: 'sUnion',
  sunionstore: 'sUnionStore',
  lset: 'lSet',
  ltrim: 'lTrim',
  rpop: 'rPop',
  rpoplpush: 'rPopLPush',
  rpush: 'rPush',
  rpushx: 'rPushX',
  lpush: 'lPush',
  lpushx: 'lPushX',
  lrange: 'lRange',
  lrem: 'lRem',
  lmove: 'lMove',
  lmpop: 'lmPop',
  lpop: 'lPop',
  lpos: 'lPos',
  brpoplpush: 'brPopLPush',
  lindex: 'lIndex',
  linsert: 'lInsert',
  llen: 'lLen',
  blmove: 'blMove',
  blmpop: 'blmPop',
  blpop: 'blPop',
  brpop: 'brPop',
  expiretime: 'expireTime',
  pexpiretime: 'pExpireTime',
  zadd: 'zAdd',
  zcard: 'zCard',
  zcount: 'zCount',
  zdiff: 'zDiff',
  zdiffstore: 'zDiffStore',
  bzmpop: 'bzmPop',
  bzpopmax: 'bzPopMax',
  bzpopmin: 'bzPopMin',
  zincrby: 'zIncrBy',
  zinter: 'zInter',
  zintercard: 'zInterCard',
  zinterstore: 'zInterStore',
  zlexcount: 'zLexCount',
  zmpop: 'zmPop',
  zmscore: 'zmScore',
  zpopmax: 'zPopMax',
  zpopmin: 'zPopMin',
  zrandmember: 'zRandMember',
  zrange: 'zRange',
  zrangebylex: 'zRangeByLex',
  zrangebyscore: 'zRangeByScore',
  zrangestore: 'zRangeStore',
  zrank: 'zRank',
  zrem: 'zRem',
  zremrangebylex: 'zRemRangeByLex',
  zremrangebyrank: 'zRemRangeByRank',
  zremrangebyscore: 'zRemRangeByScore',
  zrevrange: 'zRevRange',
  zrevrangebylex: 'zRevRangeByLex',
  zrevrangebyscore: 'zRevRangeByScore',
  zrevrank: 'zRevRank',
  zscan: 'zScan',
  zscore: 'zScore',
  zunion: 'zUnion',
  zunionstore: 'zUnionStore',
  geoadd: 'geoAdd',
  geodist: 'geoDist',
  geohash: 'geoHash',
  geopos: 'geoPos',
  georadius: 'geoRadius',
  georadius_ro: 'geoRadiusRo',
  georadiusbymember: 'geoRadiusByMember',
  georadiusbymember_ro: 'geoRadiusByMemberRo',
  geosearch: 'geoSearch',
  geosearchstore: 'geoSearchStore',
  scan: 'scan',
  sort: 'SORT',
  touch: 'TOUCH',
  sort_ro: 'SORTRO',
  unlink: 'UNLINK',
  hset: 'HSET',
  hdel: 'HDEL',
  hget: 'HGET',
  hgetall: 'HGETALL',
  hincrby: 'HINCRBY',
  hincrbyfloat: 'HINCRBYFLOAT',
  hkeys: 'HKEYS',
  hlen: 'HLEN',
  hmget: 'HMGET',
  hmset: 'HMSET',
  hsetnx: 'HSETNX',
  hstrlen: 'HSTRLEN',
  hvals: 'HVALS',
  hscan: 'HSCAN',
  hexists: 'HEXISTS',
  hrandfield: 'hRandField',
  flushall: 'flushAll',
}
